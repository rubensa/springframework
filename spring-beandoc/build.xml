<?xml version="1.0" encoding="UTF-8"?>

<!--
  Build file for the beandoc tool.

  This script requires a "lib" directory containing the necessary third party JAR files.
  See project.properties for the definitions of the properties used in this file.

  @author Darren Davison
  @since 1.0  
-->

<project name="spring-beandoc" default="usage" basedir=".">

    <property file="build.properties"/>
    <property file="project.properties"/>


    <path id="all-libs">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>
    
    
    <target name="usage">
        <echo>
        ${project.title} build file
        ------------------------------------------------------
        
        Available targets are:
        
        build         --> compile classes and place in 
                          ${target.classes.dir}
                          
        dist          --> create JAR files and dependencies and place in 
                          ${target.dist.dir}
                          
        tests         --> run tests and place reports in 
                          ${target.junit.reports.dir}
                          
        testsummary   --> Run test suite and generate test summary in 
                          ${target.junit.reports.dir}
                          
        docapi        --> builds API documentation in 
                          ${target.javadocs.dir}
                          
        docpdf        --> builds reference documentation as PDF in 
                          ${target.refdocs.pdf.dir}
                          
        dochtml       --> builds reference documentation as chunked HTML in 
                          ${target.refdocs.html.dir}
                          
        dochtmlsingle --> builds reference documentation as single HTML file in 
                          ${target.refdocs.html.dir}
                          
        docall        --> builds all documentation (HTML, PDF and JavaDoc) to locations above
                          
        docclean      --> remove all documentation and intermediate documentation artifacts
        
        clean         --> remove all build artifacts, reports etc.
        </echo>
    </target>


    <!--
        Clean all build products
    -->
    <target name="clean" description="Clean all output dirs (dist, javadocs, classes, test-classes, etc.)">
        <!-- 
            don't remove ide-classes
        -->
        <delete dir="${target.javadocs.dir}"/>

        <delete dir="${target.classes.dir}"/>
        <delete dir="${target.testclasses.dir}"/>
        <delete dir="${target.junit.reports.dir}"/>
        <delete dir="${target.junit.summary.dir}"/>
    	<delete dir="${target.clover.dir}"/>

    </target>
    
    
    <!--
        Compile the main source tree.
    -->
    <target name="build" description="Compile main source tree java files into class files">
        <mkdir dir="${target.classes.dir}"/>

        <javac destdir="${target.classes.dir}" source="1.3" target="1.3" debug="${debug}"
                deprecation="false" optimize="false" failonerror="true">
            <src path="${src.dir}"/>
            <classpath refid="all-libs"/>
        </javac>

        <copy todir="${target.classes.dir}" preservelastmodified="true">
            <fileset dir="${src.dir}">
                <include name="**/*.png"/>
                <include name="**/*.xml"/>
                <include name="**/*.xsl"/>
                <include name="**/*.gif"/>
                <include name="**/*.css"/>
            </fileset>
        </copy>
    </target>
    
    
    <!--
        Create jar file and other distributable products
    -->
    <target name="dist" depends="build" description="Create beandoc jarfile and copy dependencies">
        <mkdir dir="${target.dist.dir}"/>

        <jar jarfile="${target.dist.dir}/spring-beandoc.jar">
            <fileset dir="${target.classes.dir}">
                <include name="org/springframework/beandoc/**"/>
            </fileset>
            <manifest>
                <attribute name="Implementation-Title" value="${project.title}"/>
                <attribute name="Implementation-Version" value="${project.version}"/>
                <attribute name="Beandoc-Version" value="${project.version}"/>
            </manifest>
        </jar>
        
        <!-- copy dependencies that need to go with beandoc.jar -->
        <copy todir="${target.dist.dir}" preservelastmodified="true">
            <fileset dir="${lib.dir}">
                <include name="spring-core.jar"/>
                <include name="jdom.jar"/>
                <include name="commons-logging.jar"/>
            </fileset>
        </copy>
    </target>
    
    
    <!--
        Compile test classes into target area
    -->
    <target name="buildtests" depends="build" description="Compile test source tree java files into class files">

        <mkdir dir="${target.testclasses.dir}"/>

        <javac destdir="${target.testclasses.dir}" source="1.3" target="1.3" debug="${debug}"
                deprecation="false" optimize="false" failonerror="true">
            <src path="${test.dir}"/>
            <classpath refid="all-libs"/>
            <classpath location="${target.classes.dir}"/>
        </javac>

        <!-- Pick up logging config from test directory -->
        <copy todir="${target.testclasses.dir}" preservelastmodified="true">
            <fileset dir="${test.dir}">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
            </fileset>
        </copy>
    </target>


    <!--
        Run test suite. Includes and excludes are read from
        build.properties. However it's possible to run specific tests by passing in
        the test.includes and (optionally) test.excludes properties through the
        command line, as below:
            ant tests -Dtest.includes=org/springframework/beandoc/**/*Test*
    -->
    <target name="tests" depends="buildtests" description="Run tests">

        <mkdir dir="${target.junit.reports.dir}"/>

        <junit forkmode="perBatch" printsummary="yes" haltonfailure="yes" haltonerror="yes">

            <!-- Must go first to ensure any jndi.properties files etc take precedence  -->
            <classpath location="${target.testclasses.dir}"/>
            <classpath location="${target.classes.dir}"/>

            <!-- Need files loaded as resources -->
            <classpath location="${test.dir}"/>

            <classpath refid="all-libs"/>

            <formatter type="plain" usefile="false"/>
            <formatter type="xml"/>

            <batchtest fork="yes" todir="${target.junit.reports.dir}">
                <fileset dir="${target.testclasses.dir}"
                            includes="${test.includes}"
                            excludes="${test.excludes}">
                </fileset>
            </batchtest>
        </junit>
    </target>
    
    
    <!--
        Run test suite and generate test summary.
        Does not halt on failure or error, in contrast to the "tests" target above.
    -->
    <target name="testsummary" depends="buildtests" description="Run tests and generate test summary">


        <mkdir dir="${target.junit.reports.dir}"/>
        <mkdir dir="${target.junit.summary.dir}"/>

        <junit printsummary="yes" haltonfailure="no" haltonerror="no">

            <!-- Must go first to ensure any jndi.properties files etc take precedence  -->
            <classpath location="${target.testclasses.dir}"/>
            <classpath location="${target.classes.dir}"/>

            <!-- Need files loaded as resources -->
            <classpath location="${test.dir}"/>

            <classpath refid="all-libs"/>

            <formatter type="plain" usefile="false"/>
            <formatter type="xml"/>

            <batchtest fork="yes" todir="${target.junit.reports.dir}">
                <fileset dir="${target.testclasses.dir}" includes="${test.includes}" excludes="${test.excludes}"/>
            </batchtest>

        </junit>

        <junitreport todir="${target.junit.reports.dir}">

            <fileset dir="${target.junit.reports.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report todir="${target.junit.summary.dir}"/>

        </junitreport>

    </target>
    
    

	<target name="clover.build" description="Compile main source tree java files WITH CLOVER into class files">

		<!-- switch on Clover by specifying it as the compiler to use -->
		<property name="build.compiler" value="org.apache.tools.ant.taskdefs.CloverCompilerAdapter"/>

		<mkdir dir="${target.clover.dir}"/>

		<javac destdir="${target.clover.dir}" source="1.3" target="1.3" debug="${debug}"
				deprecation="false" optimize="false" failonerror="true">
			<src path="${src.dir}"/>
			<classpath refid="all-libs"/>
		</javac>

		<copy todir="${target.clover.dir}" preservelastmodified="true">
			<fileset dir="${src.dir}">
                <include name="**/*.png"/>
                <include name="**/*.xml"/>
                <include name="**/*.xsl"/>
                <include name="**/*.gif"/>
                <include name="**/*.css"/>
			</fileset>
		</copy>

	</target>


	<target name="clover.tests" depends="buildtests,clover.build" description="Run Clover tests">

		<property name="reports.dir" value="${target.junit.reports.dir}"/>

		<mkdir dir="${target.junit.summary.dir}"/>

		<junit printsummary="yes" haltonfailure="yes" haltonerror="yes">

			<jvmarg line="-Djava.awt.headless=true"/>

			<classpath location="${target.testclasses.dir}"/>
			<classpath location="${target.clover.dir}"/>

			<!-- Need files loaded as resources -->
			<classpath location="${test.dir}"/>

			<classpath refid="all-libs"/>

			<formatter type="plain" usefile="false"/>
			<formatter type="xml"/>

			<batchtest fork="yes" todir="${target.junit.summary.dir}">
				<fileset dir="${target.testclasses.dir}" includes="${test.includes}" excludes="${test.excludes}"/>
			</batchtest>

		</junit>

	</target>


	<!--
		Run test suite under Clover coverage analysis, and use Clover
		to generate Javadoc/style HTML results that may be browsed later.
	-->
	<target name="clover.html" depends="clover.tests" description="Run Clover tests and generate HTML coverage reports">

		<java classname="com.cortexeb.tools.clover.reporters.html.HtmlReporter" fork="yes">
			<arg line="-o '${target.clover.html.dir}' -i '${clover.initstring}' -t 'Spring BeanDoc'"/>
			<classpath refid="all-libs"/>
		</java>

	</target>
	
	
    
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
         target: docclean
         depends: 
         notes: 
         ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <target name="docclean" description="Delete documentation">
        <delete quiet="true" dir="${target.refdocs.pdf.dir}"/>
        <delete quiet="true" dir="${target.refdocs.html.dir}"/>
        <delete quiet="true" dir="${target.javadocs.dir}"/>
    </target>
    
    
    <!-- 
        Create API docs 
    -->
    <target name="docapi" description="Generate framework Javadocs.">
        <mkdir dir="${target.javadocs.dir}"/>

        <javadoc sourcepath="${src.dir}" destdir="${target.javadocs.dir}" windowtitle="Spring Framework"
                source="1.3" author="true" version="true" use="true" defaultexcludes="true">
            <doctitle><![CDATA[<h1>Spring BeanDoc</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright (C) 2003-2004 The Spring Framework Project.</i>]]></bottom>
            <classpath refid="all-libs"/>
            <packageset dir="${src.dir}">
                <include name="org/springframework/**"/>
            </packageset>
        </javadoc>

    </target>
    


    <target name="checkdocbuild" description="Ensure docbook libs are available">
		<fail message="XSLT supporting lib not installed. Please see ${refdocs.src.dir}/readme.txt for instructions.">
			<condition>
				<not>
					<available file="${docbook.dir}/lib"/>
				</not>
			</condition>
		</fail>

		<mkdir dir="${target.refdocs.dir}/images/admons"/>
        <copy todir="${target.refdocs.dir}/images/admons">
            <fileset dir="${refdocs.src.dir}/images/admons">
                <include name="**/*"/>
            </fileset>
        </copy>
	</target>
	
	
	
	<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
         target: docpdf
         depends: 
         notes: 
         ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <target name="docpdf" 
    	depends="checkdocbuild" description="Compile reference documentation to pdf">
        <mkdir dir="${target.refdocs.pdf.dir}"/>
        <mkdir dir="${target.refdocs.pdf.dir}/images"/>

        <copy todir="${target.refdocs.pdf.dir}/images">
            <fileset dir="${refdocs.src.dir}/images">
				<include name="*.gif"/>
				<include name="*.svg"/>
				<include name="*.jpg"/>
				<include name="*.png"/>
            </fileset>
        </copy>

        <java failonerror="yes" classname="com.icl.saxon.StyleSheet" fork="true" dir="${refdocs.src.dir}">
            <classpath>
                <fileset dir="${docbook.dir}/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <arg value="-o"/>
            <arg value="${target.refdocs.pdf.dir}/docbook_fop.tmp"/>
            <arg value="${refdocs.src.dir}/index.xml"/>
            <arg value="${refdocs.src.dir}/styles/fopdf.xsl"/>
        </java>

        <java classname="org.apache.fop.apps.Fop" fork="true" dir="${refdocs.src.dir}">
            <classpath>
                <fileset dir="${docbook.dir}/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <arg value="${target.refdocs.pdf.dir}/docbook_fop.tmp"/>
            <arg value="${target.refdocs.pdf.dir}/spring-beandoc.pdf"/>
        </java>

        <delete file="${target.refdocs.pdf.dir}/docbook_fop.tmp"/>
        <delete dir="${target.refdocs.pdf.dir}/images"/>
    </target>


    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
         target: dochtml
         depends: 
         notes: 
         ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <target name="dochtml" 
    	depends="checkdocbuild" description="Compile reference documentation to chunked html">
        <mkdir dir="${target.refdocs.html.dir}"/>
        <mkdir dir="${target.refdocs.html.dir}/styles"/>
        
        <copy todir="${target.refdocs.html.dir}/images">
            <fileset dir="${refdocs.src.dir}/images">
				<include name="*.gif"/>
				<include name="*.svg"/>
				<include name="*.jpg"/>
				<include name="*.png"/>
            </fileset>
        </copy>
        
        <copy todir="${target.refdocs.html.dir}/styles">
            <fileset dir="${refdocs.src.dir}/styles">
                <include name="*.css"/>
            </fileset>
        </copy>

        <java classname="com.icl.saxon.StyleSheet" fork="true" dir="${target.refdocs.html.dir}">
            <classpath>
                <fileset dir="${docbook.dir}/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <arg value="${refdocs.src.dir}/index.xml"/>
            <arg value="${refdocs.src.dir}/styles/html_chunk.xsl"/>
        </java>
    </target>


    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
         target: dochtmlsingle
         depends: 
         notes: 
         ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <target name="dochtmlsingle" 
    	depends="checkdocbuild" description="Compile reference documentation to single html">
        <mkdir dir="${target.refdocs.html.dir}"/>
        <mkdir dir="${target.refdocs.html.dir}/styles"/>

        <copy todir="${target.refdocs.html.dir}/images">
            <fileset dir="${refdocs.src.dir}/images">
				<include name="*.gif"/>
				<include name="*.svg"/>
				<include name="*.jpg"/>
				<include name="*.png"/>
            </fileset>
        </copy>
        
        <copy todir="${target.refdocs.html.dir}/styles">
            <fileset dir="${refdocs.src.dir}/styles">
                <include name="*.css"/>
            </fileset>
        </copy>

        <java classname="com.icl.saxon.StyleSheet" fork="true" dir="${refdocs.src.dir}">
            <classpath>
                <fileset dir="${docbook.dir}/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <arg value="-o"/>
            <arg value="${target.refdocs.html.dir}/index.html"/>
            <arg value="${refdocs.src.dir}/index.xml"/>
            <arg value="${refdocs.src.dir}/styles/html.xsl"/>
        </java>
    </target>


    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
         target: docall
         depends: docapi,dochtml,docpdf,docapi
         notes: 
         ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <target name="docall"
        depends="docapi,dochtml,docpdf"
        description="Generate and copy all reference and api documentation">
    </target>
	
	<target name="webtar"
		description="tar/compress test results, coverage, apidoc and refdoc for web site upload">
		<delete file="${target.dist.dir}/beandoc.tbz2"/>
		<tar destfile="${target.dist.dir}/beandoc.tbz2" compression="bzip2">
			<tarfileset dir="${target.clover.html.dir}" prefix="clover/">
				<include name="**/*"/>
			</tarfileset>
			<tarfileset dir="${target.junit.summary.dir}" prefix="junit/">
				<include name="**/*"/>
			</tarfileset>
			<tarfileset dir="${target.javadocs.dir}" prefix="apidoc/">
			    <include name="**/*"/>
			</tarfileset>
			<tarfileset dir="${target.refdocs.html.dir}" prefix="refdoc/">
			    <include name="**/*"/>
			</tarfileset>
			<tarfileset dir="${target.refdocs.dir}" prefix="">
			    <include name="images/**"/>
			</tarfileset>
		</tar>
	</target>
	
	
	<target name="webdocs"
		depends="testsummary,clover.html,dochtml,docapi,webtar"
		description="Docs, reports for website upload"/>
	
	<!--
        Release zip file generation
    -->
    <target name="release" 
        depends="clean,webdocs,dist,docpdf" 
        description="Build distribution units and all documentation.  Generate release zip">
        
        <delete file="${target.dist.dir}/${project.name}-${project.version}.zip"/>
        <copy file="${target.refdocs.pdf.dir}/spring-beandoc.pdf" todir="${basedir}"/>
        <zip zipfile="${target.dist.dir}/${project.name}-${project.version}.zip">
            <fileset dir="${basedir}">
                <exclude name="target/**/*"/>
                <exclude name="docs/**/*"/>
            </fileset>
        </zip>
        <delete file="${basedir}/spring-beandoc.pdf"/>
        
    </target>
    
</project>
