<?xml version="1.0" encoding="UTF-8"?>

<!--
  Build file for the beandoc tool.

  This script requires a "lib" directory containing the necessary third party JAR files.
  See project.properties for the definitions of the properties used in this file.

  @author Darren Davison
  @since 1.0  
-->

<project name="spring-beandoc" default="usage" basedir="..">

    <property file="build/build.properties"/>
    <property file="build/project.properties"/>


    <path id="all-libs">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>
    
    
    <target name="usage">
        <echo message=""/>
        <echo message="${project.title} build file"/>
        <echo message="------------------------------------------------------"/>
        <echo message=""/>
        <echo message="Available targets are:"/>
        <echo message=""/>
        <echo message="build       --> compile classes and place in ${target.classes.dir}"/>
        <echo message="dist        --> create JAR files and dependencies and place in ${target.dist.dir}"/>
        <echo message="tests       --> run tests and place reports in ${target.junit.reports.dir}"/>
        <echo message="testsummary --> Run test suite and generate test summary in ${target.junit.reports.dir}"/>
        <echo message="javadoc     --> build API documentation and place in ${target.javadocs.dir}"/>
        <echo message="refdoc      --> build reference documentation and place in ${target.refdocs.dir}"/>
        <echo message="clean       --> remove all build artifacts, reports etc."/>
        <echo message=""/>
    </target>


    <!--
        Clean all build products
    -->
    <target name="clean" description="Clean all output dirs (dist, javadocs, classes, test-classes, etc.)">
        <!-- 
            everything here *should* be under {target.dir} anyway,
            but it might have been overridden 
        -->
        <delete dir="${target.javadocs.dir}"/>

        <delete dir="${target.classes.dir}"/>
        <delete dir="${target.testclasses.dir}"/>
        <delete dir="${target.junit.reports.dir}"/>
        <delete dir="${target.junit.summary.dir}"/>

        <delete dir="${target.dir}"/>
    </target>
    
    
    <!--
        Compile the main source tree.
    -->
    <target name="build" description="Compile main source tree java files into class files">
        <mkdir dir="${target.classes.dir}"/>

        <javac destdir="${target.classes.dir}" source="1.3" target="1.3" debug="${debug}"
                deprecation="false" optimize="false" failonerror="true">
            <src path="${src.dir}"/>
            <classpath refid="all-libs"/>
        </javac>

        <copy todir="${target.classes.dir}" preservelastmodified="true">
            <fileset dir="${src.dir}">
                <include name="**/*.xml"/>
                <include name="**/*.xsl"/>
                <include name="**/*.gif"/>
                <include name="**/*.css"/>
            </fileset>
        </copy>
    </target>
    
    
    <!--
        Create jar file and other distributable products
    -->
    <target name="dist" depends="build" description="Create beandoc jarfile and copy dependencies">
        <mkdir dir="${target.dist.dir}"/>

        <jar jarfile="${target.dist.dir}/spring-beandoc.jar">
            <fileset dir="${target.classes.dir}">
                <include name="org/springframework/beandoc/**"/>
            </fileset>
            <manifest>
                <attribute name="Implementation-Title" value="${project.title}"/>
                <attribute name="Implementation-Version" value="${project.version}"/>
                <attribute name="Beandoc-Version" value="${project.version}"/>
            </manifest>
        </jar>
        
        <!-- copy dependencies that need to go with beandoc.jar -->
        <copy todir="${target.dist.dir}" preservelastmodified="true">
            <fileset dir="${lib.dir}">
                <include name="spring-core.jar"/>
                <include name="jdom.jar"/>
                <include name="commons-logging.jar"/>
            </fileset>
        </copy>
    </target>
    
    
    <!-- 
    	Create API docs 
    -->
    <target name="javadoc" description="Generate framework Javadocs.">
		<mkdir dir="${target.javadocs.dir}"/>

		<javadoc sourcepath="${src.dir}" destdir="${target.javadocs.dir}" windowtitle="Spring Framework"
				source="1.3" author="true" version="true" use="true" defaultexcludes="true">
			<doctitle><![CDATA[<h1>Spring BeanDoc</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright (C) 2003-2004 The Spring Framework Project.</i>]]></bottom>
			<classpath refid="all-libs"/>
			<packageset dir="${src.dir}">
				<include name="org/springframework/**"/>
			</packageset>
		</javadoc>

	</target>
	
	
	<!--
		Compile test classes into target area
	-->
	<target name="buildtests" depends="build" description="Compile test source tree java files into class files">

		<mkdir dir="${target.testclasses.dir}"/>

		<javac destdir="${target.testclasses.dir}" source="1.3" target="1.3" debug="${debug}"
				deprecation="false" optimize="false" failonerror="true">
			<src path="${test.dir}"/>
			<classpath refid="all-libs"/>
			<classpath location="${target.classes.dir}"/>
		</javac>

		<!-- Pick up logging config from test directory -->
		<copy todir="${target.testclasses.dir}" preservelastmodified="true">
			<fileset dir="${test.dir}">
				<include name="**/*.properties"/>
				<include name="**/*.xml"/>
			</fileset>
		</copy>
	</target>


	<!--
		Run test suite. Includes and excludes are read from
		build.properties. However it's possible to run specific tests by passing in
		the test.includes and (optionally) test.excludes properties through the
		command line, as below:
			ant tests -Dtest.includes=org/springframework/beandoc/**/*Test*
	-->
	<target name="tests" depends="buildtests" description="Run tests">

		<mkdir dir="${target.junit.reports.dir}"/>

		<junit forkmode="perBatch" printsummary="yes" haltonfailure="yes" haltonerror="yes">

			<!-- Must go first to ensure any jndi.properties files etc take precedence  -->
			<classpath location="${target.testclasses.dir}"/>
			<classpath location="${target.classes.dir}"/>

			<!-- Need files loaded as resources -->
			<classpath location="${test.dir}"/>

			<classpath refid="all-libs"/>

			<formatter type="plain" usefile="false"/>
			<formatter type="xml"/>

			<batchtest fork="yes" todir="${target.junit.reports.dir}">
				<fileset dir="${target.testclasses.dir}"
							includes="${test.includes}"
							excludes="${test.excludes}">
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	
	<!--
		Run test suite and generate test summary.
		Does not halt on failure or error, in contrast to the "tests" target above.
	-->
	<target name="testsummary" depends="buildtests" description="Run tests and generate test summary">


		<mkdir dir="${target.junit.reports.dir}"/>
		<mkdir dir="${target.junit.summary.dir}"/>

		<junit printsummary="yes" haltonfailure="no" haltonerror="no">

			<!-- Must go first to ensure any jndi.properties files etc take precedence  -->
			<classpath location="${target.testclasses.dir}"/>
			<classpath location="${target.classes.dir}"/>

			<!-- Need files loaded as resources -->
			<classpath location="${test.dir}"/>

			<classpath refid="all-libs"/>

			<formatter type="plain" usefile="false"/>
			<formatter type="xml"/>

			<batchtest fork="yes" todir="${target.junit.reports.dir}">
				<fileset dir="${target.testclasses.dir}" includes="${test.includes}" excludes="${test.excludes}"/>
			</batchtest>

		</junit>

		<junitreport todir="${target.junit.reports.dir}">

			<fileset dir="${target.junit.reports.dir}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report todir="${target.junit.summary.dir}"/>

		</junitreport>

	</target>
    
</project>
