# ----------------------------------------------------------------------------
# Sample beandoc.properties configuration file.
#
# Darren Davison Jan. 2005
#
# Most properties are self-documenting, a brief explanation of some of the 
# configurable options that you may wish to tweak are highlighted below.
# ----------------------------------------------------------------------------


# ----------------------------------------------------------------------------
# MANDATORY properties (unless specified explicitly on the command line or as 
# parameters to the ant task.  Can also be specified as system properties if 
# qualified with a preceding "springbeandoc.")
#
# You can get away with running beandoc with just the input and output
# properties shown below, although to prevent warnings about GraphViz you 
# will either need to also specify the location of the "dot" binary, or
# supply an alternative context file that doesn't use graphviz (such as the
# one in the same directory as this file).  See the documentation for more 
# information on advanced configurability.
# ----------------------------------------------------------------------------

# input files can be one or more (comma-separated if multiple) resource
# locations.  Resources are standard Spring resources and can use file:/ or
# classpath: protocols and wildcards.  Note that beandoc defaults to FILE
# sysytem resources, not classpath resources if no qualifier is listed.
input.files=./jpetstore/*.xml
#input.files=./petclinic/*.xml
#input.files=/projects/my-spring-project/file1.xml,/projects/my-spring-project/file2.xml
#input.files=classpath:/com/foo/bar/context.xml
#input.files=C:/projects/my-spring-project/*.xml

# outputDir must be writeable for the current user and must already exist
# prior to running the tool.
output.dir=../target/sample-output/




# ----------------------------------------------------------------------------
# OPTIONAL properties based on the bean names in the context definition file.
# Any of the beans in the default context can be post-processed from this
# properties file.
# ----------------------------------------------------------------------------

# you can have the XML parser not bother to validate the input files against
# the DTD if you so wish.  True by default.
#processor.validateFiles=false

# proxy beans and their targets can be merged such that the target is 
# documented and graphed as an anonymous inner bean would be.  Logically
# a proxy and its target are one, but they may be separate in context files 
# so that, for example, unit tests can access the unwrapped target.  Specify
# a regex pattern for the proxy beans you wish to merge with the value of
# the map entry being the property name that the target is found under 
# (usually 'target').
#processor.mergeProxies[^myProxyBean$]=target
#processor.mergeProxies[.*ProxyFactoryBean]=target

# documentation title used in the HTML output
html.title=JPetStore Application Context

# skin the output with your own CSS file if you don't like ours!  The 
# wheat.css is an included option that you can try.
#html.cssUrl=wheat.css
#html.cssUrl=http://our.corporate.server/beandoc.css

# well known (Java system and SpringFramework) API locations are built in to 
# the tool.  Add your own here.  The following example will link a classname of 
# com.foo.bar.MyClass to http://your.local.server/apidoc/com/foo/bar/MyClass.html
javadoc.locations[com.foo.bar]=http://your.local.server/apidoc/

# to get the graphing working, specify the location of your GraphViz dot 
# binary here
compiler.dotExe=/usr/bin/dot
#compiler.dotExe=C:/Program Files/ATT/GraphViz/bin/dot.exe

# pretty up the graphs with some nice colours.  Override the built-ins or add 
# to them as required for your bean names or package names - uses standard
# Regex patterns
graphs.colourBeans[com\.foo\.bar.*]=#a090a0
graphs.colourBeans[^/OrderService.*]=#f0f080
graphs.colourBeans[.*Proxy$]=#badbad

# selectively ignore beans on graphing output.  All beans will still be 
# documented in HTML by default.  Uses standard Regex patterns.
graphs.ignoreBeans[0]=^org\.springframework.*Property.*Configurer
graphs.ignoreBeans[1]=.*MessageSource

# constrain certain beans to a single rank (row) on the graphs.  Use with care.
graphs.rankBeans[0]=.*DataSource
#graphs.rankBeans[1]=.*samples\..*\.dao\.ibatis.*

# change the graph types if needed (PNG is highly recommended if your viewer 
# supports it).
graphs.outputType=png
#graphs.outputType=jpg
#graphs.outputType=gif
#graphs.outputType=svg

# if skinning the output with CSS just doesn't cut it for you, feel free to 
# supply your own XSLT templates to any of the Transformer beans!
#htmlIndexTransformer.templateName=classpath:my/preferred/stylesheet.xsl
