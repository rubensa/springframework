<?xml version="1.0" encoding="UTF-8"?>

<!--
 * Copyright 2002-2004 the original author or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
-->

<!--
 *
 * Converts a decorated DOM tree into a .dot file for consumption by GraphViz.
 *
 * @author Darren Davison, credit to Mike Thomas whose SpringViz program 
 * provided some of the ideas.
-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:beans="http://www.springframework.org/schema/beans">

    <xsl:output method="text"/>

    <!--
     *
     * sets digraph and applies templates for beans and refs.  The xpath expression
     * used to select beans will automatically filter out any anonymous inner
     * beans in the tree.
     *
    -->
    <xsl:template match="/">
	/*
	 * directed graph dot input file.
	 *
	 * generated by Spring BeanDoc
	 */
	digraph G {
        <xsl:apply-templates select="beans:beans"/>

        /* bean definitions */
        <xsl:apply-templates select="beans:beans/beans:bean[not(@beandocGraphIgnore) and @beandocRank]">
        	<xsl:sort select="@beandocRank" order="ascending"/>
        </xsl:apply-templates>
        <xsl:apply-templates select="beans:beans/beans:bean[not(@beandocGraphIgnore) and not(@beandocRank)]"/>

        /* dependencies */
        <xsl:apply-templates select="beans:beans/beans:bean//beans:ref"/>
        <xsl:apply-templates select="beans:beans/beans:bean//@*"/>
        <xsl:apply-templates select="beans:beans/beans:bean//beans:lookup-method"/>
	}
    </xsl:template>


    <!--
     *
     * sets defaults for graph, node and edge elements
     *
    -->
    <xsl:template match="beans:beans">
        graph [
        	<xsl:if test="@beandocGraphSize">size="<xsl:value-of select="@beandocGraphSize"/>"</xsl:if>
        	ratio="<xsl:value-of select="@beandocGraphRatio"/>"
        	label="<xsl:value-of select="@beandocFileName"/>"
        	labelloc=<xsl:value-of select="@beandocGraphLabelLocation"/>
        ];
    	node  [
    		shape="<xsl:value-of select="@beandocGraphBeanShape"/>",
    		style="dotted",
    		fontname="<xsl:value-of select="@beandocGraphFontName"/>",
    		fontsize="<xsl:value-of select="@beandocGraphFontSize"/>"
    	];
    	edge  [ ];
    </xsl:template>


    <!--
     *
     * override node styles for beans in the DOM and draw parent/child
     * relationships.  Anonymous inner beans are not graphed since it
     * reduces clarity in the graph.
     *
    -->
    <xsl:template match="beans:bean">
    	<xsl:variable name="beandocId">
    		<xsl:choose>
		  		<xsl:when test="@id">
					<xsl:value-of select="@id"/>
		  		</xsl:when>
			  	<xsl:otherwise>
					<xsl:value-of select="@name"/>
			  	</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="beandocPeripheries">
    		<xsl:choose>
		  		<xsl:when test="@singleton = 'false'">
					<xsl:value-of select="1"/>
		  		</xsl:when>
			  	<xsl:otherwise>
					<xsl:value-of select="2"/>
			  	</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>

		<!-- group ranked beans -->
		<xsl:if test="not(@beandocRank=preceding::node()/@beandocRank)">
			<xsl:text> </xsl:text>
			<xsl:if test="@beandocRank">
		{ rank=same;
			</xsl:if>
		</xsl:if>

		"<xsl:value-of select="$beandocId"/>" [
			<xsl:if test="@beandocProxyFor">label="<xsl:value-of select="$beandocId"/>\n(proxies <xsl:value-of select="@beandocProxyFor"/>)"</xsl:if>
        	peripheries=<xsl:value-of select="$beandocPeripheries"/>,
	        style=filled,
	        URL="<xsl:value-of select="@beandocHtmlFileName"/>#<xsl:value-of select="$beandocId"/>",
			tooltip="<xsl:value-of select="@class"/>",
	        <xsl:if test="@abstract = 'true'">
	        /* abstract bean */
	        shape=polygon,
	        sides=4,
	        skew=.3,</xsl:if>
	        color="<xsl:value-of select="@beandocFillColour"/>"
	    ];
        <xsl:if test="@parent">
        	<!-- special type of relationship - dotted line, no arrow -->
        "<xsl:value-of select="@parent"/>" -&gt; "<xsl:value-of select="@id"/><xsl:value-of select="@name"/>" [
        	style=dotted arrowhead=none arrowtail=odot
        ];
        </xsl:if>

        <!-- close rank goup -->
        <xsl:if test="not(@beandocRank=following::node()/@beandocRank)">
        	<xsl:text> </xsl:text>
        	<xsl:if test="@beandocRank">
        }
        	</xsl:if>
       	</xsl:if>
    </xsl:template>


    <!--
     *
     * show relationships (dependencies) indicated by 'ref' tags in the DOM
     *
    -->
    <xsl:template match="beans:ref|beans:lookup-method">
        "<xsl:value-of select="ancestor::beans:bean/@id"/><xsl:value-of select="ancestor::beans:bean/@name"/>" -&gt; "<xsl:value-of select="@bean"/><xsl:value-of select="@local"/>" [ ]
    </xsl:template>

    <xsl:template match="@ref|@idref|@value-ref">
        "<xsl:value-of select="ancestor::beans:bean/@id"/><xsl:value-of select="ancestor::beans:bean/@name"/>" -&gt; "<xsl:value-of select="."/>" [ ]
    </xsl:template>

    <xsl:template match="@depends-on">
        <xsl:call-template name="split-depends-on">
            <xsl:with-param name="str" select="."/>
        </xsl:call-template>
    </xsl:template>


    <xsl:template name="split-depends-on">
        <xsl:param name="str"/>
        <xsl:choose>
            <xsl:when test="contains($str,',')">
                "<xsl:value-of select="ancestor::beans:bean/@id"/><xsl:value-of select="ancestor::beans:bean/@name"/>" -&gt; "<xsl:value-of select="normalize-space(substring-before($str,','))"/>" [ ]
                <xsl:call-template name="split-depends-on">
                    <xsl:with-param name="str" select="substring-after($str,',')"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                "<xsl:value-of select="ancestor::beans:bean/@id"/><xsl:value-of select="ancestor::beans:bean/@name"/>" -&gt; "<xsl:value-of select="normalize-space($str)"/>" [ ]
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>


	<!--
	 * hide other attribs
	-->
	<xsl:template match="@*"/>

</xsl:stylesheet>
