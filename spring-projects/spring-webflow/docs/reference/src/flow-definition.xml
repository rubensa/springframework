<?xml version="1.0" encoding="UTF-8"?>
<chapter id="flow-definition">
	<title>Flow definition</title>
	<sect1 id="flow-intro">
		<title>Introduction</title>
		<para>
			Spring Web Flow allows developers to build reusable, self-contained controller modules
			called flows.  A flow is a blueprint for a user conversation (or dialog)
			that drives the execution of application code to complete a business goal.
		</para>
		<para>
			Flows are defined declaratively using a rich domain-specific language (DSL) 
			tailored to the problem domain of page flow.  Currently, Java-based and XML-based
			forms of this language are provided.
		</para>
		<para>
			This chapter documents Spring Web Flow's core flow definition language.  You'll
			learn the core domain constructs of the system and how those constructs are
			representable in an externalized XML form.
		</para>
    </sect1>
    <sect1 id="flow">
    	<title>Flow</title>
    	<para>
    		A flow is defined by a single instance of <literal>org.springframework.webflow.Flow</literal>.
    		This is the central domain artifact representing the definition of a conversation.
		</para>
		<para>
    		A flow consists of a set of one or more states, where each state defines a step in
    		the flow that, when entered, executes a behavior.  What behavior is executed is 
    		a function of the state's type and configuration.  The outcome of a state's
    		execution, called an event, is used by the flow to drive a state transition.
    	</para>
    	<para>
			Exactly one of a flow's states is the <literal>startState</literal> 
			that defines the starting point of the flow.  One or more end states
			define the ending points of a flow.
    	</para>
    	<para>
    		The properties of a <literal>org.springframework.webflow.Flow</literal> are summarized 
    		below:
    	</para>
        <table frame="all">
            <title>Flow properties</title>
            <tgroup cols="2">
                <colspec colname="c1" colwidth="2*" />
                <colspec colname="c2" colwidth="4*" />
                <thead>
                    <row>
                        <entry>Property name</entry>
                        <entry>Description</entry>
                        <entry>Cardinality</entry>
                        <entry>Default value</entry>
                    </row>
               </thead>
               <tbody>
                   <row>
                       <entry>id</entry>
                       <entry>The identifier of the flow, typically unique to all other flows of the application.</entry>
				       <entry>
				           <emphasis>1</emphasis>
				       </entry>
                   </row>         
                   <row>
                       <entry>properties</entry>
                       <entry>Additional, custom properties about the flow.</entry>
				       <entry>
				           <emphasis>0..*</emphasis>
				       </entry>
				       <entry>None</entry>
                   </row>
                   <row>
                       <entry>states</entry>
                       <entry>The steps of the flow.</entry>
				       <entry>
				           <emphasis>1..*, at least one end state</emphasis>
				       </entry>
                   </row>
                   <row>
                       <entry>startState</entry>
                       <entry>The starting point of the flow.</entry>
				       <entry>
				           <emphasis>1</emphasis>
				       </entry>
                   </row>
                   <row>
                       <entry>startActions</entry>
                       <entry>The list of actions to execute each time an execution of this flow is started.</entry>
				       <entry>
				           <emphasis>0..*</emphasis>
				       </entry>
				       <entry>Empty</entry>
                   </row>
                   <row>
                       <entry>endActions</entry>
                       <entry>The list of actions to execute each time an execution of this flow ends.</entry>
				       <entry>
				           <emphasis>0..*</emphasis>
				       </entry>
				       <entry>Empty</entry>
                   </row>
                   <row>
                       <entry>exceptionHandlers</entry>
                       <entry>An ordered set of handlers to be applied when an exception is thrown within a state of this flow.</entry>
				       <entry>
				           <emphasis>0..*</emphasis>
				       </entry>
				       <entry>Empty</entry>
                   </row>
                   <row>
                       <entry>inlineFlows</entry>
                       <entry>A set of inner Flows that will be called as subflows; these Flows are locally scoped to the outer Flow.</entry>
				       <entry>
				           <emphasis>0..*</emphasis>
				       </entry>
				       <entry>Empty</entry>
                   </row>
               </tbody>
          </tgroup>
        </table>
        <para>
            Below is a high level example of how these Flow properties can be configured in XML form
            or directly in Java code.
        </para>
        <sect2 id="flow-xml">
        	<title>XML-based Flow template</title>
       	    <programlisting>
    &lt;flow start-state="startingPoint"/&gt;
        &lt;property .../&gt;
        
        &lt;start-actions&gt;
            ...
        &lt;/start-actions&gt;
        
        &lt;-- your state definitions go here --&gt;
        
        &lt;end-actions&gt;
            ...
        &lt;/end-actions&gt;

        &lt;exception-handler .../&gt;

        &lt;inline-flow&gt;
            ...
        &lt;/inline-flow&gt;
    &lt;/flow&gt;
         	</programlisting>
        </sect2>
        <sect2 id="flow-java">
           <title>Java Flow API example</title>
           <programlisting>
    Flow flow = new Flow("id");
    flow.setProperty(..., ...);
    flow.addState(...);
    flow.setStartState("startingPoint");
    flow.addStartAction(...);
    flow.addEndAction(...);
    flow.addExceptionHandler(...);
    flow.addInlineFlow(...);
          </programlisting>
        </sect2>
    </sect1>
    <sect1 id="state">
    	<title>State</title>
    	<para>
    	    A State defines the behavior for a step of the flow.
    	    The base class for all Flow state types is <literal>org.springframework.webflow.State</literal>.
    	    This abstract class defines common properties applicable to all state types, which include:
    	</para>
    	<table>
            <title>State properties</title>
            <tgroup cols="2">
                <colspec colname="c1" colwidth="2*" />
                <colspec colname="c2" colwidth="4*" />
                <thead>
                    <row>
                        <entry>Property name</entry>
                        <entry>Description</entry>
                        <entry>Cardinality</entry>
                        <entry>Default value</entry>
                    </row>
               </thead>
               <tbody>
                   <row>
                       <entry>id</entry>
                       <entry>The id of the state, unique to its containing Flow.</entry>
				       <entry>
				           <emphasis>1</emphasis>
				       </entry>
                   </row>
                   <row>
                       <entry>flow</entry>
                       <entry>The containing Flow.</entry>
				       <entry>
				           <emphasis>1</emphasis>
				       </entry>
                   </row>
                   <row>
                       <entry>properties</entry>
                       <entry>Additional, custom properties about the state.</entry>
				       <entry>
				           <emphasis>0..*</emphasis>
				       </entry>
				       <entry>None</entry>
                   </row>
                   <row>
                       <entry>entryActions</entry>
                       <entry>The list of actions to execute each time this state is entered.</entry>
				       <entry>
				           <emphasis>0..*</emphasis>
				       </entry>
				       <entry>Empty</entry>
                   </row>
                   <row>
                       <entry>exceptionHandlers</entry>
                       <entry>An ordered set of handlers to be applied when an exception is thrown within this state.</entry>
				       <entry>
				           <emphasis>0..*</emphasis>
				       </entry>
				       <entry>Empty</entry>
                   </row>
               </tbody>
          </tgroup>
        </table>
    </sect1>
    <sect1 id="transitionable-state">
    	<title>Transitionable State</title>
    	<para>
    	    A central subclass of State is <literal>org.springframework.webflow.TransitionableState</literal>.
    	    This abstract class defines common properties applicable to all state types that execute
    	    transitions to other states.  These properties include:
    	</para>
    	<table>
            <title>TransitionableState properties</title>
            <tgroup cols="2">
                <colspec colname="c1" colwidth="2*" />
                <colspec colname="c2" colwidth="4*" />
                <thead>
                    <row>
                        <entry>Property name</entry>
                        <entry>Description</entry>
                        <entry>Cardinality</entry>
                        <entry>Default value</entry>
                    </row>
               </thead>
               <tbody>
                   <row>
                       <entry>transitions</entry>
                       <entry>The eligible paths out of this state.</entry>
				       <entry>
				           <emphasis>1..*</emphasis>
				       </entry>
                   </row>
                   <row>
                       <entry>exitActions</entry>
                       <entry>The list of actions to execute each time this state is exited.</entry>
				       <entry>
				           <emphasis>0..*</emphasis>
				       </entry>
				       <entry>Empty</entry>
                   </row>
               </tbody>
          </tgroup>
        </table>
        <para>
            Below is an exmple of how these common TransitionableState properties can be configured in XML form
            or directly in Java code.
        </para>
        <sect2 id="flow-xml">
        	<title>XML-based State template</title>
       	    <programlisting>
    &lt;flow start-state="stateId"/&gt;
        &lt;some-state id="stateId"&gt;
            &lt;property .../&gt;
            
            &lt;entry-actions&gt;
                ...
            &lt;/entry-actions&gt;

            &lt;transition .../&gt;
            
            &lt;exit-actions&gt;
    	        ...
            &lt;/exit-actions&gt;
        &lt;/some-state&gt;
    &lt;/flow&gt;
         	</programlisting>
        </sect2>
        <sect2 id="flow-java">
           <title>Java State API example</title>
           <programlisting>
    Flow flow = new Flow("id");
    TransitionableState state = new SomeConcreteStateType(flow, "stateId");
    state.setProperty(..., ...);
    state.addEntryAction(...);
    state.addTransition(...);
    state.addExitAction(...);
          </programlisting>
        </sect2>
    </sect1>
    <sect1 id="core-states">
    	<title>Concrete State Types</title>
    	<para>
    		Spring Web Flow has five (5) built-in concrete state types, all contained within the 
    		<literal>org.springframework.webflow</literal> package.  These states execute common 
    		controller behaviors including:
    		<orderedlist>
    			<listitem>allowing the user to participate in a flow (ViewState)</listitem>
    			<listitem>executing business application code (ActionState)</listitem>
    			<listitem>making a flow routing decision (DecisionState)</listitem>
    			<listitem>spawning another flow as a subflow (SubflowState)</listitem>
    			<listitem>terminating a flow (EndState)</listitem>
    		</orderedlist>
    	</para>
    	<para>
    		Each of these state types, with the exception of EndState, is transitionable.
    		This hierarchy is illustrated below:
    	</para>
		<mediaobject>
			<imageobject role="fo">
				<imagedata fileref="images/state-classdiagram.jpg" format="JPEG" align="center"/>
			</imageobject>
			<imageobject role="html">
				<imagedata fileref="images/state-classdiagram.jpg" format="JPEG" align="center"/>
			</imageobject>
			<caption>
				<para>State class diagram</para>
			</caption>
		</mediaobject>

    	<sect2 id="viewstate">
    		<title>ViewState</title>
    		<para>
    			When entered, a view state allows the user (or other external client) to participate
    			in a flow.  This participation process goes as follows:
    			<orderedlist>
    				<listitem>
    					The entered view state makes a <literal>org.springframework.webflow.ViewSelection</literal> 
    					that selects a <emphasis>logical</emphasis> response to issue with the data necessary 
    					to issue it.
    				</listitem>
    				<listitem>
    					The flow execution 'pauses' in this state, and control is returned to the calling 
    					system.
    				</listitem>
    				<listitem>
    				    The calling system uses the returned <literal>ViewSelection</literal> to present a
    				    interface (or other response) to the user.
    				</listitem>
    				<listitem>
    				    After some 'think time', the user submits an input event to resume the flow execution 
    				    from the 'paused' point.
    				</listitem>
    			</orderedlist>
    		</para>
    		<para>
    		    Spring Web Flow gives you full control over the view selection process and, on resume,
    		    how a view state responds to an user input event.  It's important to understand that Spring Web Flow does <emphasis>not</emphasis>
    		    care for response rendering--as a controller, a flow makes <emphasis>logical</emphasis> view selections when user input is required. 
    		    It is up to the calling system to issue a response suitable for the environment in which the flow is executing.
    		</para>
    	    <para>
    	    	The properties of a <literal>org.springframework.webflow.ViewState</literal> are summarized below:
    	    </para>
	    	<table>
    	        <title>ViewState properties</title>
        	    <tgroup cols="2">
            	    <colspec colname="c1" colwidth="2*" />
        			<colspec colname="c2" colwidth="4*" />
	                <thead>
       		            <row>
               		        <entry>Property name</entry>
               				<entry>Description</entry>
	                        <entry>Cardinality</entry>
       		                <entry>Default value</entry>
           				</row>
		  			</thead>
				  	<tbody>
            			<row>
              				<entry>viewSelector</entry>
							<entry>The strategy that makes the view selection when this state is entered.</entry>
						    <entry>
								<emphasis>0..1</emphasis>
					       </entry>
					       <entry>Null</entry>
        	           </row>
            	   </tbody>
	          </tgroup>
    	    </table>
    	    <para>
    	    	The properties of a <literal>org.springframework.webflow.ViewSelection</literal> are summarized below:
    	    </para>
	    	<table>
    	        <title>ViewSelection properties</title>
        	    <tgroup cols="2">
            	    <colspec colname="c1" colwidth="2*" />
        			<colspec colname="c2" colwidth="4*" />
	                <thead>
       		            <row>
               		        <entry>Property name</entry>
               				<entry>Description</entry>
	                        <entry>Cardinality</entry>
       		                <entry>Default value</entry>
           				</row>
		  			</thead>
				  	<tbody>
            			<row>
              				<entry>viewName</entry>
							<entry>The <emphasis>logical</emphasis> identifier for a response that should be issued.</entry>
						    <entry>
								<emphasis>1</emphasis>
							</entry>
 						</row>
            			<row>
              				<entry>modelMap</entry>
							<entry>The data that will be presented in the response.</entry>
						    <entry>
								<emphasis>0..*</emphasis>
							</entry>
							<entry>Empty</entry>
 						</row>
            			<row>
              				<entry>redirect</entry>
							<entry>Indicates if this ViewSelection should trigger a browser redirect.</entry>
						    <entry>
								<emphasis>1</emphasis>
							</entry>
							<entry>False</entry>
 						</row>
            	   </tbody>
	          </tgroup>
    	    </table>
    	    <sect3 id="viewSelector">
    			<title>ViewSelector</title>
	    		<para>
    				The strategy that is responsible for making a <literal>ViewSelection</literal> when an <literal>ViewState</literal> is entered
    				is <literal>org.springframework.webflow.ViewSelector</literal>.  This provides a plugin-point for customizing <emphasis>how</emphasis>
    				the <literal>viewName</literal> is calculated and how the <literal>modelMap</literal> is prepared.
    			</para>
    			<para>
    			    Two <literal>ViewSelector</literal> implementations are provided with Spring Web Flow:
    			</para>
	    		<table>
    	   			<title>ViewSelector implementations</title>
        		    <tgroup cols="2">
		           	    <colspec colname="c1" colwidth="2*" />
        				<colspec colname="c2" colwidth="4*" />
	        	        <thead>
       		    	        <row>
               			        <entry>Implementation</entry>
               					<entry>Description</entry>
               			    </row>
						</thead>
					  	<tbody>
            				<row>
              					<entry>SimpleViewSelector</entry>
								<entry>
									Returns a ViewSelection with a static viewName and modelMap containing the union of 
									the attributes in flow scope and request scope.
								</entry>
	        	   	        </row>
            				<row>
              					<entry>RedirectViewSelector</entry>
								<entry>
									Returns a ViewSelection that triggers a browser redirect.  The viewName is the relative URL to 
									redirect to.  Attributes added to the modelMap become URL query parameters.
									Mainly used by end states to <emphasis>redirect after flow</emphasis>.
								</entry>
	        	   	        </row>
	            		</tbody>
		       		</tgroup>
    		    </table> 	
    		</sect3>
    	    <sect3 id="viewStateXml">
    	    	<title>ViewState XML - simple view selection</title>
    	    	<para>
    	    	    The following example shows a <literal>view-state</literal> definition in XML that makes a simple view 
    	    	    selection when entered, selecting the <literal>searchForm</literal> view for display and, on resume, responding to 
    	    	    two possible user input events (submit and cancel) in different ways:
    	    	</para>
    	    	<programlisting>
    &lt;flow start-state="displaySearchForm"/&gt;
        &lt;view-state id="displaySearchForm" view="searchForm"&gt;
            &lt;transition on="submit" to="processFormSubmission"/&gt;
            &lt;transition on="cancel" to="processCancellation"/&gt;
        &lt;/view-state&gt;
        
        ...
    &lt;/flow&gt;
    			</programlisting>
			</sect3>    		
    	    <sect3 id="viewStateXml">
    	    	<title>ViewState API - simple view selection</title>
    	    	<para>
    	    	    The following example shows the equivalent view state definition using 
    	    	    the FlowBuilder API:
    	    	</para>
    	    	<programlisting>
    public class SearchFlowBuilder extends AbstractFlowBuilder {
    	public void buildStates() {
    	    addViewState("displaySearchForm", "searchForm",
    	        new Transition[] {
    	            transition(on("submit"), to("processFormSubmission"),
    	            transition(on("cancel"), to("processFormCancellation")
    	        }
    	    );
            ...    	          
        }
    }	
    			</programlisting>
			</sect3>    		
    	</sect2>
    	<sect2 id="actionstate">
    		<title>ActionState</title>
    		<para>
    			When entered, an action state executes business application code.
    		</para>
    	</sect2>
    	<sect2 id="decisionstate">
    		<title>DecisionState</title>
    		<para>
    			When entered, a decision state makes a flow routing decision.
    		</para>
    	</sect2>
    	<sect2 id="subflowstate">
    		<title>SubflowState</title>
    		<para>
    			When entered, a subflow state spawns another flow as a subflow.
    		</para>
    	</sect2>
    	<sect2 id="endstate">
    		<title>EndState</title>
    		<para>
    			When entered, an end state terminates a flow.
    		</para>
    	</sect2>
    </sect1>
</chapter>