<?xml version="1.0" encoding="UTF-8"?>
<chapter id="flow-definition">
	<title>Flow definition</title>
	<sect1 id="flow-intro">
		<title>Introduction</title>
		<para>
			Spring Web Flow allows developers to build reusable, self-contained controller modules
			called flows.  A flow is a blueprint for a user conversation (or dialog)
			that drives the execution of application code to complete a business goal.
		</para>
		<para>
			Flows are defined declaratively using a rich domain-specific language (DSL) 
			tailored to the problem domain of page flow.  Currently, Java-based and XML-based
			forms of this language are provided.
		</para>
		<para>
			This chapter documents Spring Web Flow's core flow definition language.  You'll
			learn the core domain constructs of the system and how those constructs are
			representable in an externalized XML form.
		</para>
    </sect1>
    <sect1 id="flow">
    	<title>Flow</title>
    	<para>
    		A flow is defined by a single instance of <literal>org.springframework.webflow.Flow</literal>.
    		This is the central domain artifact representing the definition of a conversation.
		</para>
		<para>
    		A flow consists of a set of one or more states, where each state defines a step in
    		the flow that, when entered, executes a behavior.  What behavior is executed is 
    		a function of the state's type and configuration.  The outcome of a state's
    		execution, called an event, is used by the flow to drive a state transition.
    	</para>
    	<para>
			Exactly one of a flow's states is the <literal>startState</literal> 
			that defines the starting point of the flow.  One or more end states
			define the ending points of a flow.
    	</para>
    	<para>
    		The properties of a <literal>org.springframework.webflow.Flow</literal> are summarized 
    		below:
    	</para>
        <table frame="all">
            <title>Flow properties</title>
            <tgroup cols="2">
                <colspec colname="c1" colwidth="2*" />
                <colspec colname="c2" colwidth="4*" />
                <thead>
                    <row>
                        <entry>Property name</entry>
                        <entry>Description</entry>
                        <entry>Cardinality</entry>
                        <entry>Default value</entry>
                    </row>
               </thead>
               <tbody>
                   <row>
                       <entry>id</entry>
                       <entry>The identifier of the flow, typically unique to all other flows of the application.</entry>
				       <entry>
				           <emphasis>1</emphasis>
				       </entry>
                   </row>               
                   <row>
                       <entry>states</entry>
                       <entry>The steps of the flow.</entry>
				       <entry>
				           <emphasis>1..*, at least one end state</emphasis>
				       </entry>
                   </row>
                   <row>
                       <entry>startState</entry>
                       <entry>The starting point of the flow.</entry>
				       <entry>
				           <emphasis>1</emphasis>
				       </entry>
                   </row>
                   <row>
                       <entry>startActions</entry>
                       <entry>The list of actions to execute each time an execution of this flow is started.</entry>
				       <entry>
				           <emphasis>0..*</emphasis>
				       </entry>
				       <entry>Empty</entry>
                   </row>
                   <row>
                       <entry>endActions</entry>
                       <entry>The list of actions to execute each time an execution of this flow ends.</entry>
				       <entry>
				           <emphasis>0..*</emphasis>
				       </entry>
				       <entry>Empty</entry>
                   </row>
                   <row>
                       <entry>exceptionHandlers</entry>
                       <entry>An ordered set of handlers to be applied when an exception is thrown within a state of this flow.</entry>
				       <entry>
				           <emphasis>0..*</emphasis>
				       </entry>
				       <entry>Empty</entry>
                   </row>
                   <row>
                       <entry>inlineFlows</entry>
                       <entry>A set of inner Flows that will be called as subflows; these Flows are locally scoped to the outer Flow.</entry>
				       <entry>
				           <emphasis>0..*</emphasis>
				       </entry>
				       <entry>Empty</entry>
                   </row>
               </tbody>
          </tgroup>
        </table>
        <para>
            Below is a high level example of how these Flow properties can be configured in XML form
            or directly in Java code.
        </para>
        <sect2 id="flow-xml">
        	<title>XML-based Flow template</title>
       	    <programlisting>
    &lt;flow start-state="startingPoint"/&gt;
        &lt;start-actions&gt;
            ...
        &lt;/start-actions&gt;
        
        &lt;-- your state definitions go here --&gt;
        
        &lt;end-actions&gt;
            ...
        &lt;/end-actions&gt;

        &lt;exception-handler .../&gt;

        &lt;inline-flow&gt;
            ...
        &lt;/inline-flow&gt;
    &lt;/flow&gt;
         	</programlisting>
        </sect2>
        <sect2 id="flow-java">
           <title>Java Flow API example</title>
           <programlisting>
    Flow flow = new Flow("id");
    flow.addState(...);
    flow.setStartState("startingPoint");
    flow.addStartAction(...);
    flow.addEndAction(...);
    flow.addExceptionHandler(...);
    flow.addInlineFlow(...);
          </programlisting>
        </sect2>
    </sect1>
    <sect1 id="state">
    	<title>State</title>
    	<para>
    	    A State defines the behavior for a step of the flow.
    	    The base class for all Flow state types is <literal>org.springframework.webflow.State</literal>.
    	    This abstract class defines common properties applicable to all state types, which include:
    	</para>
    	<table>
            <title>State properties</title>
            <tgroup cols="2">
                <colspec colname="c1" colwidth="2*" />
                <colspec colname="c2" colwidth="4*" />
                <thead>
                    <row>
                        <entry>Property name</entry>
                        <entry>Description</entry>
                        <entry>Cardinality</entry>
                        <entry>Default value</entry>
                    </row>
               </thead>
               <tbody>
                   <row>
                       <entry>id</entry>
                       <entry>The id of the state, unique to its containing Flow.</entry>
				       <entry>
				           <emphasis>1</emphasis>
				       </entry>
                   </row>
                   <row>
                       <entry>flow</entry>
                       <entry>The containing Flow.</entry>
				       <entry>
				           <emphasis>1</emphasis>
				       </entry>
                   </row>
                   <row>
                       <entry>entryActions</entry>
                       <entry>The list of actions to execute each time this state is entered.</entry>
				       <entry>
				           <emphasis>0..*</emphasis>
				       </entry>
				       <entry>Empty</entry>
                   </row>
                   <row>
                       <entry>exceptionHandlers</entry>
                       <entry>An ordered set of handlers to be applied when an exception is thrown within this state.</entry>
				       <entry>
				           <emphasis>0..*</emphasis>
				       </entry>
				       <entry>Empty</entry>
                   </row>
               </tbody>
          </tgroup>
        </table>
    </sect1>
    <sect1 id="transitionable-state">
    	<title>Transitionable State</title>
    	<para>
    	    A central subclass of State is <literal>org.springframework.webflow.TransitionableState</literal>.
    	    This abstract class defines common properties applicable to all state types that execute
    	    transitions to other states.  These properties include:
    	</para>
    	<table>
            <title>TransitionableState properties</title>
            <tgroup cols="2">
                <colspec colname="c1" colwidth="2*" />
                <colspec colname="c2" colwidth="4*" />
                <thead>
                    <row>
                        <entry>Property name</entry>
                        <entry>Description</entry>
                        <entry>Cardinality</entry>
                        <entry>Default value</entry>
                    </row>
               </thead>
               <tbody>
                   <row>
                       <entry>transitions</entry>
                       <entry>The eligible paths out of this state.</entry>
				       <entry>
				           <emphasis>1..*</emphasis>
				       </entry>
                   </row>
                   <row>
                       <entry>exitActions</entry>
                       <entry>The list of actions to execute each time this state is exited.</entry>
				       <entry>
				           <emphasis>0..*</emphasis>
				       </entry>
				       <entry>Empty</entry>
                   </row>
               </tbody>
          </tgroup>
        </table> 	
    </sect1>
    <sect1 id="core-states">
    	<title>Concrete State Types</title>
    	<para>
    		Spring Web Flow has five (5) built-in concrete state types, all contained within the 
    		<literal>org.springframework.webflow</literal> package.  These states execute common 
    		controller behaviors including:
    		<orderedlist>
    			<listitem>allowing the user to participate in a flow (ViewState)</listitem>
    			<listitem>executing business application code (ActionState)</listitem>
    			<listitem>making a flow routing decision (DecisionState)</listitem>
    			<listitem>spawning another flow as a subflow (SubflowState)</listitem>
    			<listitem>terminating a flow (EndState)</listitem>
    		</orderedlist>
    	</para>
    	<para>
    		Each of these state types, with the exception of EndState, is transitionable.
    		This hierarchy is illustrated below:
    	</para>
		<mediaobject>
			<imageobject role="fo">
				<imagedata fileref="images/state-classdiagram.jpg" format="JPEG" align="center"/>
			</imageobject>
			<imageobject role="html">
				<imagedata fileref="images/state-classdiagram.jpg" format="JPEG" align="center"/>
			</imageobject>
			<caption>
				<para>State class diagram</para>
			</caption>
		</mediaobject>

    	<sect2 id="viewstate">
    		<title>ViewState</title>
    		<para>
    			When entered, a view state allows the user (or other external client) to participate
    			in a flow.  This participation process goes as follows:
    			<orderedlist>
    				<listitem>
    					The entered view state makes a <literal>org.springframework.webflow.ViewSelection</literal>.
    				</listitem>
    				<listitem>
    					The flow execution 'pauses' in this state, and control is returned to the calling 
    					system.
    				</listitem>
    				<listitem>
    				    The calling system uses the returned <literal>ViewSelection</literal> to present some form of
    				    user interface that allows the user to submit back the input the
    				    flow needs to resume and continue on from the 'paused' point.
    				</listitem>
    			</orderedlist>
    		</para>
    	</sect2>
    	<sect2 id="actionstate">
    		<title>ActionState</title>
    		<para>
    			When entered, an action state executes business application code.
    		</para>
    	</sect2>
    	<sect2 id="decisionstate">
    		<title>DecisionState</title>
    		<para>
    			When entered, a decision state makes a flow routing decision.
    		</para>
    	</sect2>
    	<sect2 id="subflowstate">
    		<title>SubflowState</title>
    		<para>
    			When entered, a subflow state spawns another flow as a subflow.
    		</para>
    	</sect2>
    	<sect2 id="endstate">
    		<title>EndState</title>
    		<para>
    			When entered, an end state terminates a flow.
    		</para>
    	</sect2>
    </sect1>
</chapter>