<?xml version="1.0" encoding="UTF-8"?>
<chapter id="flow-execution">
	<title>Flow execution</title>
	<sect1 id="execution-intro">
		<title>Introduction</title>
		<para>
			Once a flow has been defined any number of executions of it can be launched in parallel 
			at runtime.  Execution of a flow is carried out by a dedicated system that 
			is based internally on a state machine that runs atop the Java VM.  As the the life of an
			flow execution can span more than one request into the server, this system 
			is also responsible for persisting conversational state across requests.
		</para>
		<para>
			This chapter documents Spring Web Flow's flow execution system.  You'll
			learn the core constructs of the system and how to execute flows within a variety 
			of environments, including JUnit, Spring MVC, Struts, and Java Server Faces (JSF).
		</para>
    </sect1>
    <sect1 id="execution">
    	<title>FlowExecution</title>
    	<para>
		    An executing flow, an instance of <literal>org.springframework.webflow.execution.FlowExecution</literal>,
		    represents the state of a conversation at a point in time.  Given a flow definition, 
		    an instance of <literal>org.springframework.webflow.Flow</literal>, a flow execution
		    can be created.
		</para>
		<para>
			Once created, a new flow execution is initially inactive, waiting to be started.  Once 
			started, a flow execution enters its <literal>startState</literal> and continues executing until 
			it enters a <literal>ViewState</literal> where user input is required to continue or
			it enters an <literal>EndState</literal> where it terminates.
		</para>
		<para>
			When a flow execution reaches a <literal>ViewState</literal> it is said to have <emphasis>paused</emphasis>,
			and it waits in that state for user input to be provided so it can continue.  After pausing the 
			<literal>ViewSelection</literal> returned by the flow execution is typically used to issue a
			response to the user that provides a vehicle for collecting the required input.
		</para>
		<para>			
			User input is provided by <emphasis>signaling an event</emphasis> that
			<emphasis>resumes</emphasis> the flow execution and communicates what user action was taken.
			Parameters sent in the signal event request form the basis for user input.  The flow execution 
			responds to an event in standard fashion by executing a matching state transition
			in the resuming <literal>ViewState</literal>.
		</para>
		<para>
			Once a flow execution has resumed after pausing by a view state, it continues executing 
			until it again enters another view state or enters an end state where it terminates.  Once 
			a flow execution has terminated it cannot be resumed.
		</para>
    </sect1>
    <sect1 id="execution-lifecycle">
    	<title>Flow execution lifecycle</title>
    	<para>
    		As outlined, a flow execution can go through a number of phases throughout its lifecycle; 
    		for example, <emphasis>created</emphasis>, <emphasis>active</emphasis>, <emphasis>paused</emphasis>, 
    		<emphasis>ended</emphasis>.
    	</para>
    	<para>
    		Spring Web Flow gives you full control over the ability to observe the lifecycle of an 
    		executing flow by implementing a <literal>org.springframework.webflow.execution.FlowExecutionListener</literal>.
    	</para>
    	<para>
    		The different phases of a flow execution is shown graphically below:
    	</para>
		<mediaobject>
			<imageobject role="fo">
				<imagedata fileref="images/flowexecution-statediagram.png" format="PNG" align="center"/>
			</imageobject>
			<imageobject role="html">
				<imagedata fileref="images/flowexecution-statediagram.png" format="PNG" align="center"/>
			</imageobject>
			<caption>
				<para>Flow execution lifecycle</para>
			</caption>
		</mediaobject>
	</sect1>
</chapter>