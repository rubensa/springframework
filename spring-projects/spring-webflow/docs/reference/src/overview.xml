<?xml version="1.0" encoding="UTF-8"?>
<preface id="preface">
	<title>Preface</title>
	<para>
		Many web applications consist of a mix of free browsing,
		where the user is allowed to navigate a web site as they please,
		and controlled navigations where the user is guided through
		a series of steps towards completion of a business goal.
	</para>
	<para>		
		Consider the typical shopping cart application.  While a user is
		shopping, she is freely browsing available products, adding her 
		favorites to her cart while skipping over others.  This is a good
		"free browsing" use case.  However, when the user decides to
		checkout, a controlled workflow begins--the checkout process.  
		Such a process represents a single user conversation that takes
		place over a series of steps, and navigation from step-to-step
		is controlled.  The entire process represents an discrete
		application transaction that must complete exactly once
		or not at all.
	</para>
	<para>
		Consider some other good examples of "controlled navigations": 
		applying for a loan, paying your taxes on-line,
		booking a trip reservation, registering an account, or
		updating a warehouse inventory.
	</para>
	<para>
		Traditional approaches to modeling and enforcing such controlled
		navigations or "flows" fall flat, and fail to express the Flow as a 
		first class concept.  Spring Web Flow (SWF) is a component of the
		Spring Framework's web stack focused on solving this problem 
		in a productive and powerful manner.
	</para>
</preface>

<chapter id="introduction">
	<title>Introduction</title>
	<sect1 id="introduction-overview">
		<title>Overview</title>
		<para>
			Spring Web Flow (SWF) is a component of the
			Spring Framework's web stack focused on the
			definition and execution of page flow within
			a web application.
		</para>
		<para>
			The system allows you to capture a logical flow
			of your web application as a self-contained module
			that can be reused in different situations.  Such 
			a flow guides a single user through the implementation
			of a business process, and represents a single user
			<emphasis>conversation</emphasis>.
			Flows often execute across HTTP requests,
			have state, exhibit transactional characteristics,
			and may	be dynamic and/or long-running in nature.
		</para>
		<para>
			Spring Web Flow exists at a higher level of abstraction, integrating
			as a self-contained <emphasis>page flow engine</emphasis> within
			base frameworks	such as Struts, Spring MVC, Portlet MVC, and JSF.
			SWF	provides you the capability to capture your
			application's page flow	explicity in a declarative, 
			highly-portable, and highly-manageable fashion.  SWF is 
			a powerful controller framework based on a finite-state machine,
			fully addressing the "C" in MVC.
		</para>
	</sect1>
	<sect1 id="introduction-packaging">
		<title>Packaging overview</title>
		<para>
			Spring Web Flow has been architected as a self-contained <emphasis>page flow engine</emphasis>
			with few required dependencies on third-party APIs.  All dependencies are 
			carefully managed.
		</para>
		<para>
			At a minimum, to use Spring Web Flow you need:
		</para>
		<itemizedlist spacing="compact">
        	<listitem>
         		<para>spring-webflow (the framework)</para>
	        </listitem>
        	<listitem>
         		<para>spring-core (miscellaneous utility classes used internally by the framework)</para>
	        </listitem>
        	<listitem>
         		<para>spring-binding (the Spring data binding framework, used internally)</para>
	        </listitem>
        	<listitem>
         		<para>commons-logging (a simple logging facade, used internally)</para>
	        </listitem>
		</itemizedlist>
		<para>
			Most users will embed SWF as a component within a larger web application development
			framework, as SWF is a focused <emphasis>controller technology</emphasis> that expects a
			calling system to care for request mapping and response rendering.  In this case, those users
			will depend on a thin integration piece for their environment.  For example, those executing
			flows within a Servlet might use the Spring MVC integration to care for dispatching
			requests to SWF and rendering responses for SWF view selections.
		</para>
		<para>			
			It is important to note that Spring Web Flow, like Spring, is a 
			<emphasis>layered</emphasis> framework, packaged in a manner that allows 
			teams to use the parts they need and nothing else.  For example, one team 
			might use Spring Web Flow in a Servlet environment with Spring MVC, and thus require
			the Spring MVC integration.  Another team might use SWF in a Portlet environment,
			and thus require the Portlet MVC integration.  Another team might mix and match.
			A major benefit of SWF is that it allows you to define reusable, self-contained controller 
			modules that can execute in <emphasis>any</emphasis> environment.
		</para>
	</sect1>
	<sect1 id="introduction-architecture">
		<title>High level architecture</title>
		<para>
			A high-level diagram of Spring Web Flow's layered architecture is shown below:
		</para>
		<mediaobject>
			<imageobject role="fo">
				<imagedata fileref="images/swf-highlevelarchitecture.png" format="PNG" align="center"/>
			</imageobject>
			<imageobject role="html">
				<imagedata fileref="images/swf-highlevelarchitecture.png" format="PNG" align="center"/>
			</imageobject>
			<caption>
				<para>Spring Web Flow</para>
			</caption>
		</mediaobject>		
	</sect1>
	<sect1 id="introduction-package-structure">
		<title>Package structure</title>
		<para>
			This section provides an overview of the logical package structure of the SWF codebase.
			The dependencies for each package are clearly noted.
		</para>
		<sect2 id="webflow">
			<title>org.springframework.webflow</title>
			<para>
				The <emphasis>webflow</emphasis> package contains the
				central foundational abstractions of the framework.  These abstractions
				consist of definition artifacts such as Flow, State,
				and Action that define the core "domain language" for
				expressing flows.
			</para>
			<itemizedlist spacing="compact">
   			    <listitem>
   		    	   	<para>Dependencies: spring-core, spring-binding, commons-logging</para>
				</listitem>
			</itemizedlist>
		</sect2>
		<sect2 id="webflow.action">
			<title>org.springframework.webflow.action</title>
			<para>
				The <emphasis>action</emphasis> package contains implementations
				of the core "Action" abstraction for executing arbitrary
				command logic within a Flow.
			</para>		
			<itemizedlist spacing="compact">
        		<listitem>
		          	<para>Dependencies: webflow, spring-beans (optional), spring-context (optional)</para>
          		</listitem>
			</itemizedlist>
		</sect2>
		<sect2 id="webflow.builder">
			<title>org.springframework.webflow.builder</title>
			<para>
				The <emphasis>builder</emphasis> package contains abstractions
				used at configuration-time for building and assembling Flows, in Java or
				from externalized resources such as XML files.
			</para>
			<itemizedlist spacing="compact">
    		    <listitem>
          			<para>Dependencies: webflow, webflow.support</para>
				</listitem>
			</itemizedlist>
		</sect2>
		<sect2 id="webflow.execution">
			<title>org.springframework.webflow.execution</title>
			<para>
				The <emphasis>execution</emphasis> package contains runtime 
				abstractions for executing Flows and managing flow executions.
				This is where the implementation of the Spring Web Flow's
				finite-state machine resides.  This is also where the repository
				subsystem resides, for storing active flow executions 
				beyond a single request into the server.  This subsystem
				forms the basis for Spring Web Flow's <emphasis>continuation server</emphasis>.
			</para>
			<itemizedlist spacing="compact">
        		<listitem>
		          	<para>Dependencies: webflow, webflow.util, commons-codec (optional)</para>
    	   		</listitem>
			</itemizedlist>
		</sect2>
		<sect2 id="webflow.manager">
			<title>org.springframework.webflow.executor</title>
			<para>
				The <emphasis>executor</emphasis> package is the highest-level package in the framework.  
				It contains implementations of "flow executors" that <emphasis>drive</emphasis>
				the execution of flows.  This is where the facade for external systems that 
				call into the Spring Web Flow system resides.  This is also where integration layers for
				Spring MVC (Servlet and Portlet), Struts, and Java Server Faces (JSF) reside.
			</para>		
			<itemizedlist spacing="compact">
        		<listitem>
		          	<para>
        		  	    Dependencies: webflow.execution, spring-webmvc (optional), spring-portlet (optional),
          	    Struts (optional), Java Server Faces (optional).
		          	</para>
        		</listitem>
			</itemizedlist>
		</sect2>
		<sect2 id="webflow.registry">
			<title>org.springframework.webflow.registry</title>
			<para>
				The <emphasis>registry</emphasis> package contains the subsystem for
				managing registries of flow definitions that are eligible for execution.
			</para>
			<itemizedlist spacing="compact">
		        <listitem>
        		  	<para>Dependencies: webflow, webflow.builder, webflow.execution, spring-beans (optional)</para>
	        	</listitem>
			</itemizedlist>
		</sect2>
		<sect2 id="webflow.support">
			<title>org.springframework.webflow.support</title>
			<para>
				The <emphasis>support</emphasis> package contains general-purpose 
				implementations of the core definitional artifacts.  These implementations are mainly
				used internally by the other packages of the framework but are
				also usable directly by developers.
			</para>
			<itemizedlist spacing="compact">
    	    	<listitem>
		          	<para>Dependencies: webflow</para>
	        	</listitem>
			</itemizedlist>
		</sect2>
		<sect2 id="webflow.test">
			<title>org.springframework.webflow.test</title>
			<para>
				The <emphasis>test</emphasis> package contains support for
				testing Flow Executions out-of-container, as well as unit testing artifacts such
				as Actions in isolation.
			</para>
			<itemizedlist spacing="compact">
         		<listitem>
		          	<para>Dependencies: webflow, webflow.execution, junit</para>
        		</listitem>
			</itemizedlist>
		</sect2>
		<para>
			A package dependency noted as (optional) means that the
			dependency is needed to compile the package but is optionally needed at runtime
			(depending on your use of the package).  For example, use of Spring Web Flow 
			in a Servlet environment entails use of the context.servlet package and requires the
			Servlet API to be in the classpath, but not the Portlet API.
		</para>
		<para>
			For the exact list of dependencies, as well as supported product usage configurations, 
			see the SWF ivy dependency manager descriptor located within the SWF distribution
			at <literal>spring-webflow/ivy.xml</literal>
		</para>
	</sect1>
	<sect1 id="introduction-support">
		<title>Support</title>
		<para>
			Spring Web Flow 1.0 is supported on Spring 1.2.6 or later.  The JSF integration requires
			Spring 1.2.7.  The Portlet integration requires Spring 2.0.
		</para>
		<para>
		    The community support forum is located at http://forum.springframework.org.
		</para>
	</sect1>
</chapter>