<?xml version="1.0" encoding="UTF-8"?>
<chapter id="phonebook">
	<title>Phonebook - a typical Spring Web Flow application</title>
	<sect1>
		<title>Introduction</title>
		<para>
			This chapter explains some of the basic concepts of Spring Web Flow
			to you, using the Phonebook sample application distributed with the
			Spring Web Flow release. The phonebook application incorporates
			one of the most often found flows in web applications; i.e. the
			<emphasis>search + master/detail flow</emphasis>. In the next couple of
			sections, we will explain how to build that flow using Spring Web Flow.
			Let's first discuss a good process for building flows into your
			web application:
		</para>
		<para>
			<orderedlist spacing="compact">
				<listitem>
					<para>The first step in the process of adding a flow to your
					application is to actually <emphasis>design</emphasis> the flow.
					Storyboarding the flow helps here with simple sketches (and/or)
					a state diagram</para>
				</listitem>
				<listitem>
					<para>The next step is to <emphasis>create the configuration for
					the Flow</emphasis>. The configuration should reflect the flow you've
					previously drawn on paper for example.</para>
				</listitem>
				<listitem>
					<para>After you've created the configuration for the flow, it's time
					to <emphasis>test the execution</emphasis> of the flow. This can be done using implementations
					of actions that haven't been fully completed yet.</para>
				</listitem>
				<listitem>
					<para>After you've ensured the flow executes correctly, you can
					implement the logic encapsulated in your flow by <emphasis>completing the
					action classes</emphasis> you've added to your flow configuration.
					In other words: the Action classes are <emphasis>the</emphasis> place
					where you can implement logic and somewhat resembles Spring MVC controllers
					(in fact, they can be Spring MVC controllers or action-like artifacts
					from any other MVC framework).</para>
				</listitem>
				<listitem>
					<para>The last thing you need to do before you can deploy your flow is
					to <emphasis>implement the views</emphasis> for your flow. The views
					are the individual pages presented to the user. So remember:
					the views are the places where users are allowed to interact with the flow.</para>
				</listitem>
				<listitem>
					<para>Deploy the flow for in-container testing. Of course there is
					nothing out-of-the-ordinary here, it's just deploying your WAR file for
					example to a servlet container or application server.</para>
				</listitem>
			</orderedlist>
		</para>
		<para>
			<emphasis>Note that of course, some of these steps can happen in parallel; coding
			of artifacts such as Action classes can perfectly be done right along with
			implementing your view resources (JSP, Velocity templates, et cetera).</emphasis>
		</para>
	</sect1>
	<sect1>
		<title>Designing the flow</title>
		<para>
			As we've said, we're going to implement a simple phonebook application that
			will allow a user to search for a specific person's information, view that
			information and edit it.
		</para>
		<sect2>
			<title>A small narrative</title>
			<para>
				Let's start with a small narrative that completely lays out our flow.
			</para>
			<para>
				<orderedlist spacing="compact">
					<listitem>
						<para>View a <emphasis>search page</emphasis> where the user
						can enter the criteria he or she wishes to use for locating
						people.</para>
					</listitem>
					<listitem>
						<para>From the <emphasis>search page</emphasis> a 
						<emphasis role="bold">submit</emphasis> button
						triggers the process of transferring the criteria to the server,
						<emphasis role="string">binding</emphasis> those criteria to a form backing object and
						<emphasis role="bold">validating</emphasis> the criteria.  For a validation
						<emphasis role="bold">error</emphasis> the user will be redirected
						back to the search page.
						If however validation succeeds, the actual search will be <emphasis role="bold">executed</emphasis>.
						After the search has completed the user will be able to
						<emphasis role="bold">view</emphasis> the list of people that have been
						found (on the <emphasis>results page</emphasis>).</para>
					</listitem>
					<listitem>
						<para>From the <emphasis>results page</emphasis> the user can <emphasis role="bold">select</emphasis>
						one of the people that have been found based on the search criteria and
						<emphasis role="bold">view</emphasis> their details on the <emphasis>details page</emphasis>. Details in this
						case are things like the person's name, contact information and people
						the person works with (colleagues).</para>
					</listitem>
					<listitem>
						<para>From the <emphasis>details page</emphasis> the user will be able to
						<emphasis role="bold">select</emphasis> a colleague and <emphasis role="bold">view</emphasis> their respective information on another
						<emphasis>details page</emphasis></para>
					</listitem>
				</orderedlist>
			</para>
			<para>
				<emphasis>Note: some of the text in the description above is printed in bold.
				These (usually) verbs translate directly to the events that will be signaled or
				the actions that will have to be executed in the flow. Later on, we'll explain
				in more details what these events and actions really mean.</emphasis>
			</para>
		</sect2>
		<sect2>
			<title>Graphical representation of our flow</title>
			<para>
				After we've written down our flow, we can also storyboard it a bit.
				The storyboard helps us identifying possible bottlenecks in the flow
				and see if it's complete.	
			</para>
			<para>
				<mediaobject>
					<imageobject role="fo">
						<imagedata fileref="images/phonebook-storyboard.jpg" format="JPEG" align="center"/>
					</imageobject>
					<imageobject role="html">
						<imagedata fileref="images/phonebook-storyboard.jpg" format="JPEG" align="center"/>
					</imageobject>
					<caption>
						<para>The storyboard-version of our flow</para>
					</caption>
				</mediaobject>
			</para>
			<para>
				Another way to put it, is a state diagram. The following diagram depicts our flow
				in somewhat more detail.
			</para>
			<para>
				<mediaobject>
					<imageobject role="fo">
						<imagedata fileref="images/phonebook-statediagram.jpg" format="JPG" align="center"/>
					</imageobject>
					<imageobject role="html">
						<imagedata fileref="images/phonebookstatediagram.jpg" format="JPG" align="center"/>
					</imageobject>
					<caption>
						<para>State diagram of the phonebook flow
						</para>
					</caption>
				</mediaobject>
			</para>
			<para>
				The state diagram above provides the most detailed glimpse into the design of the Flow: from it, you see all the states of the flow, what actions occur at what state, and the transitions between states.
			</para>
		</sect2>
		<sect2>
			<title>Web flow: a state machine</title>
			<para>
				You'll see shortly that a flow implementation maps very elegantly from such a diagram. Indeed, if you understand the picture above, you understand Spring Web Flow. Specifically:
			</para>
			<para>
				<itemizedlist spacing="compact">
					<listitem>
						<para>Flow definitions have one or more <emphasis>states</emphasis>, 
						one of which is marked the <emphasis>start-state</emphasis>.</para>
					</listitem>
					<listitem>
						<para>Each <emphasis>state</emphasis>, when entered, executes some kind of <emphasis>action</emphasis>.
						What action is executed varies based on the state's type and is executed 
						in polymorphic fashion. For example, a <emphasis>view state</emphasis> renders a view resource.
						An <emphasis>action state</emphasis> executes a controller Actions. <emphasis>sub-flow state</emphasis> spawn sub flows
						(so flows are reusable). <emphasis>End states</emphasis>
						terminate an active execution of a flow (later on called a <literal>FlowExecution</literal>).</para>
					</listitem>
					<listitem>
						<para>Each <emphasis>state</emphasis> has one or more <emphasis>transitions</emphasis>. A <emphasis>transition</emphasis> 
						is a path from one state to another. A transition executes on the signaling of an event.</para>
					</listitem>
				</itemizedlist>
			</para>
			<para>
				In general, when a user enters the flow (typically by clicking a link
				leading him to the flow or by opening op his or her browser with a particular
				URL) a new flow is started, specifically for this user. This is what we call
				the <literal>FlowExecution</literal>. The flow (obviously) starts in the start state. 
				There are two state types. The first (and this is what our flow starts with) is
				the <emphasis role="bold">view state</emphasis>. The view state allows users to interact
				with the flow. Typically a view state is a web page with for example a form.
				Nothing happens, until the user indicates he wants to move forward in the flow
				(by filling out a form and clicking the submit button for example).
				Clicking the submit button signals an event. The event (received by the server)
				will be translated to a transition of the flow to a different state
				(of course predefined in the flow). In other words, the <literal>FlowExecution</literal>
				(remember: this is the execution of the flow for this specific user) has
				gotten a new active state.
				The second state is an <emphasis role="bold">action state</emphasis>. Whereas
				view states allow for user interaction, action states don't. They execute
				actions on the server, for example the binding of the form data to a
				form backing object, or the execution of a search query.
			</para>
			<para>
				<emphasis>Remember: both action states and view states can signal events, 
				causing a transition to happen.</emphasis>
			</para>
			<para>
				When applying this to the phonebook application, we end up with the following:
				The user starts the flow with the <literal>View Search Criteria</literal> state.
				This will render the search page, with a form and a submit button. When the 
				user signals the <literal>submit</literal> event in the <literal>View Search Criteria</literal>
				state (by clicking the submit button), he will trigger a transition to the 
				<literal>Execute Query</literal> state (which, as we'll see actually 
				comprises a couple of different steps all with the different possible outcomes).
				The <literal>Execute Query</literal> state is an action state. When the
				<literal>Execute Query</literal> state completes successfully (binding and validation
				both complete without errors and the querying has been executed) another event
				is signaled, causing the <literal>FlowExecution</literal> to move to the next
				state, in this case the <literal>View Results</literal> state.
				This process of <emphasis>event -&gt; state transition -&gt; new state</emphasis>
				(either action or view) continues until an <emphasis>end state</emphasis>
				has been reached and the FlowExecution terminates.
			</para>
		</sect2>
	</sect1>
</chapter>