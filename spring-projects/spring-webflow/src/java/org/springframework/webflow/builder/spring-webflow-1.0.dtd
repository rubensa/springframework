<?xml version="1.0" encoding="UTF-8"?>

<!--
	Spring Web Flow 1.0 DTD
	Authors: Erwin Vervaet, Keith Donald
	
	This DTD defines the Spring Web Flow (SWF) XML syntax.
	
	The root "flow" element of this document defines exactly one Flow definition.
    A Flow definition is a blueprint for an executable, single-user process
	(or conversation).
	
	A flow is composed of one or more states (or steps). Each state executes 
	behavior when entered. What behavior is executed is a function of the
	state's type. Core state types include view states, action states,
	subflow states, decision states, and end states.
    
    Each flow definition must specify exactly one start state and at least one end state.
    Events that occur in transitionable states drive state transitions.
    
	XML documents that conform to this DTD should declare the following doctype:

	<!DOCTYPE flow PUBLIC "-//SPRING//DTD WEBFLOW 1.0//EN"
		"http://www.springframework.org/dtd/spring-webflow-1.0.dtd">
-->

<!--
	Defines exactly one flow definition. A flow is composed of one or more states. A flow may be
    annotated with properties and may be configured to handle state exceptions. A flow may import
    one or more bean definition resources defining custom flow artifacts (such as actions, 
	exception handlers, view selectors, transition criteria, etc). A flow may nest one or more other 
	flows in-line to use as subflows, referred to as 'inline flows'.
-->
<!ELEMENT flow ( property*, start-actions*, var*, ( action-state | view-state | decision-state | subflow-state | end-state )+, end-actions*, exception-handler*, import*, inline-flow* )>

<!--
	The the start state of this flow; the start state is the point where flow execution will begin.
-->
<!ATTLIST flow start-state IDREF #REQUIRED>

<!--
	Defines flow startup logic to be executed. This logic will always execute when this flow is started.
-->
<!ELEMENT start-actions ( action+ )>

<!--
	A flow variable definition.  Flow variables are automatically created in "flow scope" 
	when an execution of this flow starts.
-->
<!ELEMENT var EMPTY>

<!--
	This variable's name.
-->
<!ATTLIST var name CDATA #REQUIRED>

<!--
	This variable's type.  The type may be an alias (e.g 'int') or a fully-qualified class (e.g. 'java.lang.Integer').
-->
<!ATTLIST var type CDATA #IMPLIED>

<!--
	The value of the property; a short-cut alternative to an explicit child 'value' element.
-->
<!ATTLIST property value CDATA #IMPLIED>

<!--
	A property associated with an another element (flow, action, state, transition, etc).
	Properties are simple strings or typed attributes that allow you to annotate an element.
	For example:
	- an element's 'caption' property might serve a GUI tooltip or logging statement
	- an Action's 'validatorMethod' property might specify a target method to invoke on a validator
	- a Flow's 'transactional' property might indicate the flow should exhibit transactionl characteristics
-->
<!ELEMENT property ( value? )>

<!--
	The name of the property.
-->
<!ATTLIST property name CDATA #REQUIRED>

<!--
	The target type of the property value; to facilitate from-string type conversion. This type
	string may be an alias (e.g 'int') or a fully-qualified class (e.g. 'java.lang.Integer').
-->
<!ATTLIST property type CDATA #IMPLIED>

<!--
	The value of the property; a short-cut alternative to an explicit child 'value' element.
-->
<!ATTLIST property value CDATA #IMPLIED>

<!--
	The value of the property.
-->
<!ELEMENT value ( #PCDATA )>

<!--
	Defines an action state, a state where one or more Actions (command objects) are executed.
	An action state is a transitionable state. An action state transition is triggered by an
	action result event.
-->
<!ELEMENT action-state ( property*, entry-actions?, action+, transition+, exit-actions?, exception-handler* )>

<!--
	The unique identifier of this action state; must be unique to this flow.
-->
<!ATTLIST action-state id ID #REQUIRED>

<!--
	Defines a single action to be executed. An action is a command that executes
	arbitrary behavior. An action may be annotated with properties. These properties can be
	used to effect the action's execution.
-->
<!ELEMENT action ( property* )>

<!--
	The logical identifier of the action implementation to execute, typically an the id of a bean
	in the Spring bean factory. This is similar to the <ref bean="myBean"/>
	notation of the Spring beans DTD.
-->
<!ATTLIST action bean CDATA #IMPLIED>

<!--
	An optional name qualifier for this action. When specified this action will
	qualify execution result event ids by this name. For example, if this action is
	named "processOrder" and signals a "success" result event after execution, the
	fully qualified result event the flow can respond to would be "processOrder.success".
	
	An action with a name is often referred to as a "named action".
-->
<!ATTLIST action name CDATA #IMPLIED>

<!--
	The name of the target method to invoke to execute this action, allowing for
	action method binding.
	
	If this action extends MultiAction, the method's signature must
	be of the form: 'public Event <method>(RequestContext) throws Exception'.

    For example:
        method="setupForm"
        	
	If this action is an abritrary bean (POJO), the method's signature can 
	match any public method on the bean's implementation. In this case the
	method format is as follows: <method>(${arg 1}, ..., ${arg n}) where any 
	${argument expression}s are evaluated against this flow's RequestContext.

	For example:
        method="processOrder(${flowScope.order})"	
-->
<!ATTLIST action method CDATA #IMPLIED>

<!--
	The name of the attribute that will expose the return value of the target action method.
	Used in conjunction with the 'method' and 'resultScope' attributes.
	Only applicable when this action invokes an arbitrary bean (POJO).

	For example:
        method="processOrder(${flowScope.order})" resultName="orderConfirmation"
        
    ... exposes the 'processOrder(Order)' method return value in request scope 
    under the attribute name 'orderConfirmation'.
-->
<!ATTLIST action resultName CDATA #IMPLIED>

<!--
	The scope of the attribute that will expose the return value of the target action method.
	Used in conjunction with the 'resultName' attribute.  Defaults to value 'request' if
	not specified, which states that the action method return value should be
	placed in request scope.

	For example:
        method="suggestItineraries(${flowScope.trip})" resultName="itineraries" resultScope="flow"

    ... exposes the 'suggestItineraries(Order)' method return value in flow scope 
    under the attribute name 'itineraries'.        
-->
<!ATTLIST action resultScope (request | flow) CDATA #IMPLIED>

<!--
	Defines a transition from one state to another.
	
	A transitions defines a supported path through the flow.
	A transitions may be annotated with properties and may specify one or more
	actions to execute before executing.
-->
<!ELEMENT transition ( property*, action* )>

<!--
	The criteria that guards this transition's execution, typically reasoning on the
	last event that occured in an execution of this flow to determine if this transition 
	should execute.
	
	The most basic value is a static event id. For example:
  	    on="success"
	
	Sophisticated transitional expressions are also supported. For example:
	    on="${#result == 'submit' && flowScope.attribute == 'foo'}"
	
	The exact interpretation of the attribute value depends on the TextToTransitionCriteria
	converter that is installed.
-->
<!ATTLIST transition on CDATA #REQUIRED>

<!--
	The target state of this transition.
-->
<!ATTLIST transition to IDREF #REQUIRED>

<!--
	Defines a view state, a state where a view will be selected for rendering and control will be 
	returned to the user.

	A view state is a transitionable state. A view state transition is triggered by a
	user input event.
-->
<!ELEMENT view-state ( property*, entry-actions?, transition+, exit-actions?, exception-handler* )>

<!--
	The unique identifier of this view state; must be unique to this flow.
-->
<!ATTLIST view-state id ID #REQUIRED>

<!--
	The name of the view to render when this view state is entered.
	
	This value may be a static view name or even a direct pointer to a view template. For example:
	    "priceForm", or "/WEB-INF/jsp/priceForm.jsp"
	
	This value may also be qualified with a prefix to denote a specific (possibly custom)
	ViewSelector strategy. Specifically:
	
	Use of the "redirect:" prefix triggers creation of a RedirectViewSelector which will request
	a redirect to a specific URL. For example:
	    "redirect:/home.html"
	
	Redirect query parameters may also be specified using ${expressions} that evaluate against
	the request context. For example:
	    "redirect:/thankyou.htm?confirmationNumber=${flowScope.order.confirmation.id}"
	
	The exact semantics regarding the interpretation of this value are determined by the
	installed TextToViewSelector converter.

	Note when no view name is provided, this view state will act as a marker state. A marker
	view state does not request the rendering of a view, it only pauses the flow and returns control 
	the client. Use a marker view state when another state is expected to generate the response.
-->
<!ATTLIST view-state view CDATA #IMPLIED>

<!--
	Defines state entry logic to be executed. This logic will always execute when the state is entered.
-->
<!ELEMENT entry-actions ( action+ )>

<!--
	Defines state exit logic to be executed. This logic will always execute when the state is exited 
	regardless of what transition is executed.
-->
<!ELEMENT exit-actions ( action+ )>

<!--
	Defines a decision state, a state that evaluates one or more expressions to	decide which
	state to go to next.  Intended to be used purely as a 'navigation' or 'routing' state.
	
	A decision state is a transitionable state. A decision state transition is triggered by an
	boolean expression evaluating true against the flow execution request context.
-->
<!ELEMENT decision-state ( property*, entry-actions?, if+, exit-actions?, exception-handler* )>

<!--
	The unique identifier of this decision state; must be unique to this flow.
-->
<!ATTLIST decision-state id ID #REQUIRED>

<!--
	A transition specification that defines a criteria expression and a state to
	transition to if that expression is true. Optionally, this element may also define
	an 'else' attribute to note the state to transition to if the expression is false.
	The form is:
	    <if test="${criteria}" then="<trueStateId>" else="<falseStateId>"/>
-->
<!ELEMENT if EMPTY>

<!--
	The transition criteria expression to be tested. This should be an ${expression} that
	evaluates against this flow's request context. For example:
	    <if test="${flowScope.sale.shipping} then="enterShippingDetails"/>
	    <if test="${lastEvent.id == 'search'} then="bindSearchParameters"/>
-->
<!ATTLIST if test CDATA #REQUIRED>

<!--
	The state to transition to if the criteria expression is true.
-->
<!ATTLIST if then IDREF #REQUIRED>

<!--
	The state to transition to if the criteria expression is false (optional).
-->
<!ATTLIST if else IDREF #IMPLIED>

<!--
	Defines a subflow state, a state that spawns a subflow when entered.

	A subflow state is a transitionable state. A subflow state transition is triggered by a 
	subflow result event, typically by reasoning on the id of the subflow end state that was reached.
	
	While the subflow is active, this flow is suspended waiting for the subflow to complete execution.
	When the subflow completes execution by reaching an end state, this state is expected 
	to respond to the result of that execution. The result of subflow execution, the end state 
	that was reached, should be used as grounds for a transition out of this state.
-->
<!ELEMENT subflow-state ( property*, entry-actions?, attribute-mapper?, transition+, exit-actions?, exception-handler* )>

<!--
	The unique identifier of this subflow state; must be unique to this flow.
-->
<!ATTLIST subflow-state id ID #REQUIRED>

<!--
	The id of the flow to be spawned as a subflow when this subflow state is entered.
-->
<!ATTLIST subflow-state flow CDATA #REQUIRED>

<!--
	An optional mapper that will map attributes from the parent flow to/from the spawned subflow. 
-->
<!ELEMENT attribute-mapper ( input*, output* )>

<!--
	The identifier of a custom flow attribute mapper implementation exported in the
	Spring bean factory. This is similar to the <ref bean="myBean"/> notation of the Spring beans DTD.
	
	Use this as an alternative to the convenient "input" and "output" element attributes 
	when you need full control of attribute mapping behavior for this subflow state.
-->
<!ATTLIST attribute-mapper bean CDATA #IMPLIED>

<!--
	A single input mapping that maps an attribute from this flow to the subflow.
-->
<!ELEMENT input EMPTY>

<!--
	The name of an attribute in this flow to map as input into the spawning the subflow.

	If the 'as' attribute is not specified, the mapped attribute will be assigned 
	the same name in the subflow.

	If the 'as' attribute is specified, the mapped attribute will be assigned that name 
	in the subflow.
	
	Use this or the value attribute, not both.
-->
<!ATTLIST input name CDATA #IMPLIED>

<!--
	A value expression evaluated against this flow's request context.
	The evaluated expression value is what is mapped as an input attribute into the spawning subflow.
	
	Note: you must specify the 'as' attribute to assign the expression value an attribute name 
	in the subflow.
	
	Use this or the name attribute, not both.
-->
<!ATTLIST input value CDATA #IMPLIED>

<!--
	The name of the target attribute in the subflow. This is optional when used in
	conjunction with the 'name' attribute; by default, the same attribute name will be
	used between this flow and the subflow.
	
	Note: this is required when used in conjunction with the 'value' attribute: you must
	assign a name to the value returned by the expression for storage in the subflow.
-->
<!ATTLIST input as CDATA #IMPLIED>

<!--
	The type of the source attribute value in this flow; used with the "to" attribute to perform
	a value type conversion during attribute mapping.
-->
<!ATTLIST input from CDATA #IMPLIED>

<!--
	The target type of the subflow attribute value; used with the "from" attribute to perform
	a value type conversion during attribute mapping.
-->
<!ATTLIST input to CDATA #IMPLIED>

<!--
	A single output mapping that maps data from the subflow to this flow when the subflow ends and 
	this flow resumes.
-->
<!ELEMENT output EMPTY>

<!--
	The name of an attribute in the ending subflow to map up into this resuming flow.
	
	If the 'as' attribute is not specified, the mapped attribute will be assigned
	the same name in this flow.
	
	If the 'as' attribute is specified, the mapped attribute will be assigned that name
	in this flow.
	
	Use this or the value attribute, not both.
-->
<!ATTLIST output name CDATA #IMPLIED>

<!--
	A value expression evaluated against the subflow's request context.
	The evaluated expression value is what is mapped as output up to this resuming flow.
	
	Note: you must specify the 'as' attribute to assign the expression value an attribute name 
	in this flow.
	
	Use this or the name attribute, not both.
-->
<!ATTLIST output value CDATA #IMPLIED>

<!--
	The name of the target attribute in this flow. This is optional when used in
	conjunction with the 'name' attribute; by default, the same name will be used between
	the subflow and this flow.

	Note: this is required when used in conjunction with the 'value' attribute: you must
	assign a name to the value returned by the expression for storage in this flow.
-->
<!ATTLIST output as CDATA #IMPLIED>

<!--
	The type of the attribute to map from the subflow; used with the "to" attribute to perform
	a value type conversion during attribute mapping.
-->
<!ATTLIST output from CDATA #IMPLIED>

<!--
	The type of the target attribute to set in this flow; used with the "from" attribute to perform
	a value type conversion during attribute mapping.
-->
<!ATTLIST output to CDATA #IMPLIED>

<!--
	Defines an end state, a state that terminates this flow when entered.
	
	A end state is not transitionable, there are no transitions out of an end state.
	When an end-state is entered, a instance of this flow is terminated.
	
	When an end state is entered, if the executing	flow is a "root flow" the entire execution
	(conversation) is terminated. If the executing flow is a "subflow" the subflow session ends
	and the parent session resumes. To resume, the parent session responds to the result of
	the subflow, typically by reasoning on the id of the end state that was reached.
-->
<!ELEMENT end-state ( property*, entry-actions?, exception-handler* )>

<!--
	The unique identifier of this end state; must be unique to this flow.
-->
<!ATTLIST end-state id ID #REQUIRED>

<!--
	The name of the view to to render when this end state is entered.
	
	This value may be a static view name or even a direct pointer to a view template. For example:
	    "priceForm", or "/WEB-INF/jsp/priceForm.jsp"
	
	This value may also be qualified with a prefix to denote a specific (possibly custom)
	ViewSelector strategy. Specifically:
	
	Use of the "redirect:" prefix triggers creation of a RedirectViewSelector which will request
	a redirect to a specific URL. For example:
	    "redirect:/home.html"
	
	Redirect query parameters may also be specified using ${expressions} that evaluate against
	the request context. For example:
	    "redirect:/thankyou.htm?confirmationNumber=${flowScope.order.confirmation.id}"
	
	The exact semantics regarding the interpretation of this value are determined by the
	installed TextToViewSelector converter.

	Note when no view name is provided, this end state will act as a marker state. A marker
	end state does not request the rendering of a view, it only terminates the flow and returns control 
	the client. Use a marker end state when another state is expected to generate the response.
-->
<!ATTLIST end-state view CDATA #IMPLIED>

<!--
	Defines flow ending logic to be executed. This logic will always execute when this flow is ended.
-->
<!ELEMENT end-actions ( action+ )>

<!--
	Defines a state exception handler to handle one or more exceptions that may occur during the
	execution of this flow definition. Exception handlers may be attached at the state or flow level.
-->
<!ELEMENT exception-handler EMPTY>

<!--
	The class of exception that may occur that you wish to handle.
-->
<!ATTLIST exception-handler on CDATA #IMPLIED>

<!--
	The id of the state to transition to when this class of exception does occur.
-->
<!ATTLIST exception-handler to IDREF #IMPLIED>

<!--
	The id of a custom exception handler implementation to attach.
-->
<!ATTLIST exception-handler bean CDATA #IMPLIED>

<!--
    Requests the import of all custom flow artifacts contained within a single bean
    definition resource location.
-->
<!ELEMENT import EMPTY>

<!--
	The relative resource path to the bean definition resource to import.
	This path is relative to this document.
-->
<!ATTLIST import resource CDATA #REQUIRED>

<!--
	Defines exactly one inline flow definition and assign an id to it.
-->
<!ELEMENT inline-flow ( flow+ )>

<!--
	The assigned identifier of this in-line flow. Must be unique to all other inline flows.
-->
<!ATTLIST inline-flow id ID #REQUIRED>