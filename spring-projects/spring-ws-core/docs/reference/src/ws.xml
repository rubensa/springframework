<?xml version="1.0" encoding="UTF-8"?>
<chapter id="ws">
    <title>Document-driven Web services with Spring-WS</title>
    <section id="ws-introduction">
        <title>Introduction</title>
        <para>
            Spring's Web service framework is...
        </para>
    </section>
    <section id="ws-message-dispatcher">
        <title>MessageDispatcher</title>
        <para>...</para>
    </section>
    <section id="ws-endpoint">
        <title>Endpoints</title>
        <para>...</para>
        <section id="ws-endpoint-mapping">
            <title>EndpointMappings</title>
            <section id="ws-endpoint-mapping-soap-action">
                <title>SoapActionEndpointMapping</title>
                <para>...</para>
            </section>
            <section id="ws-endpoint-mapping-payload-root-qname">
                <title>PayloadRootQNameEndpointMapping</title>
                <para>...</para>
            </section>
            <section id="ws-endpoint-mapping-interceptor">
                <title>Adding EndpointInterceptors</title>
                <para>...</para>
            </section>
            <section id="ws-endpoint-mapping-exception">
                <title>Handling Exceptions</title>
                <para>Spring-WS provides an <interfacename>EndpointExceptionResolver</interfacename>
                interface to ease the pain of unexpected exceptions occurring while your message is
                being processed by an endpoint which matched the request.
                An <interfacename>EndpointExceptionResolver</interfacename> somewhat resembles the
                exception mappings that can be defined in a Servlet's <filename>'web.xml'</filename>
                web application descriptor. Rather than expose the innards of your application by giving
                a client a full stack trace, you can handle the exception any way you want. Foe example
                you could return a SOAP fault with a specific fault code and detail message. Furthermore,
                a programmatic way of handling exceptions gives you many more options for how to respond
                appropriately.</para>
                <para>Spring-WS ships with a handy implementation of the
                <interfacename>EndpointExceptionResolver</interfacename> interface, namely the
                <classname>SoapFaultMappingExceptionResolver</classname> class. This resolver enables you to
                take the class name of any exception that might be thrown and map it to a SOAP
                <literal>Fault</literal>, like so:</para>
                <programlisting><![CDATA[
<bean id="exceptionResolver"
    class="org.springframework.ws.soap.endpoint.SoapFaultMappingExceptionResolver">
    <property name="defaultFault" value="RECEIVER,Server error"/>
    <property name="exceptionMappings">
        <value>
            org.springframework.oxm.ValidationFailureException=SENDER,Invalid request
        </value>
    </property>
</bean>]]></programlisting>
                <para>This configuration will map exceptions of the type
                <exceptionname>ValidationFailureException</exceptionname> to a
                sender side SOAP Fault with a fault string <literal>"Invalid request"</literal>.
                If any other exception occurs, it will return the default fault: a server side
                fault with a fault string value of <literal>'Server error'</literal>.
                Refer to the Javadoc for the <classname>SoapFaultDefinitionEditor</classname>
                class to read more about the exact notation of the faults.</para>
            </section>
        </section>
    </section>

    <section id="ws-spring-mvc">
        <title>Similarities between Spring-MVC and Spring-WS</title>
        <para>Spring-WS has the same basic architecture as Spring's Web MVC framework.
        The following table shows some of the core concepts of Spring Web MVC, and the
        corresponding class in Spring-WS.
            <informaltable id="ws-spring-mvc-comparison">
                <tgroup cols="2">
                    <thead>
                        <row>
                            <entry>Spring Web MVC</entry>
                            <entry>Spring Web Services</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <classname>DispatcherServlet</classname>
                            </entry>
                            <entry>
                                <classname>MessageDispatcher</classname>
                            </entry>
                        </row>
                        <row>
                            <entry>handler</entry>
                            <entry>endpoint</entry>
                        </row>
                        <row>
                            <entry>
                                <classname>HandlerAdapter</classname>
                            </entry>
                            <entry>
                                <classname>EndpointAdapter</classname>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <interfacename>HandlerMapping</interfacename>
                            </entry>
                            <entry>
                                <interfacename>EndpointMapping</interfacename>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <interfacename>HandlerInterceptor</interfacename>
                            </entry>
                            <entry>
                                <interfacename>EndpointInterceptor</interfacename>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <interfacename>HandlerExceptionResolver</interfacename>
                            </entry>
                            <entry>
                                <interfacename>EndpointExceptionResolver</interfacename>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
        </para>
    </section>
</chapter>
