<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN"
        "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>
    <bean id="messageDispatcher" class="org.springframework.ws.soap.SoapMessageDispatcher">
        <description>
            The MessageDispatcher is responsible for routing messages to endpoints.
        </description>
        <property name="endpointMappings">
            <list>
                <ref local="payloadMapping"/>
                <ref local="soapActionMapping"/>
            </list>
        </property>
        <property name="endpointExceptionResolvers">
            <list>
                <ref local="endpointExceptionResolver"/>
            </list>
        </property>
    </bean>

    <bean id="payloadMapping" class="org.springframework.ws.soap.endpoint.PayloadRootQNameEndpointMapping">
        <description>
            This endpoint mapping uses the qualified name of the payload (body contents) to determine the endpoint for
            an incoming message. The name GetFlightsRequest with namespace
            http://www.springframework.org/spring-ws/samples/airline is mapped to the getFlightsEndpoint. Additionally,
            messages are logged using the logging interceptor.
        </description>
        <property name="mappings">
            <props>
                <prop key="{http://www.springframework.org/spring-ws/samples/airline}GetFlightsRequest">
                    getFlightsEndpoint
                </prop>
            </props>
        </property>
        <property name="interceptors">
            <ref local="loggingInterceptor"/>
        </property>
    </bean>

    <bean id="soapActionMapping" class="org.springframework.ws.soap.SoapActionEndpointMapping">
        <description>
            This endpoint mapping uses SOAP Actions to determine the endpoint for an incoming message. The key
            http://www.springframework.org/spring-ws/samples/airline/BookFlight is mapped to the bookFlightEndpoint.
            Additionally, message are logged and validated.
        </description>
        <property name="mappings">
            <props>
                <prop key="http://www.springframework.org/spring-ws/samples/airline/BookFlight">
                    bookFlightEndpoint
                </prop>
            </props>
        </property>
        <property name="interceptors">
            <list>
                <ref local="loggingInterceptor"/>
                <ref local="validatingInterceptor"/>
            </list>
        </property>
    </bean>

    <bean id="validatingInterceptor" class="org.springframework.ws.endpoint.PayloadValidatingInterceptor">
        <description>
            This interceptor validates both incoming and outgoing message contents according to the 'airline.xsd' XML
            Schema file.
        </description>
        <property name="schema" value="airline.xsd"/>
        <property name="validateRequest" value="true"/>
        <property name="validateResponse" value="true"/>
    </bean>

    <bean id="loggingInterceptor" class="org.springframework.ws.endpoint.PayloadLoggingInterceptor">
        <description>
            This interceptor logs the message payload.
        </description>
    </bean>

    <bean id="bookFlightEndpoint" class="org.springframework.ws.samples.airline.ws.BookFlightEndpoint">
        <description>
            This endpoint handles book flight request.
        </description>
        <property name="airlineService" ref="airlineService"/>
    </bean>

    <bean id="getFlightsEndpoint" class="org.springframework.ws.samples.airline.ws.GetFlightsEndpoint">
        <description>
            This endpoint handles get flights request.
        </description>
        <property name="airlineService" ref="airlineService"/>
        <property name="marshaller" ref="jaxbMarshaller"/>
        <property name="unmarshaller" ref="jaxbMarshaller"/>
    </bean>

    <bean id="jaxbMarshaller" class="org.springframework.oxm.jaxb.JaxbMarshaller">
        <description>
            The validating JAXB Marshaller is used by the getFlightsEndpoint to unmarshal XML to objects and
            vice-versa.
        </description>
        <property name="contextPath" value="org.springframework.ws.samples.airline.schema"/>
        <property name="validating" value="true"/>
    </bean>

    <bean id="endpointExceptionResolver"
          class="org.springframework.ws.soap.endpoint.SoapFaultMappingExceptionResolver">
        <description>
            This exception resolver maps exceptions to SOAP Faults. Both UnmarshallingException and
            ValidationFailureException are mapped to a SOAP Fault with a "Sender" fault code. All other exceptions are
            mapped to a "Receiver" error code, the default.
        </description>
        <property name="defaultFault">
            <value>RECEIVER,Server error</value>
        </property>
        <property name="exceptionMappings">
            <props>
                <prop key="org.springframework.oxm.UnmarshallingException">SENDER,Invalid request</prop>
                <prop key="org.springframework.oxm.ValidationFailureException">SENDER,Invalid request</prop>
            </props>
        </property>
    </bean>

</beans>