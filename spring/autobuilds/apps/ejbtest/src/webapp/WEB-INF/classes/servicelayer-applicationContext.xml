<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<!--
  - Service layer ApplicationContext definition for ejbtest project. Defines beans belonging
  - to service layer. This context will normally be shared by all EJBs, and will be made the
  - parent of the web-app's ApplicationContext, in a demand-load fashion.
 -->
	
<beans>

	<!-- ========================= GENERAL DEFINITIONS ========================= -->

	<!-- Configurer that replaces ${...} placeholders with values from a properties file -->
	<!-- (in this case, JDBC-related settings for the dataSource definition below) -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location"><value>/WEB-INF/jdbc.properties</value></property>
	</bean>

	<!-- ========================= RESOURCE DEFINITIONS ========================= -->
  
	<!-- JNDI DataSource for J2EE environments -->
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName"><value>java:ejbtestDS</value></property>
	</bean>

	<!-- Hibernate SessionFactory -->
	<bean id="hibSessionFactory" class="org.springframework.orm.hibernate.LocalSessionFactoryBean">
		<property name="dataSource"><ref local="dataSource"/></property>
		<property name="mappingResources">
      <list>
  			<value>ejbtest.hbm.xml</value>
        <value>org/springframework/autobuilds/ejbtest/domain/User1.hbm.xml</value>
		  </list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.transaction.manager_lookup_class">net.sf.hibernate.transaction.JBossTransactionManagerLookup</prop>
        <prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	</bean>

  <!-- define a HibernateInterceptor instance -->
  <bean id="hibInterceptor"
        class="org.springframework.orm.hibernate.HibernateInterceptor">
    <property name="sessionFactory"><ref local="hibSessionFactory"/></property>
  </bean>

	<!-- Transaction manager that delegates to JTA (for a transactional JNDI DataSource) -->
	<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager"/>
  
  <!-- ========================= PERSISTENCE DEFINITIONS ========================= -->
  
  <bean id="root-mapper" class="org.springframework.autobuilds.ejbtest.dbutil.mapper.hibernate.MapperImpl">
    <property name="sessionFactory"><ref bean="hibSessionFactory"/></property>
  </bean>
  
  <bean id="mapperFactory" class="org.springframework.autobuilds.ejbtest.dbutil.mapper.hibernate.MapperFactoryImpl">
    <property name="sessionFactory"><ref bean="hibSessionFactory"/></property>
    <property name="rootMapper"><ref bean="root-mapper"/></property>
    <property name="mappers">
      <list>
      	<!--list>
      	  <ref bean="userMapper"/>
      	  <value>com.whatever.User1Mapper</value>
      	</list-->
      </list>
    </property>
  </bean>
  
  <!-- Transaction Interceptor set up to do PROPAGATION_REQUIRED on all methods -->
  <bean id="matchAllWithPropReq" class="org.springframework.transaction.interceptor.MatchAlwaysTransactionAttributeSource">
    <property name="transactionAttribute"><value>PROPAGATION_REQUIRED</value></property>
  </bean>
  <bean id="matchAllTxInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
    <property name="transactionManager"><ref bean="transactionManager"/></property>
    <property name="transactionAttributeSource"><ref bean="matchAllWithPropReq"/></property>
  </bean>

	<!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->
  
  <!-- a parent bean definition which is a 'template' or base definition for transaction
       proxies. It is set as lazy-init, since it is never supposed to be instantiated
       itself. Children can override the transaction attributes -->
	<bean id="baseTxProxy" lazy-init="true"
	      class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager"><ref bean="transactionManager"/></property>
		<property name="transactionAttributes">
			<props>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
    <property name="postInterceptors">
      <list>
        <ref local="hibInterceptor"/>
      </list>
    </property>
	</bean>
  
  <!-- pojo SimpleService bean, wrapped in a tx proxy -->
  <bean id="delegatingSimpleService" parent="baseTxProxy">
    <property name="target">
    	<bean class="org.springframework.autobuilds.ejbtest.simple.DelegatingSimpleServiceImpl">
        <property name="delegate"><ref bean="mapperUsingSimpleService"/></property>
    	</bean>
    </property>
  </bean>


  <!-- pojo SimpleService bean, and tx wrapped proxy which is actually used by clients -->
	<bean id="mapperUsingSimpleServiceTarget" class="org.springframework.autobuilds.ejbtest.simple.MapperUsingSimpleService">
    <property name="mapper"><ref bean="root-mapper"/></property>
	</bean>
  <bean id="mapperUsingSimpleService" parent="baseTxProxy">
    <property name="target"><ref bean="mapperUsingSimpleServiceTarget"/></property>
  </bean>

	<bean id="delegatingSimpleService2" class="org.springframework.autobuilds.ejbtest.simple.DelegatingSimpleServiceImpl">
    <property name="delegate"><ref bean="mapperUsingSimpleService"/></property>
	</bean>

  <!-- One BeanNameAutoProxyCreator handles all beans where we want all methods to use PROPAGATION_REQUIRED -->
  <bean id="autoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
    <property name="interceptorNames">
      <list>
        <idref local="matchAllTxInterceptor"/>
        <idref bean="hibInterceptor"/>
      </list>
    </property>
    <property name="beanNames">
      <list>
   	    <idref local="delegatingSimpleService2"/>
      </list>
    </property>
  </bean> 


	<!-- a proxy to remote EJB, with the cached home flag oon, to test home caching -->
	<bean id="cachedHomeProxy" lazy-init="true" class="org.springframework.ejb.access.SimpleRemoteStatelessSessionProxyFactoryBean">
		<property name="jndiName">
			<value>Simple</value>
		</property>
		<property name="cacheHome">
			<value>true</value>
		</property>
		<property name="businessInterface">
			<value>org.springframework.autobuilds.ejbtest.simple.SimpleService</value>
		</property>
	</bean>

	<!-- now another instance with the cached home flag off, to test home lookup every time -->  
	<bean id="noCachedHomeProxy" lazy-init="true" class="org.springframework.ejb.access.SimpleRemoteStatelessSessionProxyFactoryBean">
		<property name="jndiName">
			<value>Simple</value>
		</property>
		<property name="cacheHome">
			<value>false</value>
		</property>
		<property name="businessInterface">
			<value>org.springframework.autobuilds.ejbtest.simple.SimpleService</value>
		</property>
	</bean>
  
	<!-- now a local EJB (with cache on, although that is not the purpose of the test which uses this -->
	<bean id="simpleEjbLocalProxy" lazy-init="true" class="org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean">
		<property name="jndiName">
			<value>local/Simple</value>
		</property>
		<property name="cacheHome">
			<value>false</value>
		</property>
		<property name="businessInterface">
			<value>org.springframework.autobuilds.ejbtest.simple.SimpleService</value>
		</property>
	</bean>

	<!-- stateless session bean proxy for test of proper Hibernate Session binding and unbinding, when
       no spring TX is used at the same time, but only CMT transaction (accessed via JTA)  -->
	<bean id="cmtJtaNoSpringTx" lazy-init="true" class="org.springframework.ejb.access.SimpleRemoteStatelessSessionProxyFactoryBean">
		<property name="jndiName">
			<value>CmtJtaNoSpringTx</value>
		</property>
		<property name="businessInterface">
			<value>org.springframework.autobuilds.ejbtest.hibernate.tx.ejb.CmtJtaNoSpringTx</value>
		</property>
	</bean>

</beans>
