<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE web-app
    PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
    "http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app>
	
	<context-param>
		<param-name>locatorFactorySelector</param-name>
		<param-value>beanRefContext.xml</param-value>
	</context-param>
	<context-param>
		<param-name>parentContextKey</param-name>
		<param-value>servicelayer-context</param-value>
	</context-param>
	
	<!--
	  - Location of the XML file that defines the root application context.
	  - Applied by ContextLoaderServlet.
		-
		- Can be set to "/WEB-INF/applicationContext-hibernate.xml" for the Hibernate
		- implementation, or "/WEB-INF/applicationContext-jdbc.xml" for the JDBC one.
	  -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/applicationContext.xml</param-value>
	</context-param>
	
	<!--
	   - Loads the root application context of this web app at startup,
	   - by default from "/WEB-INF/applicationContext.xml".
	   - Use WebApplicationContextUtils.getWebApplicationContext(servletContext)
	   - to access it anywhere in the web application, outside of the framework.
	   -
	   - Use Spring's ContextLoaderServlet to load ApplicationContexts in 
	   - Servlet 2.3 containers which do not have the same ordering for 
	   - servlet initialization as clarified in the Servlet 2.4 spec (most do)
	 -->
	<listener>
		<listener-class>org.springframework.integrationtest.ejbtest.util.context.ContextLoaderListener</listener-class>
	</listener>

</web-app>
