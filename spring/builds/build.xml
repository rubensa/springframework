<?xml version="1.0"?>

<project name="toplevel" default="usage" basedir=".">

	<!-- ===================== Initialize Properties ======================= -->
	<property file="build.properties" />

	<!-- Path location(s) for java source files -->
	<path id="source.path">
		<pathelement location="${source.dir}" />
	</path>

	<!-- The most basic compile classpath -->
	<path id="base.compile.classpath">
		<pathelement location="${target.classes.dir}" />
		<pathelement location="${commons.logging.jar}" />
		<pathelement location="${spring.jar}" />
	</path>

	<!-- The default project compile classpath -->
	<path id="project.compile.classpath">
		<path refid="base.compile.classpath" />
		<path refid="all.libs.classpath" />
	</path>

	<!-- Catch all 3rd-party lib classpath -->
	<path id="all.libs.classpath">
		<fileset dir="${devtools.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- ===================== Test Execution Defaults ======================= -->

	<!-- Unit test classpath -->
	<path id="test.classpath">
		<path refid="project.compile.classpath" />
		<pathelement location="${db.dir}" />
		<pathelement location="${target.conf.dir}" />
		<pathelement location="${test.dir}" />
		<pathelement location="${target.tests.dir}" />
		<pathelement location="${junit.jar}" />
		<pathelement location="${target.conf.dir}" />
	</path>

	<!-- ===================== Patterns for File Copies ================= -->

	<patternset id="config.files">
		<include name="**/*.xml" />
		<include name="**/*.properties" />
		<include name="**/*.conf" />
	</patternset>

	<patternset id="image.files">
		<include name="**/*.png" />
		<include name="**/*.gif" />
		<include name="**/*.jpg" />
	</patternset>

	<patternset id="html.files">
		<include name="**/*.html" />
		<include name="**/*.htm" />
		<include name="**/*.css" />
	</patternset>

	<patternset id="scriptlet.files">
		<include name="**/*.jsp" />
		<include name="**/*.vm" />
	</patternset>

	<patternset id="std.files.to.filter">
		<patternset refid="config.files" />
		<include name="**/*.txt" />
		<include name="**/*.email" />
		<include name="**/*.html" />
		<include name="**/*.htm" />
	</patternset>
	
	<patternset id="std.files.to.filter">
		<patternset refid="config.files" />
		<include name="**/*.txt"/>
		<include name="**/*.email"/>
		<include name="**/*.html"/>
		<include name="**/*.htm"/>
		<include name="**/*.jsp"/>
	</patternset>
		
	<patternset id="std.files.not.to.filter">
		<exclude name="**/*.xml"/>
		<exclude name="**/*.properties"/>
		<exclude name="**/*.conf"/>
		<exclude name="**/*.txt"/>
		<exclude name="**/*.email"/>
		<exclude name="**/*.html"/>
		<exclude name="**/*.htm"/>
		<include name="**/*.jsp"/>
	</patternset>	

	<!-- ===================== Executable Targets ======================= -->
	<target name="init" description="Initialize and setup.">
		<tstamp />
		<echo message="-------- ${project.name} ${project.version} --------" />
		<filter token="project.name" value="${project.name}" />
		<filter token="project.package" value="${project.package}" />
		<filter token="project.version" value="${project.version}" />
	</target>

	<target name="build.prepare" depends="init" description="Prepare target target directory.">
		<mkdir dir="${target.dir}" />
		<mkdir dir="${target.classes.dir}" />
		<mkdir dir="${target.tests.dir}" />
		<mkdir dir="${target.conf.dir}" />
	</target>

	<target name="build.static" depends="build.prepare" description="Copy static files (property files, xml files, etc.) to target conf directories.">
		<available file="${conf.dir}" property="conf.exists" />
		<antcall target="build.conf" />
	</target>

	<target name="build.conf" depends="build.prepare" if="conf.exists">
		<!-- resource files, filtering for non-binary types -->
	    <copy todir="${target.conf.dir}" filtering="on">
	      <fileset dir="${conf.dir}">
	        <patternset refid="std.files.to.filter"/>
	      </fileset>
		  <filterchain>
	        <expandproperties/>
	      </filterchain>
	    </copy>
	    <copy todir="${target.conf.dir}">
	      <fileset dir="${conf.dir}">
	        <patternset refid="std.files.not.to.filter"/>
	      </fileset>
	    </copy>
	</target>

	<target name="compile" depends="build.static" description="Compile java sources (incremental compile.)">
		<javac destdir="${target.classes.dir}" debug="${compile.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}" source="${compile.source}">
			<src refid="source.path" />
			<classpath refid="project.compile.classpath" />
		</javac>
		<antcall target="build.nonjava.sources" />
	</target>

	<target name="build.nonjava.sources" depends="build.prepare" description="Copy all non-java resources in the source tree to target area.">
		<copy todir="${target.classes.dir}">
			<fileset dir="${source.dir}" excludes="**/*.java" />
		</copy>
	</target>

	<target name="clean" description="Clean target build and distribution directories.">
		<delete dir="${target.dir}" />
		<delete dir="${dist.dir}" />
	</target>

	<target name="clean.compile" depends="clean,compile" description="Compile java sources (clean re-compile.)" />

	<target name="dist" depends="build.static,compile,dist.dependencies,dist.static,create.distfile" description="Create a binary distribution without javadocs." />

	<target name="dist.prepare" depends="init" description="Create distribution directory">
		<mkdir dir="${dist.dir}" />
	</target>

	<target name="dist.static" depends="dist.prepare" description="Copy static files (.txt/properties/xml/scripts) to dist directory.">
		<copy file="license.txt" todir="${dist.dir}" failonerror="false" />
		<copy file="changelog.txt" todir="${dist.dir}" failonerror="false" />
		<!-- Copy additional static files to distribution area; e.g configuration and bat files, projects may extend/override -->
	</target>

	<target name="dist.dependencies" depends="dist.prepare" if="dist.with.dependencies" description="Copy external distribution runtime dependencies if specified.">
		<!-- Copy required external libraries and dependencies (those not included in the dist file), projects may override -->
	</target>

	<target name="create.distfile" depends="compile,dist.prepare" description="Create project distributable (jar/war) file.">
		<!-- Create the distributable project jar/war file(s); projects should override -->
	</target>

	<target name="javadoc" depends="compile,dist.prepare" unless="docs-uptodate" description="Create project API documentation.">
		<mkdir dir="${dist.javadocs.dir}" />
		<javadoc sourcepathref="source.path" destdir="${dist.javadocs.dir}" packagenames="*" author="true" private="${javadoc.private}" protected="${javadoc.protected}" version="true" overview="${source.dir}/overview.html" doctitle="&lt;h1&gt;${project.title} (Version ${project.version})&lt;/h1&gt;" windowtitle="${project.title} (Version ${project.version})" bottom="${copyright}">
			<classpath refid="project.compile.classpath" />
		</javadoc>
	</target>

	<target name="dist.javadoc" depends="dist,javadoc" description="Create a binary distribution including javadocs." />

	<target name="dist.src" depends="dist" description="Create a binary distribution including source code.">
		<!-- Create source jar file, for easy mounting via an IDE -->
		<jar file="${dist.dir}/${project.name}-src.jar">
			<fileset dir="${source.dir}" includes="**" />
			<fileset dir="${conf.dir}" includes="MANIFEST.MF" />
		</jar>

		<!-- Copy source build files -->
		<copy todir="${dist.dir}">
			<fileset dir="${basedir}">
				<include name="build.xml" />
				<include name="build.properties" />
			</fileset>
		</copy>
	</target>

	<target name="usage">
		<echo message="" />
		<echo message="${project.name} build file" />
		<echo message="------------------------------------------------------" />
		<echo message="" />
		<echo message="Among the available targets are:" />
		<echo message="" />
		<echo message="clean --> clean all" />
		<echo message="compile --> build all; don't create distributable JARs" />
		<echo message="dist --> build all; create distributable JARs" />
		<echo message="dist.javadoc --> compile and create distributable JAR files and javadocs" />
		<echo message="run.tests -> run tests" />
		<echo message="" />
	</target>

	<!-- ===================== Unit Test Targets ======================= -->
	<target name="compile.tests" depends="compile" description="Compile project unit test cases.">
		<javac srcdir="${test.dir}" destdir="${target.tests.dir}" debug="${compile.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}" source="${compile.source}">
			<classpath refid="test.classpath" />
		</javac>
		<copy todir="${target.tests.dir}" filtering="on">
			<fileset dir="${test.dir}" excludes="**/*.java" />
		</copy>
	</target>

	<target name="run.tests" depends="compile.tests" description="Run all project unit tests.">
		<mkdir dir="${tests.report.dir}" />
		<junit printsummary="yes" haltonfailure="no" haltonerror="no">
			<jvmarg line="-Djava.awt.headless=true"/>			
			<classpath refid="test.classpath" />
			<formatter type="plain" usefile="false" />
			<formatter type="xml" />
			<batchtest fork="yes" todir="${tests.report.dir}">
				<fileset dir="${target.tests.dir}" includes="${tests.includes}" excludes="${tests.excludes}" />
			</batchtest>
		</junit>
	</target>
	
	<target name="clover.build" description="Compile main source tree java files with clover into class files">
		<!-- switch on Clover by specifying it as the compiler to use -->
		<property name="build.compiler" value="org.apache.tools.ant.taskdefs.CloverCompilerAdapter"/>
		
		<mkdir dir="${target.clover.dir}"/>

		<javac destdir="${target.clover.dir}" debug="${compile.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}" source="${compile.source}">
			<src refid="source.path" />
			<classpath refid="project.compile.classpath" />
		</javac>

		<copy todir="${target.clover.dir}">
	        <fileset dir="${conf.dir}">
	            <patternset refid="std.files.not.to.filter"/>
	        </fileset>
	    </copy>
	</target>
	
	<target name="clover.tests" depends="compile.tests,clover.build" description="Run all project unit tests with clover.">
		<mkdir dir="${tests.report.dir}" />
		<junit printsummary="yes" haltonfailure="no" haltonerror="no">
			<jvmarg line="-Djava.awt.headless=true"/>
			<!-- Put cloverised main tree first -->
			<classpath location="${target.clover.dir}"/>
			<classpath refid="test.classpath" />
			<formatter type="plain" usefile="false" />
			<formatter type="xml" />
			<batchtest fork="yes" todir="${tests.report.dir}">
				<fileset dir="${target.tests.dir}" includes="${tests.includes}" excludes="${tests.excludes}" />
			</batchtest>
		</junit>
	</target>
	
	<!--
		Run test suite under Clover coverage analysis, and use Clover
		to generate Javadoc/style HTML results that may be browsed later.
	-->
	<target name="clover.tests.html" depends="clover.tests" description="Run clover tests and generate html coverage reports">
		<java classname="com.cortexeb.tools.clover.reporters.html.HtmlReporter" fork="yes">
			<arg line="-o '${target.clover.html.dir}' -i '${clover.initstring}' -t 'Ref Data 2.0'"/>
			<classpath refid="all.libs.classpath"/>
		</java>
	</target>

</project>