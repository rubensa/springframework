Changes in the web framework from 1.0 M2 to 1.0 M3
==================================================

* All Spring web controllers, from the base Controller interface to the command and form controller classes,
can throw any Exception now to avoid the need for wrapping checked application exceptions coming from the middle
tier. Standard usage of controllers will not be affected, but methods that invoke super class controller methods
that might in turn invoke other callback code will need to throw Exception now.

* Standard exception handling will propagate any uncaught exceptions to the servlet container, wrapping
non-Servlet/IO exceptions in ServletExeptions. This can be customized by defining one or more beans of type
HandlerExceptionResolver that are allowed to turn an exception into a ModelAndView to forward to, for custom
MVC-managed error pages. SimpleMappingExceptionResolver is an out-of-the-box implementation that provides basic
exception mapping capabilities for typical needs. Controller code can also throw ModelAndViewDefiningException
to force forwarding to a given ModelAndView that represents a custom error page - without relying on a resolver.

* BaseCommandController's "setBeanName" method has been renamed to "setCommandName", to express its meaning more
clearly: It specifies the name of the command object in the model. As setBeanName invocations are very common
in application code, the old method has been kept as deprecated for the time being. We recommend to migrate all
application code to setCommandName promptly - a trivial search-and-replace should do the job. The deprecated
setBeanName method will probably be dropped as of 1.0 RC1, following our policy to not keep any deprecations
in release 1.0 final. Starting with the latter, full compatibility of the public API will be guaranteed.

* BaseCommandController's "userObject" method has been renamed to "getCommand". This should not affect any
standard command or form controllers, as this method was mainly used internally in the command and form
controller implementation hierarchy.

* DataBinder and ServletRequestDataBinder do not derive from BindException anymore but rather contain a
BindException now. This will not affect standard command and form controllers or BindUtils users, but manual
ServletRequestDataBinder usage will need to be adapted.

* The JSP tag library specifies a default URI now, to allow for auto-detection by the servlet container. So if
you address it in your JSPs with <%@ taglib prefix="spring" uri="http://www.springframework.org/tags" %>, you
don't need to declare the taglib in your web.xml anymore. The TLD will automatically be discovered in spring.jar,
and registered under the default URI. This is consistent with how the JSTL is typically used.

          -  Juergen Hoeller, November 23, 2003


AOP API changes from 1.0 M2 to 1.0 M3
=====================================

There have been major changes in the Spring AOP API in Release 1.0 M3.

WHY?

The motivation for these changes was to:

* Decouple pointcuts and interceptors, allowing each to be used independently and being more faithful to AOP concepts
* Allow for sophisticated pointcut composition
* Provide a high-level Advisor concept that can allow Spring to support forms of advice other than interception
around advice in future, such as Before, After and Throws advice. While all these types of advice can be achieved
using around advice, there are good reasons to promote them to first class concepts, as does AspectJ.

These changes were partly the product of discussion with AOP leaders such as Renaud Pawlak (JAC, AOP Alliance)
and Bob Lee. We believe that these are worthwhile and important changes that give Spring a flexible and extensible
AOP API that can allow us to move beyond  interception if we want to in future.

Note that Spring continues to support the AOP Alliance interception API, so the interface for MethodInterceptors
is unchanged, and most existing MethodInterceptors will work unchanged.

SUMMARY OF CHANGES

* Pointcuts no longer contain Interceptors. A new InterceptionAroundAdvisor holds both a pointcut and a
MethodInterceptor. Other abstract Advisor interfaces allow the implementation of other forms of Advice.
* Pointcuts now merely identify candidate joinpoints, and do not include actions to take at joinpoints.
Pointcuts are now broken into ClassFilter and MethodMatcher interfaces.
* There are new classes of static methods allowing composition of Pointcuts and MethodMatcher.
* ProxyConfig is renamed Advised
* The only way to perform an introduction is now via an InterceptionIntroductionAdvice.
It is no longer possible to perform an introduction by adding an IntroductionInterceptor.
* The AOP Alliance AttributesRegistry interface is no longer supported, and no longer passed to Spring pointcuts.
Spring will introduce its own metadata attribute support in a future release.
* Some classes have moved package. The org.springframework.aop package now contains Spring's API for core AOP
concepts, as opposed for the Spring AOP framework itself which remains in org.springframework.aop.framework.

OTHER ENHANCEMENTS

There are also some functional enhancements:

* It is now possible to cast any AOP proxy to the Advised interface (formerly ProxyConfig).
* The AopContext helper can be used to obtain the AOP proxy, if the relevant AOP proxy factory is configured correctly.
* Performance improvement by caching advice calculation for proxied objects.

Our performance testing indicates that the Spring AOP framework performs extremely well for its intended purpose.
However, we are likely to introduce further optimizations in future, and some of the present refactoring will
facilitate this.

TO MIGRATE YOUR CODE

If you use MethodInterceptors only, your code should not be affected.

If you extended org.springframework.aop.framework.StaticMethodPointcut, you should now extend 
org.springframework.support.StaticMethodMatcherPointcutAroundAdvisor. Please see the type hierarchy under
org.springframework.aop.InterceptionAroundAdvisor for further information.

It is NOT expected that there will be any further significant incompatible changes to the Spring public AOP APIs.
However, the implementation of some features, particularly as pointcut composition, will be improved.
(1.0 RC1 will include rigorously defined pointcut composition rules and possibly additional composition methods;
pointcut composition is presently only partially implemented.)

          -  Rod Johnson, November 21, 2003
