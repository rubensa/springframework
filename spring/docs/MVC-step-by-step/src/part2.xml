<chapter id="part2">
    <title>Developing and Configuring the Application</title>
    <para>This is Part 2 of a step-by-step tutorial on how to develop a web
    application from scratch using the Spring Framework. In
    <link linkend="part1">Part 1 (Steps 1 â€“ 12)</link> we configured the
    environment and set up a basic application that we will now flesh out.</para>
    <para>This is what we have implemented so far:</para>
    <itemizedlist>
        <listitem>
            <para>An introduction page, <filename>'index.jsp'</filename></para>
        </listitem>
        <listitem>
            <para>A <classname>DispatcherServlet</classname> defined in its corresponding
            <filename>'springapp-servlet.xml'</filename> configuration file</para>
        </listitem>
        <listitem>
            <para>A controller, <classname>HelloController</classname></para>
        </listitem>
        <listitem>
            <para>A view, <filename>'hello.jsp'</filename>.</para>
        </listitem>
    </itemizedlist>
    <section id="step2.1">
        <title>Configure JSTL</title>
        <para>We will be using the JSP Standard Tag Library (JSTL), so let's start by
        copying the JSTL files we need to our
        <filename class="directory">'WEB-INF/lib'</filename> directory. Copy
        <filename class="libraryfile">jstl.jar</filename> from the
        <filename class="directory">'spring-framework-2.0/lib/j2ee'</filename> directory and
        <filename class="libraryfile">standard.jar</filename> from the
        <filename class="directory">'spring-framework-2.0/lib/jakarta-taglibs'</filename>
        directory to the <filename class="directory">'springapp/war/WEB-INF/lib'</filename>
        directory.</para>
        <para>Create a <filename class="directory">'tld'</filename> directory below the
        <filename class="directory">WEB-INF</filename> directory. Then copy the tag library
        descriptors <filename class="libraryfile">'c.tld'</filename> and
        <filename class="libraryfile">'fmt.tld'</filename> from the Jakarta Commons tag library
        jar <filename class="libraryfile">'WEB-INF/lib/standard.jar'</filename>.</para>
        <para>Next, define the tag libraries in <filename class="libraryfile">'WEB-INF/web.xml'</filename>
        so that they can be used in your JSPs.</para>
        <para><filename>'WEB-INF/web.xml'</filename>:</para>
        <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.4"
         xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee 
         http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd" >

  <servlet>
    <servlet-name>springapp</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>springapp</servlet-name>
    <url-pattern>*.htm</url-pattern>
  </servlet-mapping>

  <welcome-file-list>
    <welcome-file>
      index.jsp
    </welcome-file>
  </welcome-file-list>
]]>
  <emphasis role="bold"><![CDATA[<jsp-config>
    <taglib>
      <taglib-uri>http://java.sun.com/jsp/jstl/core</taglib-uri>
      <taglib-location>/WEB-INF/tld/c.tld</taglib-location>
    </taglib>
    <taglib>
      <taglib-uri>http://java.sun.com/jsp/jstl/fmt</taglib-uri>
      <taglib-location>/WEB-INF/tld/fmt.tld</taglib-location>
    </taglib>
  </jsp-config>]]></emphasis>
  
<![CDATA[</web-app>]]></programlisting>
        
        <para>We will be creating a 'header' file that will be included in every JSP
        page that we're going to write. We ensure the same definitions are included in all
        our JSPs simply by including the header file. We're also going to put all JSPs in
        a directory named <filename class="directory">'jsp'</filename> under the
	    <filename class="directory">'WEB-INF'</filename> directory. This will ensure that only
	    the controller has access to the views since it will not be not possible to access these 
	    pages directly via a URL in the browser. This strategy might not work in
	    all application servers and if this is the case with the one you are using, move
	    the <filename class="directory">'jsp'</filename> directory up a level. You would then use
	    <filename class="directory">'springapp/war/jsp'</filename> as the directory instead of
	    <filename class="directory">'springapp/war/WEB-INF/jsp'</filename> in all the code
	    examples that will follow.</para>
        
    </section>
    <section id="step2.2">
        <title>Improve the view and the controller</title>
        <para>First we create the header file for inclusion in all the JSPs we create.</para>
        <para><filename>'springapp/war/WEB-INF/jsp/include.jsp'</filename>:</para>
        <programlisting><![CDATA[<%@ page session="false"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jstl/fmt" %>]]></programlisting>
        <para>Now we can change <filename>'index.jsp'</filename> to use this include file
        and since we are using JSTL, we can use the <literal>&lt;c:redirect/&gt;</literal>
        tag for redirecting to our front <interfacename>Controller</interfacename>. This ties
        the <filename>'index.jsp'</filename> into our application framework.</para>
        
        <para><filename>'springapp/war/index.jsp'</filename>:</para>
        <programlisting><![CDATA[<%@ include file="/WEB-INF/jsp/include.jsp" %>

]]><lineannotation>&lt;%-- Redirected because we can't set the welcome page to a virtual URL. --%&gt;</lineannotation><![CDATA[
<c:redirect url="/hello.htm"/>]]></programlisting>
        
    </section>
    
    <section id="step2.3">
        <title>Improve the view and the controller</title>
        <para>Next, we move the view <filename>hello.jsp</filename> to the
        <filename class="directory">'WEB-INF/jsp'</filename> directory. Add the same include directive
        we added to <filename>index.jsp</filename> to <filename>hello.jsp</filename>. 
        Now we also add the current date and time as output to be retrieved from the model,
        passed to the view, using the JSTL &lt;c:out/&gt; tag.</para>
        <para><filename>'springapp/war/WEB-INF/jsp/hello.jsp'</filename>:</para>
        <programlisting><![CDATA[<%@ include file="/WEB-INF/jsp/include.jsp" %>

<html>
<head><title>Hello :: Spring Application</title></head>
<body>
<h1>Hello - Spring Application</h1>
<p>Greetings, it is now <c:out value="${now}"/>
</p>
</body>
</html>]]></programlisting>
    
        <para>There are a few changes we need to make to the <classname>HelloController</classname>.
        Update the view's resource reference to its new location <filename>'WEB-INF/jsp/hello.jsp'</filename>.
        Next, set the key/value pair for the current data and time value in the model to
        the key identifier: <literal>"now"</literal> and the string value: <literal>'now'</literal>.</para>

        <para><filename>'springapp/src/HelloController.java'</filename></para>
        
        <programlisting><![CDATA[package springapp.web;

import org.springframework.web.servlet.mvc.Controller;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.io.IOException;
import java.util.Date;

public class HelloController implements Controller {

    protected final Log logger = LogFactory.getLog(getClass());

    public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

    	String now = (new Date()).toString();
        logger.info("Returning hello view with " + now);

        return new ModelAndView("WEB-INF/jsp/hello.jsp", "now", now);
    }

}]]></programlisting>

        <para>Remember that the <interfacename>Controller</interfacename> has already been
        configured in <filename>'springapp-servlet.xml'</filename> file, so we are ready
        to try out our enhanced application  after we build and deploy this new code. When we
        enter <ulink url="http://localhost:8080/springapp/">http://localhost:8080/springapp/</ulink>
        in a browser, it should pull up <filename>'index.jsp'</filename>, which should
        redirect to <filename>'hello.htm'</filename>, which in turn delegates our request to
        the controller that sets the date and time in the model and then makes the model available
        to the view.</para>
        
        <screenshot>
		    <mediaobject>
			    <imageobject role="fo">
				    <imagedata fileref="images/screen3.png" format="PNG" align="center" />
			    </imageobject>
			    <imageobject role="html">
				    <imagedata fileref="images/screen3.png" format="PNG" align="center" />
			    </imageobject>
			    <caption>
				    <para>The updated application</para>
			    </caption>
		    </mediaobject>
	    </screenshot>
        
    </section>
    
    <section id="step2.4">
        <title>Decouple the view and the controller</title>
        <para>Right now the controller specifies the full path of the view, which creates an
        unnecessary dependency between the controller and the view. Ideally we would like to
        map to the view using a logical name, allowing us to switch the view without having
        to change the controller. You can set this mapping in a properties file if you like
        using a <classname>ResourceBundleViewResolver</classname> and a
        <classname>SimpleUrlHandlerMapping</classname> class. If your mapping needs are simple
        it is easier to just set a prefix and a suffix on the
        <classname>InternalResourceViewResolver</classname>. The latter approach is the one that
        I will implement now, so I modify the <filename>'springapp-servlet.xml'</filename> and
        include this <literal>'viewResolver'</literal> entry. I have elected to use a
        <classname>JstlView</classname> which will enable us to use JSTL in combination with
        message resource bundles and it will also support internationalization.</para>
        <para><filename>'springapp/war/WEB-INF/springapp-servlet.xml'</filename>:</para>
        <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

]]><lineannotation>&lt;!-- the application context definition for the springapp <classname>DispatcherServlet</classname> --&gt;</lineannotation><![CDATA[

<beans>

    <bean id="springappController" class="SpringappController"/>
]]><emphasis><![CDATA[
    <bean id="urlMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
        <property name="mappings">
            <value>
                /hello.htm=springappController
            </value>
        </property>
    </bean>

    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
]]></emphasis><![CDATA[
</beans>]]></programlisting>

        <para>So now I can remove the prefix and suffix from the view name in the controller.</para>
        
        <para><filename>'springapp/src/SpringappController.java'</filename>:</para>
        <programlisting><![CDATA[import org.springframework.web.servlet.mvc.Controller;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.io.IOException;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class SpringappController implements Controller {

    protected final Log logger = LogFactory.getLog(getClass());


    public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException {

        String now = (new java.util.Date()).toString();
        logger.info("returning hello view with " + now);

        return new ModelAndView("hello", "now", now);
    }

}]]></programlisting>

        <para>Compile and deploy and the application should still work.</para>

    </section>
    
    <section id="step2.5">
        <title>Add some classes for business logic</title>
        <para>So far our application is not very useful. I would like to add a little
        bit of business logic in form of a <classname>Product</classname> class and a
        class that will manage all the products. I name this management class
        <classname>ProductManager</classname>. In order to separate the web dependent
        logic from the business logic I will create two separate packages for the
        Java source â€“ <literal>'web'</literal> and <literal>'bus'</literal>. If this
        was an application for a real company I would name the packages something like
        <literal>'com.mycompany.web'</literal> and <literal>'com.mycompany.bus'</literal>,
        but since this is just a demo application I will keep the package names real
        short. The <classname>Product</classname> class is implemented as a JavaBean
        â€“ it has the default constructor (automatically provided if we don't specify
        any constructors) and getters and setters for the two instance variables
        <literal>'description'</literal> and <literal>'price'</literal>. I also make
        it <interfacename>Serializable</interfacename>, not necessary for our application,
        but could come in handy later on if we have to pass this class between
        different application layers.</para>
        
        <para><filename>'springapp/src/bus/Product.java'</filename>:</para>
        <programlisting><![CDATA[package bus;

import java.io.Serializable;

public class Product implements Serializable {

    private String description;
    private Double price;


    public void setDescription(String description) {
        this.description = description;
    }

    public String getDescription() {
        return this.description;
    }

    public void setPrice(Double price) {
        this.price = price;
    }

    public Double getPrice() {
        return this.price;
    }

}]]></programlisting>

        <para>The <classname>ProductManager</classname> holds a <interfacename>List</interfacename>
        of <classname>Product</classname> instances, and again this this class is implemented
        as a JavaBean.</para>
        
        <para><filename>'springapp/src/bus/ProductManager.java'</filename>:</para>
        <programlisting><![CDATA[package bus;

import java.io.Serializable;
import java.util.List;

public class ProductManager implements Serializable {

    private List products;


    public void setProducts(List products) {
        this.products = products;
    }

    public List getProducts() {
        return this.products;
    }

}]]></programlisting>

        <para>Next, I modify the <classname>SpringappController</classname> to hold a reference
        to this <classname>ProductManager</classname> class. As you can see, it is now in a
        separate package called <literal>'web'</literal> â€“ remember to move the source to this
        new location. I also add code to have the controller pass some product information to
        the view. The <methodname>getModelAndView()</methodname> method now returns a
        <interfacename>Map</interfacename> with both the date and time and the products
        list obtained from the manager reference.</para>
        
        <para><filename>'springapp/src/web/SpringappController.java'</filename>:</para>
        <programlisting><![CDATA[package web;

import org.springframework.web.servlet.mvc.Controller;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.util.Map;
import java.util.HashMap;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import bus.Product;
import bus.ProductManager;

public class SpringappController implements Controller {

    protected final Log logger = LogFactory.getLog(getClass());

    private ProductManager productManager;


    public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        String now = (new java.util.Date()).toString();
        logger.info("returning hello view with " + now);

        Map myModel = new HashMap();
        myModel.put("now", now);
        myModel.put("products", this.productManager.getProducts());

        return new ModelAndView("hello", "model", myModel);
    }


    public void setProductManager(ProductManager productManager) {
        this.productManager = productManager;
    }

}]]></programlisting>

    </section>
    
    <section id="step2.6">
        <title>Modify the view to display business data and add support for message bundle</title>
        <para>Using the JSTL <literal>&lt;c:forEach/&gt;</literal> tag, I add a section
        that displays product information. I have also replaced the title, heading and
        greeting text with a JSTL <literal>&lt;fmt:message/&gt;</literal> tag that pulls
        the text to display from a provided <literal>'message'</literal> source â€“ I will
        show this source in a later step.</para>
        
        <para><filename>'springapp/war/WEB-INF/jsp/hello.jsp'</filename>:</para>
        <programlisting><![CDATA[<%@ include file="/WEB-INF/jsp/include.jsp" %>

<html>
<head><title><fmt:message key="title"/></title></head>
<body>
<h1><fmt:message key="heading"/></h1>
<p><fmt:message key="greeting"/> <c:out value="${model.now}"/>
</p>
<h3>Products</h3>
<c:forEach items="${model.products}" var="prod">
  <c:out value="${prod.description}"/> <i>$<c:out value="${prod.price}"/></i><br><br>
</c:forEach>
</body>
</html>]]></programlisting>
        
    </section>
    
    <section id="step2.7">
        <title>Add some test data to automatically populate some business objects</title>
        <para>I am not going to add any code to load the business objects from a database
        just yet. Instead, we can stub a couple of <classname>Product</classname> instances
        using Spring's bean and application context support. I will simply put the data I
        need as a couple of bean entries in <filename>'springapp-servlet.xml'</filename>.
        I will also add the <literal>'messageSource'</literal> bean entry that will pull
        in the messages resource bundle (<filename>'messages.properties'</filename>) that
        I will create in the next step.</para>
        <para><filename>'springapp/war/WEB-INF/springapp-servlet.xml'</filename>:</para>
        <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

]]><lineannotation>&lt;!-- the application context definition for the springapp <classname>DispatcherServlet</classname> --&gt;</lineannotation><![CDATA[

<beans>

    <bean id="springappController" class="web.SpringappController">
        <property name="productManager" ref="prodMan"/>
    </bean>

    <bean id="prodMan" class="bus.ProductManager">
        <property name="products">
            <list>
                <ref bean="product1"/>
                <ref bean="product2"/>
                <ref bean="product3"/>
            </list>
        </property>
    </bean>

    <bean id="product1" class="bus.Product">
        <property name="description" value="Lamp"/>
        <property name="price" value="5.75"/>
    </bean>
        
    <bean id="product2" class="bus.Product">
        <property name="description" value="Table"/>
        <property name="price" value="75.25"/>
    </bean>

    <bean id="product3" class="bus.Product">
        <property name="description" value="Chair"/>
        <property name="price" value="22.79"/>
    </bean>

    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="messages"/>
    </bean>

    <bean id="urlMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
        <property name="mappings">
            <value>
                /hello.htm=springappController
            </value>
        </property>
    </bean>

    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

</beans>]]></programlisting>
    </section>
    
    <section id="step2.8">
        <title>Add the message bundle and a <literal>'clean'</literal> target to <filename>'build.xml'</filename></title>
        <para>I create a <filename>'messages.properties'</filename> file in the
        <filename class="directory">'war/WEB-INF/classes'</filename> directory. This properties bundle
        so far has three entries matching the keys specified in the <literal>&lt;fmt:message/&gt;</literal>
        tags that we added to <filename>'hello.jsp'</filename>.</para>    
        <para><filename>'springapp/war/WEB-INF/classes/messages.properties'</filename>:</para>
        <programlisting><![CDATA[title=SpringApp
heading=Hello :: SpringApp
greeting=Greetings, it is now]]></programlisting>
        <para>Since we moved some source files around, it makes sense to add a <literal>'clean'</literal>
        and an <literal>'undeploy'</literal> target to the build script. I add the following entries to
        the <filename>'build.xml'</filename> file.</para>
        <para><filename>'build.xml'</filename>:</para>
        <programlisting><![CDATA[    <target name="clean" description="Clean output directories">
        <delete>
            <fileset dir="${build.dir}">
                <include name="**/*.class"/>
            </fileset>
        </delete>
    </target>

    <target name="undeploy" description="Un-Deploy application">
        <delete>
            <fileset dir="${deploy.path}/${name}">
                <include name="**/*.*"/>
            </fileset>
        </delete>
    </target>]]></programlisting>
    
        <para>Now stop the Tomcat server, run the <literal>'clean'</literal>, <literal>'undeploy'</literal>
        and <literal>'deploy'</literal> targets. This will remove all old class files, re-build
        the application and deploy it. Start up Tomcat again and you should see the following:</para>
        
        <screenshot>
		    <mediaobject>
			    <imageobject role="fo">
				    <imagedata fileref="images/screen3.png" format="PNG" align="center" />
			    </imageobject>
			    <imageobject role="html">
				    <imagedata fileref="images/screen3.png" format="PNG" align="center" />
			    </imageobject>
			    <caption>
				    <para>The updated application</para>
			    </caption>
		    </mediaobject>
	    </screenshot>
    
        <para>Find below a screenshot of what your project directory structure
        must look like after following the above instructions.</para>
        <screenshot>
		    <mediaobject>
			    <imageobject role="fo">
				    <imagedata fileref="images/dir-structure-endp2.png" format="PNG" align="center" />
			    </imageobject>
			    <imageobject role="html">
				    <imagedata fileref="images/dir-structure-endp2.png" format="PNG" align="center" />
			    </imageobject>
			    <caption>
				    <para>The project directory structure at the end of part 2</para>
			    </caption>
		    </mediaobject>
	    </screenshot>

    </section>
    
</chapter>
