<?xml version="1.0" encoding="UTF-8"?>
<chapter id="aop">
  <title>Spring AOP: Aspect Oriented Programming with Spring</title>

  <sect1 id="aop-introduction">
    <title>Concepts</title>

    <para><emphasis>Aspect-Oriented Programming</emphasis>
    (<emphasis>AOP</emphasis>) complements OOP by providing another way of
    thinking about program structure. While OO decomposes applications into a
    hierarchy of objects, AOP decomposes programs into
    <emphasis>aspects</emphasis> or <emphasis>concerns</emphasis>. This
    enables modularization of concerns such as transaction management that
    would otherwise cut across multiple objects. (Such concerns are often
    termed <emphasis>crosscutting</emphasis> concerns.)</para>

    <para>One of the key components of Spring is the <emphasis>AOP
    framework</emphasis>. While the Spring IoC containers (BeanFactory and
    ApplicationContext) do not depend on AOP, meaning you don't need to use
    AOP if you don't want to, AOP complements Spring IoC to provide a very
    capable middleware solution.</para>

    <para>AOP is used in Spring:</para>

    <itemizedlist>
      <listitem>
        <para>To provide declarative enterprise services, especially as a
        replacement for EJB declarative services. The most important such
        service is <emphasis>declarative transaction management</emphasis>,
        which builds on Spring's transaction abstraction.</para>
      </listitem>

      <listitem>
        <para>To allow users to implement custom aspects, complementing their
        use of OOP with AOP.</para>
      </listitem>
    </itemizedlist>

    <para>Thus you can view Spring AOP as either an enabling technology that
    allows Spring to provide declarative transaction management without EJB;
    or use the full power of the Spring AOP framework to implement custom
    aspects.</para>

    <remark>If you are interested only in generic declarative services or
    other pre-packaged declarative middleware services such as pooling, you
    don't need to work directly with Spring AOP, and can skip most of this
    chapter.</remark>

    <sect2 id="aop-introduction-defn">
      <title>AOP concepts</title>

      <para>Let us begin by defining some central AOP concepts. These terms
      are not Spring-specific. Unfortunately, AOP terminology is not
      particularly intuitive. However, it would be even more confusing if
      Spring used its own terminology.</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Aspect</emphasis>: A modularization of a concern for
          which the implementation might otherwise cut across multiple
          objects. Transaction management is a good example of a crosscutting
          concern in J2EE applications. Aspects are implemented using Spring
          as Advisors or interceptors.</para>
        </listitem>

        <listitem>
          <para><emphasis>Joinpoint</emphasis>: Point during the execution of
          a program, such as a method invocation or a particular exception
          being thrown.</para>
        </listitem>

        <listitem>
          <para><emphasis>Advice</emphasis>: Action taken by the AOP framework
          at a particular joinpoint. Different types of advice include
          "around," "before" and "throws" advice. Advice types are discussed
          below. Many AOP frameworks, including Spring, model an advice as an
          <emphasis>interceptor</emphasis>, maintaining a chain of
          interceptors "around" the joinpoint.</para>
        </listitem>

        <listitem>
          <para><emphasis>Pointcut</emphasis>: A set of joinpoints specifying
          when an advice should fire. An AOP framework must allow developers
          to specify pointcuts: for example, using regular expressions.</para>
        </listitem>

        <listitem>
          <para><emphasis>Introduction</emphasis>: Adding methods or fields to
          an advised class. Spring allows you to introduce new interfaces to
          any advised object. For example, you could use an introduction to
          make any object implement an <literal>IsModified</literal>
          interface, to simplify caching.</para>
        </listitem>

        <listitem>
          <para><emphasis>Target object</emphasis>: Object containing the
          joinpoint. Also referred to as <emphasis>advised</emphasis> or
          <emphasis>proxied</emphasis> object.</para>
        </listitem>

        <listitem>
          <para><emphasis>AOP proxy</emphasis>: Object created by the AOP
          framework, including advice. In Spring, an AOP proxy will be a JDK
          dynamic proxy or a CGLIB proxy.</para>
        </listitem>

        <listitem>
          <para><emphasis>Weaving</emphasis>: Assembling aspects to create an
          advised object. This can be done at compile time (using the AspectJ
          compiler, for example), or at runtime. Spring, like other pure Java
          AOP frameworks, performs weaving at runtime.</para>
        </listitem>
      </itemizedlist>

      <para>Different advice types include:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Around advice</emphasis>: Advice that surrounds a
          joinpoint such as a method invocation. This is the most powerful
          kind of advice. Around advices will perform custom behaviour before
          and after the method invocation. They are responsible for choosing
          whether to proceed to the joinpoint or to shortcut executing by
          returning their own return value or throwing an exception.</para>
        </listitem>

        <listitem>
          <para><emphasis>Before advice</emphasis>: Advice that executes
          before a joinpoint, but which does not have the ability to prevent
          execution flow proceeding to the joinpoint (unless it throws an
          exception).</para>
        </listitem>

        <listitem>
          <para><emphasis>Throws advice</emphasis>: Advice to be executed if a
          method throws an exception. Spring provides strongly typed throws
          advice, so you can write code that catches the exception (and
          subclasses) you're interested in, without needing to cast from
          Throwable or Exception.</para>
        </listitem>

        <listitem>
          <para><emphasis>After returning advice</emphasis>: Advice to be
          executed after a joinpoint completes normally: for example, if a
          method returns without throwing an exception.</para>
        </listitem>
      </itemizedlist>

      <para>Around advice is the most general kind of advice. Most
      interception-based AOP frameworks, such as Nanning Aspects and JBoss 4
      (as or DR2), provide only around advice.</para>

      <para>As Spring, like AspectJ, provides a full range of advice types, we
      recommend that you use the least powerful advice type that can implement
      the required behaviour. For example, if you need only to update a cache
      with the return value of a method, you are better off implementing an
      after returning advice than an around advice, although an around advice
      can accomplish the same thing. Using the most specific advice type
      provides a simpler programming model with less potential for errors. For
      example, you don't need to invoke the <literal>proceed()</literal>
      method on the MethodInvocation used for around advice, and hence can't
      fail to invoke it.</para>

      <para>The pointcut concept is the key to AOP, distinguishing AOP from
      older technologies offering interception. Pointcuts enable advice to be
      targeted independently of the OO hierarchy. For example, an around
      advice providing declarative transaction management can be applied to a
      set of methods spanning multiple objects. Thus pointcuts provide the
      structural element of AOP.</para>
    </sect2>

    <sect2 id="aop-introduction-spring-defn">
      <title>Spring AOP capabilities</title>

      <para>Spring AOP is implemented in pure Java. There is no need for a
      special compilation process. Spring AOP does not need to control the
      class loader hierarchy, and is thus suitable for use in a J2EE web
      container or application server.</para>

      <para>Spring currently supports interception of method invocations.
      Field interception is not implemented, although support for field
      interception could be added without breaking the core Spring AOP
      APIs.</para>

      <remark>Field interception arguably violates OO encapsulation. We don't
      believe it is wise in application development. If you require field
      interception, consider using AspectJ.</remark>

      <para>Spring provides classes to represent pointcuts and different
      advice types. Spring uses the term <emphasis>advisor</emphasis> for an
      object representing an aspect, including both an advice and a pointcut
      targeting it to specific joinpoints.</para>

      <para>Different advice types are <literal>MethodInterceptor</literal>
      (from the AOP Alliance interception API); and the advice interfaces
      defined in the <literal>org.springframework.aop</literal> package. All
      advices must implement the <literal>org.aopalliance.aop.Advice</literal>
      tag interface. Advices supported out the box are
      <literal>MethodInterceptor</literal> ; <literal>ThrowsAdvice</literal>;
      <literal>BeforeAdvice</literal>; and
      <literal>AfterReturningAdvice</literal>. We'll discuss advice types in
      detail below.</para>

      <para>Spring implements the <emphasis>AOP Alliance</emphasis>
      interception interfaces (<link
      linkend="???">http://www.sourceforge.net/projects/aopalliance</link>).
      Around advice must implement the AOP Alliance
      <literal>org.aopalliance.intercept.MethodInterceptor</literal>
      interface. Implementations of this interface can run in Spring or any
      other AOP Alliance compliant implementation. Currently JAC implements
      the AOP Alliance interfaces, and Nanning and Dynaop are likely to in
      early 2004.</para>

      <remark>Spring's approach to AOP differs from that of most other AOP
      frameworks. The aim is not to provide the most complete AOP
      implementation (although Spring AOP is quite capable); it is rather to
      provide a close integration between AOP implementation and Spring IoC to
      help solve common problems in enterprise applications.</remark>

      <remark>Thus, for example, Spring's AOP functionality is normally used
      in conjunction with a Spring IoC container. AOP advice is specified
      using normal bean definition syntax (although this allows powerful
      "autoproxying" capabilities); advice and pointcuts are themselves
      managed by Spring IoC: a crucial difference from other AOP
      implementations. There are some things you can't do easily or
      efficiently with Spring AOP, such as advise very fine-grained objects.
      AspectJ is probably the best choice in such cases. However, our
      experience is that Spring AOP provides an excellent solution to most
      problems in J2EE applications that are amenable to AOP.</remark>
    </sect2>

    <sect2 id="aop-introduction-proxies">
      <title>AOP Proxies in Spring</title>

      <para>Spring defaults to using JDK <emphasis>dynamic proxies</emphasis>
      for AOP proxies. This enables any interface or set of interfaces to be
      proxied.</para>

      <para>Spring can also use CGLIB proxies. This is necessary to proxy
      classes, rather than interfaces. CGLIB is used by default if a business
      object doesn't implement an interface. As it's good practice to
      <emphasis>program to interfaces rather than classes</emphasis>, business
      objects normally will implement one or more business interfaces.</para>

      <para>It is possible to force the use of CGLIB: we'll discuss this
      below, and explain why you'd want to do this.</para>

      <remark>Beyond Spring 1.0, Spring may offer additional types of AOP
      proxy, including wholly generated classes. This won't affect the
      programming model.</remark>
    </sect2>
  </sect1>

  <sect1 id="aop-introduction-pointcuts">
    <title>Pointcuts in Spring</title>

    <para>Let's look at how Spring handles the crucial pointcut
    concept.</para>

    <sect2>
      <title>Concepts</title>

      <para>Spring's pointcut model enables pointcut reuse independent of
      advice types. It's possible to target different advice using the same
      pointcut.</para>

      <para>The <literal>org.springframework.aop.Pointcut</literal> interface
      is the central interface, used to target advices to particular classes
      and methods. The complete interface is shown below:</para>

      <programlisting>public interface Pointcut {

    ClassFilter getClassFilter();

    MethodMatcher getMethodMatcher();

}</programlisting>

      <para>Splitting the <literal>Pointcut</literal> interface into two parts
      allows reuse of class and method matching parts, and fine-grained
      composition operations (such as performing a "union" with another method
      matcher).</para>

      <para>The <literal>ClassFilter</literal> interface is used to restrict
      the pointcut to a given set of target classes. If the
      <literal>matches()</literal> method always returns true, all target
      classes will be matched:</para>

      <programlisting>public interface ClassFilter {

    boolean matches(Class clazz);
}</programlisting>

      <para>The <literal>MethodMatcher</literal> interface is normally more
      important. The complete interface is shown below:</para>

      <programlisting>public interface MethodMatcher {

    boolean matches(Method m, Class targetClass);

    boolean isRuntime();

    boolean matches(Method m, Class targetClass, Object[] args);
}</programlisting>

      <para>The <literal>matches(Method, Class) </literal>method is used to
      test whether this pointcut will ever match a given method on a target
      class. This evaluation can be performed when an AOP proxy is created, to
      avoid the need for a test on every method invocation. If the 2-argument
      matches method returns true for a given method, and the
      <literal>isRuntime()</literal> method for the MethodMatcher returns
      true, the 3-argument matches method will be invoked on every method
      invocation. This enables a pointcut to look at the arguments passed to
      the method invocation immediately before the target advice is to
      execute.</para>

      <para>Most MethodMatchers are static, meaning that their
      <literal>isRuntime()</literal> method returns false. In this case, the
      3-argument matches method will never be invoked.</para>

      <remark>If possible, try to make pointcuts static, allowing the AOP
      framework to cache the results of pointcut evaluation when an AOP proxy
      is created.</remark>
    </sect2>

    <sect2>
      <title>Operations on pointcuts</title>

      <para>Spring supports operations on pointcuts: notably,
      <emphasis>union</emphasis> and <emphasis>intersection</emphasis>.</para>

      <para>Union means the methods that either pointcut matches.</para>

      <para>Intersection means the methods that both pointcuts match.</para>

      <para>Union is usually more useful.</para>

      <para>Pointcuts can be composed using the static methods in the
      <emphasis>org.springframework.aop.support.Pointcuts</emphasis> class, or
      using the <emphasis>ComposablePointcut</emphasis> class in the same
      package.</para>
    </sect2>

    <sect2>
      <title>Convenience pointcut implementations</title>

      <para>Spring provides several convenient pointcut implementations. Some
      can be used out of the box; others are intended to be subclassed in
      application-specific pointcuts.</para>

      <sect3>
        <title>Static pointcuts</title>

        <para>Static pointcuts are based on method and target class, and
        cannot take into account the method's arguments. Static pointcuts are
        sufficient--and best--for most usages. It's possible for Spring to
        evaluate a static pointcut only once, when a method is first invoked:
        after that, there is no need to evaluate the pointcut again with each
        method invocation.</para>

        <para>Let's consider some static pointcut implementations included
        with Spring.</para>

        <sect4>
          <title>Regular expression pointcuts</title>

          <para>One obvious way to specific static pointcuts is regular
          expressions. Several AOP frameworks besides Spring make this
          possible.
          <literal>org.springframework.aop.support.RegexpMethodPointcut</literal>
          is a generic regular expression pointcut, using Perl 5 regular
          expression syntax.</para>

          <para>Using this class, you can provide a list of pattern Strings.
          If any of these is a match, the pointcut will evaluate to true. (So
          the result is effectively the union of these pointcuts.)</para>

          <para>The usage is shown below:</para>

          <para><programlisting>&lt;bean id="settersAndAbsquatulatePointcut" 
    class="org.springframework.aop.support.RegexpMethodPointcut"&gt;
    &lt;property name="patterns"&gt;
        &lt;list&gt;
            &lt;value&gt;.*get.*&lt;/value&gt;
            &lt;value&gt;.*absquatulate&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting></para>

          <para>A convenience subclass of
          <literal>RegexpMethodPointcut</literal>,
          <literal>RegexpMethodPointcutAdvisor</literal>, allows us to
          reference an Advice also. (Remember that an Advice can be an
          interceptor, before advice, throws advice etc.) This simplifies
          wiring, as the one bean serves as both pointcut and advisor, as
          shown below:</para>

          <para><programlisting>&lt;bean id="settersAndAbsquatulateAdvisor" 
    class="org.springframework.aop.support.RegexpMethodPointcutAdvisor"&gt;
    &lt;property name="interceptor"&gt;
        &lt;ref local="beanNameOfAopAllianceInterceptor"/&gt;
    &lt;/property&gt;
    &lt;property name="patterns"&gt;
        &lt;list&gt;
            &lt;value&gt;.*get.*&lt;/value&gt;
            &lt;value&gt;.*absquatulate&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting></para>

          <para><emphasis>RegexpMethodPointcutAdvisor</emphasis> can be used
          with any Advice type.</para>

          <remark>The RegexpMethodPointcut class requires the Jakarta ORO
          regular expression package.</remark>
        </sect4>

        <sect4>
          <title>Attribute-driven pointcuts</title>

          <para>An important type of static pointcut is a
          <emphasis>metadata-driven</emphasis> pointcut. This uses the values
          of metadata attributes: typically, source-level metadata.</para>
        </sect4>
      </sect3>

      <sect3>
        <title>Dynamic pointcuts</title>

        <para>Dynamic pointcuts are costlier to evaluate than static
        pointcuts. They take into account method
        <emphasis>arguments</emphasis>, as well as static information. This
        means that they must be evaluated with every method invocation; the
        result cannot be cached, as arguments will vary.</para>

        <para>The main example is the <literal>control flow</literal>
        pointcut.</para>

        <sect4>
          <title>Control flow pointcuts</title>

          <para>Spring control flow pointcuts are conceptually similar to
          AspectJ <emphasis>cflow</emphasis> pointcuts, although less
          powerful. (There is currently no way to specify that a pointcut
          executes below another pointcut.) A control flow pointcut matches
          the current call stack. For example, it might fire if the joinpoint
          was invoked by a method in the <literal>com.mycompany.web</literal>
          package, or by the <literal>SomeCaller</literal> class. Control flow
          pointcuts are specified using the
          <literal>org.springframework.aop.support.ControlFlowPointcut
          </literal>class.<note>
              <para>Control flow pointcuts are significantly more expensive to
              evaluate at runtime than even other dynamic pointcuts. In Java
              1.4, the cost is about 5 times that of other dynamic pointcuts;
              in Java 1.3 more than 10.</para>
            </note></para>
        </sect4>
      </sect3>
    </sect2>

    <sect2>
      <title>Pointcut superclasses</title>

      <para>Spring provides useful pointcut superclasses to help you to
      implement your own pointcuts.</para>

      <para>Because static pointcuts are most useful, you'll probably subclass
      StaticMethodMatcherPointcut, as shown below. This requires implemented
      just one abstract method (although it's possible to override other
      methods to customize behaviour):</para>

      <para><programlisting>class TestStaticPointcut extends StaticMethodMatcherPointcut {

    public boolean matches(Method m, Class targetClass) {
        // return true if custom criteria match
    }
}</programlisting>There are also superclasses for dynamic pointcuts.</para>

      <para>You can use custom pointcuts with any advice type in Spring 1.0
      RC2 and above.</para>
    </sect2>

    <sect2>
      <title>Custom pointcuts</title>

      <para>Because pointcuts in Spring are Java classes, rather than language
      features (as in AspectJ) it's possible to declare custom pointcuts,
      whether static or dynamic. However, there is no support out of the box
      for the sophisticated pointcut expressions that can be coded in AspectJ
      syntax. However, custom pointcuts in Spring can be arbitrarily
      complex.</para>

      <remark>Later versions of Spring may offer support for "semantic
      pointcuts" as offered by JAC: for example, "all methods that change
      instance variables in the target object."</remark>
    </sect2>
  </sect1>

  <sect1>
    <title>Advice types in Spring</title>

    <para>Let's now look at how Spring AOP handles advice.</para>

    <sect2>
      <title>Advice lifecycles</title>

      <para>Spring advices can be shared across all advised objects, or unique
      to each advised object. This corresponds to
      <emphasis>per-class</emphasis> or <emphasis>per-instance</emphasis>
      advice.</para>

      <para>Per-class advice is used most often. It is appropriate for generic
      advice such as transaction advisors. These do not depend on the state of
      the proxied object or add new state; they merely act on the method and
      arguments.</para>

      <para>Per-instance advice is appropriate for introductions, to support
      mixins. In this case, the advice adds state to the proxied
      object.</para>

      <para>It's possible to use a mix of shared and per-instance advice in
      the same AOP proxy.</para>
    </sect2>

    <sect2 id="aop-introduction-advice-types">
      <title>Advice types in Spring</title>

      <para>Spring provides several advice types out of the box, and is
      extensible to support arbitrary advice types. Let us look at the basic
      concepts and standard advice types.</para>

      <sect3>
        <title>Interception around advice</title>

        <para>The most fundamental advice type in Spring is
        <emphasis>interception around advice</emphasis>.</para>

        <para>Spring is compliant with the AOP Alliance interface for around
        advice using method interception. MethodInterceptors implementing
        around advice should implement the following interface:</para>

        <programlisting>public interface MethodInterceptor extends Interceptor {
  
    Object invoke(MethodInvocation invocation) throws Throwable;
}</programlisting>

        <para>The <emphasis>MethodInvocation</emphasis> argument to the
        <emphasis>invoke()</emphasis> method exposes the method being invoked;
        the target joinpoint; the AOP proxy; and the arguments to the method.
        The <emphasis>invoke()</emphasis> method should return the
        invocation's result: the return value of the joinpoint.</para>

        <para>A simple <emphasis>MethodInterceptor</emphasis> implementation
        looks as follows:</para>

        <programlisting>public class DebugInterceptor implements MethodInterceptor {

    public Object invoke(MethodInvocation invocation) throws Throwable {
        System.out.println("Before: invocation=[" + invocation + "]");
        Object rval = invocation.proceed();
        System.out.println("Invocation returned");
        return rval;
    }
}</programlisting>

        <para>Note the call to the MethodInvocation's
        <emphasis>proceed()</emphasis> method. This proceeds down the
        interceptor chain towards the joinpoint. Most interceptors will invoke
        this method, and return its return value. However, a
        MethodInterceptor, like any around advice, can return a different
        value or throw an exception rather than invoke the proceed method.
        However, you don't want to do this without good reason!</para>

        <remark>MethodInterceptors offer interoperability with other AOP
        Alliance-compliant AOP implementations. The other advice types
        discussed in the remainder of this section implement common AOP
        concepts, but in a Spring-specific way. While there is an advantage in
        using the most specific advice type, stick with MethodInterceptor
        around advice if you are likely to want to run the aspect in another
        AOP framework. Note that pointcuts are not currently interoperable
        between frameworks, and the AOP Alliance does not currently define
        pointcut interfaces.</remark>
      </sect3>

      <sect3>
        <title>Before advice</title>

        <para>A simpler advice type is a <emphasis role="bold">before
        advice</emphasis>. This does not need a
        <literal>MethodInvocation</literal> object, since it will only be
        called before entering the method.</para>

        <para>The main advantage of a before advice is that there is no need
        to invoke the <literal>proceed() </literal>method, and therefore no
        possibility of inadvertently failing to proceed down the interceptor
        chain.</para>

        <para>The <literal>MethodBeforeAdvice</literal> interface is shown
        below. (Spring's API design would allow for field before advice,
        although the usual objects apply to field interception and it's
        unlikely that Spring will ever implement it).</para>

        <programlisting>public interface MethodBeforeAdvice extends BeforeAdvice {

    void before(Method m, Object[] args, Object target) throws Throwable;
}</programlisting>

        <para>Note the the return type is <literal>void</literal>. Before
        advice can insert custom behaviour before the joinpoint executes, but
        cannot change the return value. If a before advice throws an
        exception, this will abort further execution of the interceptor chain.
        The exception will propagate back up the interceptor chain. If it is
        unchecked, or on the signature of the invoked method, it will be
        passed directly to the client; otherwise it will be wrapped in an
        unchecked exception by the AOP proxy.</para>

        <para>An example of a before advice in Spring, which counts all
        methods that return normally:</para>

        <programlisting>public class CountingBeforeAdvice implements MethodBeforeAdvice {
    private int count;
    public void before(Method m, Object[] args, Object target) throws Throwable {
        ++count;
    }

    public int getCount() { 
        return count; 
    }
}</programlisting>

        <remark>Before advice can be used with any pointcut.</remark>
      </sect3>

      <sect3>
        <title>Throws advice</title>

        <para><emphasis role="bold">Throws advice</emphasis> is invoked after
        the return of the joinpoint if the joinpoint threw an exception.
        Spring offers typed throws advice. Note that this means that the
        <literal>org.springframework.aop.ThrowsAdvice</literal> interface does
        not contain any methods: it is a tag interface identifying that the
        given object implements one or more typed throws advice methods. These
        should be of form</para>

        <programlisting>afterThrowing([Method], [args], [target], subclassOfThrowable) </programlisting>

        <para>Only the last argument is required. Thus there from one to four
        arguments, depending on whether the advice method is interested in the
        method and arguments. The following are examples of throws
        advices.</para>

        <para>This advice will be invoked if a
        <literal>RemoteException</literal> is thrown (including
        subclasses):</para>

        <programlisting>public  class RemoteThrowsAdvice implements ThrowsAdvice {

    public void afterThrowing(RemoteException ex) throws Throwable {
        // Do something with remote exception
    }
}</programlisting>

        <para>The following advice is invoked if a
        <emphasis>ServletException</emphasis> is thrown. Unlike the above
        advice, it declares 4 arguments, so that it has access to the invoked
        method, method arguments and target object:</para>

        <programlisting>public static class ServletThrowsAdviceWithArguments implements ThrowsAdvice {

    public void afterThrowing(Method m, Object[] args, Object target, ServletException ex) {
        // Do something will all arguments
    }
}</programlisting>

        <para>The final example illustrates how these two methods could be
        used in a single class, which handles both
        <literal>RemoteException</literal> and
        <literal>ServletException</literal>. Any number of throws advice
        methods can be combined in a single class.</para>

        <programlisting>public static class CombinedThrowsAdvice implements ThrowsAdvice {

    public void afterThrowing(RemoteException ex) throws Throwable {
        // Do something with remote exception
    }
 
    public void afterThrowing(Method m, Object[] args, Object target, ServletException ex) {
        // Do something will all arguments
    }
}</programlisting>

        <remark>Throws advice can be used with any pointcut.</remark>
      </sect3>

      <sect3>
        <title>After Returning advice</title>

        <para>An after returning advice in Spring must implement the
        <emphasis>org.springframework.aop.AfterReturningAdvice</emphasis>
        interface, shown below:</para>

        <programlisting>public interface AfterReturningAdvice extends Advice {

    void afterReturning(Object returnValue, Method m, Object[] args, Object target) 
            throws Throwable;
}</programlisting>

        <para>An after returning advice has access to the return value (which
        it cannot modify), invoked method, methods arguments and
        target.</para>

        <para>The following after returning advice counts all successful
        method invocations that have not thrown exceptions:</para>

        <programlisting>public class CountingAfterReturningAdvice implements AfterReturningAdvice {
    private int count;

    public void afterReturning(Object returnValue, Method m, Object[] args, Object target) throws Throwable {
        ++count;
    }

    public int getCount() {
        return count;
    }
}</programlisting>

        <para>This advice doesn't change the execution path. If it throws an
        exception, this will be thrown up the interceptor chain instead of the
        return value.</para>

        <remark>After returning advice can be used with any pointcut.</remark>
      </sect3>

      <sect3>
        <title>Introduction advice</title>

        <para>Spring treats introduction advice as a special kind of
        interception advice.</para>

        <para>Introduction requires an <literal>IntroductionAdvisor</literal>,
        and an <literal>IntroductionInterceptor</literal>, implementing the
        following interface:</para>

        <programlisting>public interface IntroductionInterceptor extends MethodInterceptor {

    boolean implementsInterface(Class intf);
}</programlisting>

        <para>The <literal>invoke() </literal>method inherited from the AOP
        Alliance <literal>MethodInterceptor</literal> interface must implement
        the introduction: that is, if the invoked method is on an introduced
        interface, the introduction interceptor is responsible for handling
        the method call--it cannot invoke <literal>proceed()</literal>.</para>

        <para>Introduction advice cannot be used with any pointcut, as it
        applies only at class, rather than method, level. You can only use
        introduction advice with the InterceptionIntroductionAdvisor, which
        has the following methods:</para>

        <programlisting>public interface InterceptionIntroductionAdvisor extends InterceptionAdvisor {

    ClassFilter getClassFilter();

    IntroductionInterceptor getIntroductionInterceptor();

    Class[] getInterfaces();
}</programlisting>

        <para>There is no <literal>MethodMatcher</literal>, and hence no
        <literal>Pointcut</literal>, associated with introduction advice. Only
        class filtering is logical.</para>

        <para>The <literal>getInterfaces()</literal> method returns the
        interfaces introduced by this advisor.</para>

        <para>Let's look at a simple example from the Spring test suite. Let's
        suppose we want to introduce the following interface to one or more
        objects:</para>

        <para><programlisting>public interface Lockable {
    void lock();
    void unlock();
    boolean locked();
}</programlisting></para>

        <para>This illustrates a <emphasis role="bold">mixin</emphasis>. We
        want to be able to cast advised objects to Lockable, whatever their
        type, and call lock and unlock methods. If we call the lock() method,
        we want all setter methods to throw a
        <literal>LockedException</literal>. Thus we can add an aspect that
        provides the ability to make objects immutable, without them having
        any knowledge of it: a good example of AOP.</para>

        <para>Firstly, we'll need an
        <literal>IntroductionInterceptor</literal> that does the heavy
        lifting. In this case, we extend the
        <literal>org.springframework.aop.support.DelegatingIntroductionInterceptor</literal>
        convenience class. We could implement IntroductionInterceptor
        directly, but using
        <literal>DelegatingIntroductionInterceptor</literal> is best for most
        cases.</para>

        <para>The <literal>DelegatingIntroductionInterceptor</literal> is
        designed to delegate an introduction to an actual implementation of
        the introduced interface(s), concealing the use of interception to do
        so. The delegate can be set to any object using a constructor
        argument; the default delegate (when the no-arg constructor is used)
        is this. Thus in the example below, the delegate is the
        <literal>LockMixin</literal> subclass of
        <literal>DelegatingIntroductionInterceptor</literal>. Given a delegate
        (by default itself) a
        <literal>DelegatingIntroductionInterceptor</literal> instance looks
        for all interfaces implemented by the delegate (other than
        IntroductionInterceptor), and will support introductions against any
        of them. It's possible for subclasses such as
        <literal>LockMixin</literal> to call the
        <literal>suppressInterflace(Class intf) </literal>method to suppress
        interfaces that should not be exposed. However, no matter how many
        interfaces an <literal>IntroductionInterceptor</literal> is prepared
        to support, the <literal>IntroductionAdvisor</literal> used will
        control which interfaces are actually exposed. An introduced interface
        will conceal any implementation of the same interface by the
        target.</para>

        <para>Thus LockMixin subclasses
        <literal>DelegatingIntroductionInterceptor</literal> and implements
        Lockable itself. The superclass automatically picks up that Lockable
        can be supported for introduction, so we don't need to specify that.
        We could introduce any number of interfaces in this way.</para>

        <para>Note the use of the <literal>locked</literal> instance variable.
        This effectively adds additional state to that held in the target
        object.</para>

        <para><programlisting>public class LockMixin extends DelegatingIntroductionInterceptor 
    implements Lockable {

    private boolean locked;

    public void lock() {
        this.locked = true;
    }

    public void unlock() {
        this.locked = false;
    }

    public boolean locked() {
        return this.locked;
    }

    public Object invoke(MethodInvocation invocation) throws Throwable {
        if (locked() &amp;&amp; invocation.getMethod().getName().indexOf("set") == 0)
            throw new LockedException();
        return super.invoke(invocation);
    }

}</programlisting></para>

        <para>Often it isn't necessary to override the <literal>invoke()
        </literal>method: the
        <literal>DelegatingIntroductionInterceptor</literal>
        implementation--which calls the delegate method if the method is
        introduced, otherwise proceeds towards the joinpoint--is usually
        sufficient. In the present case, we need to add a check: no setter
        method can be invoked if in locked mode.</para>

        <para>The introduction advisor required is simple. All it needs to do
        is hold a distinct <literal>LockMixin</literal> instance, and specify
        the introduced interfaces--in this case, just
        <literal>Lockable</literal>. A more complex example might take a
        reference to the introduction interceptor (which would be defined as a
        prototype): in this case, there's no configuration relevant for a
        <literal>LockMixin</literal>, so we simply create it using
        <literal>new</literal>.</para>

        <para><programlisting>public class LockMixinAdvisor extends DefaultIntroductionAdvisor {

    public LockMixinAdvisor() {
        super(new LockMixin(), Lockable.class);
    }
}</programlisting></para>

        <para>We can apply this advisor very simply: it requires no
        configuration. (However, it <emphasis>is</emphasis> necessary: It's
        impossible to use an <literal>IntroductionInterceptor</literal>
        without an <emphasis>IntroductionAdvisor</emphasis>.) As usual with
        introductions, the advisor must be per-instance, as it is stateful. We
        need a different instance of <literal>LockMixinAdvisor</literal>, and
        hence <literal>LockMixin</literal>, for each advised object. The
        advisor comprises part of the advised object's state.</para>

        <para>We can apply this advisor programmatically, using the
        <literal>Advised.addAdvisor() </literal>method, or (the recommended
        way) in XML configuration, like any other advisor. All proxy creation
        choices discussed below, including "auto proxy creators," correctly
        handle introductions and stateful mixins.</para>
      </sect3>
    </sect2>
  </sect1>

  <sect1>
    <title>Advisors in Spring</title>

    <para>In Spring, an Advisor is a modularization of an aspect. Advisors
    typically incorporate both an advice and a pointcut.</para>

    <para>Apart from the special case of introductions, any advisor can be
    used with any advice.
    <literal>org.springframework.aop.support.DefaultPointcutAdvisor</literal>
    is the most commonly used advisor class. For example, it can be used with
    a <literal>MethodInterceptor</literal>, <literal>BeforeAdvice</literal> or
    <literal>ThrowsAdvice</literal>.</para>

    <para>It is possible to mix advisor and advice types in Spring in the same
    AOP proxy. For example, you could use a interception around advice, throws
    advice and before advice in one proxy configuration: Spring will
    automatically create the necessary create interceptor chain.</para>
  </sect1>

  <sect1 id="aop-pfb">
    <title>Using the ProxyFactoryBean to create AOP proxies</title>

    <para>If you're using the Spring IoC container (an ApplicationContext or
    BeanFactory) for your business objects--and you should be!--you will want
    to use one of Spring's AOP FactoryBeans. (Remember that a factory bean
    introduces a layer of indirection, enabling it to create objects of a
    different type).</para>

    <para>The basic way to create an AOP proxy in Spring is to use the
    <emphasis>org.springframework.aop.framework.ProxyFactoryBean</emphasis>.
    This gives complete control over the pointcuts and advice that will apply,
    and their ordering. However, there are simpler options that are preferable
    if you don't need such control.</para>

    <sect2 id="aop-pfb-1">
      <title>Basics</title>

      <para>The <literal>ProxyFactoryBean</literal>, like other Spring
      <literal>FactoryBean</literal> implementations, introduces a level of
      introduction. If you define a <literal>ProxyFactoryBean</literal> with
      name <literal>foo</literal>, what objects referencing
      <literal>foo</literal> see is not the
      <literal>ProxyFactoryBean</literal> instance itself, but an object
      created by the <literal>ProxyFactoryBean's</literal> implementation of
      the <literal>getObject() </literal>method. This method will create an
      AOP proxy wrapping a target object.</para>

      <para>One of the most important benefits of using a
      <literal>ProxyFactoryBean</literal> or other IoC-aware class to create
      AOP proxies, is that it means that advices and pointcuts can also be
      managed by IoC. This is a powerful feature, enabling certain approaches
      that are hard to achieve with other AOP frameworks. For example, an
      advice may itself reference application objects (besides the target,
      which should be available in any AOP framework), benefiting from all the
      pluggability provided by Dependency Injection.</para>
    </sect2>

    <sect2 id="aop-pfb-2">
      <title>JavaBean properties</title>

      <para>Like most FactoryBean implementations provided with Spring,
      <literal>ProxyFactoryBean</literal> is itself a JavaBean. Its properties
      are used to:</para>

      <itemizedlist>
        <listitem>
          <para>Specify the target you want to proxy</para>
        </listitem>

        <listitem>
          <para>Specify whether to use CGLIB</para>
        </listitem>
      </itemizedlist>

      <para>Some key properties are inherited from
      <literal>org.springframework.aop.framework.ProxyConfig</literal>: the
      superclass for all AOP proxy factories. These include:</para>

      <itemizedlist>
        <listitem>
          <para><literal>proxyTargetClass</literal>: true if we should proxy
          the target class, rather than its interfaces. If this is true we
          need to use CGLIB.</para>
        </listitem>

        <listitem>
          <para><literal>optimize</literal>: whether to apply aggressive
          optimization to created proxies. Don't use this setting unless you
          understand how the relevant AOP proxy handles optimization. This is
          currently used only for CGLIB proxies; it has no effect with JDK
          dynamic proxies (the default).</para>
        </listitem>

        <listitem>
          <para><literal>frozen</literal>: whether advice changes should be
          disallowed once the proxy factory has been configured. Default is
          false.</para>
        </listitem>

        <listitem>
          <para><literal>exposeProxy</literal>: whether the current proxy
          should be exposed in a ThreadLocal so that it can be accessed by the
          target. (It's available via the MethodInvocation without the need
          for a ThreadLocal.) If a target needs to obtain the proxy and
          exposeProxy is true, the target can use the
          <literal>AopContext.currentProxy()</literal> method.</para>
        </listitem>

        <listitem>
          <para><literal>aopProxyFactory</literal>: the implementation of
          AopProxyFactory to use. Offers a way of customizing whether to use
          dynamic proxies, CGLIB or any other proxy strategy. The default
          implementation will choose dynamic proxies or CGLIB appropriately.
          There should be no need to use this property; it's intended to allow
          the addition of new proxy types in Spring 1.1.</para>
        </listitem>
      </itemizedlist>

      <para>Other properties specific to <literal>ProxyFactory</literal>Bean
      include:</para>

      <itemizedlist>
        <listitem>
          <para><literal>proxyInterfaces</literal>: array of String interface
          names. If this isn't supplied, a CGLIB proxy for the target class
          will be used</para>
        </listitem>

        <listitem>
          <para><literal>interceptorNames</literal>: String array of Advisor,
          interceptor or other advice names to apply. Ordering is significant.
          The names are bean names in the current factory, including bean
          names from ancestor factories.</para>
        </listitem>

        <listitem>
          <para>singleton: whether or not the factory should return a single
          object, no matter how often the <literal>getObject()</literal>
          method is called. Several <literal>FactoryBean</literal>
          implementations offer such a method. Default value is true. If you
          want to use stateful advice--for example, for stateful mixins--use
          prototype advices along with a singleton value of false.</para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2>
      <title>Proxying interfaces</title>

      <para>Let's look at a simple example of ProxyFactoryBean in action. This
      example involves:</para>

      <itemizedlist>
        <listitem>
          <para>A target bean that will be proxied. This is the "personTarget"
          bean definition in the example below.</para>
        </listitem>

        <listitem>
          <para>An Advisor and an Interceptor used to provide advice.</para>
        </listitem>

        <listitem>
          <para>An AOP proxy bean definition specifying the target object (the
          personTarget bean) and the interfaces to proxy, along with the
          advices to apply.</para>
        </listitem>
      </itemizedlist>

      <para><programlisting>&lt;bean id="personTarget" class="com.mycompany.PersonImpl"&gt;
    &lt;property name="name"&gt;&lt;value&gt;Tony&lt;/value&gt;&lt;/property&gt;
    &lt;property name="age"&gt;&lt;value&gt;51&lt;/value&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;bean id="myAdvisor" class="com.mycompany.MyAdvisor"&gt;
    &lt;property name="someProperty"&gt;&lt;value&gt;Custom string property value&lt;/value&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;bean id="debugInterceptor" class="org.springframework.aop.interceptor.NopInterceptor"&gt;
&lt;/bean&gt;

&lt;bean id="person" 
    class="org.springframework.aop.framework.ProxyFactoryBean"&gt;
    &lt;property name="proxyInterfaces"&gt;&lt;value&gt;com.mycompany.Person&lt;/value&gt;&lt;/property&gt;

    &lt;property name="target"&gt;&lt;ref local="personTarget"/&gt;&lt;/property&gt;
    &lt;property name="interceptorNames"&gt;
        &lt;list&gt;
            &lt;value&gt;myAdvisor&lt;/value&gt;
            &lt;value&gt;debugInterceptor&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting></para>

      <para>Note that the <literal>interceptorNames</literal> property takes a
      list of String: the bean names of the interceptor or advisors in the
      current factory. Advisors, interceptors, before, after returning and
      throws advice objects can be used. The ordering of advisors is
      significant.</para>

      <remark>You might be wondering why the list doesn't hold bean
      references. The reason for this is that if the ProxyFactoryBean's
      singleton property is set to false, it must be able to return
      independent proxy instances. If any of the advisors is itself a
      prototype, and independent instance would need to be returned, so it's
      necessary to be able to obtain an instance of the prototype from the
      factory; holding a reference isn't sufficient.</remark>

      <para>The "person" bean definition above can be used in place of a
      Person implementation, as follows:</para>

      <programlisting>Person person = (Person) factory.getBean("person");</programlisting>

      <para>Other beans in the same IoC context can express a strongly typed
      dependency on it, as with an ordinary Java object:</para>

      <para><programlisting>&lt;bean id="personUser" class="com.mycompany.PersonUser"&gt;
    &lt;property name="person"&gt;&lt;ref local="person" /&gt;&lt;/property&gt;
&lt;/bean&gt;</programlisting></para>

      <para>The <literal>PersonUser</literal> class in this example would
      expose a property of type Person. As far as it's concerned, the AOP
      proxy can be used transparently in place of a "real" person
      implementation. However, its class would be a dynamic proxy class. It
      would be possible to cast it to the <literal>Advised</literal> interface
      (discussed below).</para>
    </sect2>

    <sect2>
      <title>Proxying classes</title>

      <para>What if you need to proxy a class, rather than one or more
      interfaces?</para>

      <para>Imagine that in our example above, there was no
      <literal>Person</literal> interface: we needed to advise a class called
      <literal>Person</literal> that didn't implement any business interface.
      In this case, you can configure Spring to use CGLIB proxying, rather
      than dynamic proxies. Simply set the <literal>proxyTargetClass</literal>
      property on the ProxyFactoryBean above to true. While it's best to
      program to interfaces, rather than classes, the ability to advise
      classes that don't implement interfaces can be useful when working with
      legacy code. (In general, Spring isn't prescriptive. While it makes it
      easy to apply good practices, it avoids forcing a particular
      approach.)</para>

      <para>If you want to you can force the use of CGLIB in any case, even if
      you do have interfaces.</para>

      <para>CGLIB proxying works by generating a subclass of the target class
      at runtime. Spring configures this generated subclass to delegate method
      calls to the original target: the subclass is used to implement the
      <emphasis>Decorator</emphasis> pattern, weaving in the advice.</para>

      <para>CGLIB proxying should generally be transparent to users. However,
      there are some issues to consider:</para>

      <itemizedlist>
        <listitem>
          <para><literal>Final</literal> methods can't be advised, as they
          can't be overridden.</para>
        </listitem>

        <listitem>
          <para>You'll need the CGLIB 2 binaries on your classpath; dynamic
          proxies are available with the JDK</para>
        </listitem>
      </itemizedlist>

      <para>There's little performance difference between CGLIB proxying and
      dynamic proxies. As of Spring 1.0, dynamic proxies are slightly faster.
      However, this may change in the future. Performance should not be a
      decisive consideration in this case.</para>
    </sect2>
  </sect1>

  <sect1 id="aop-tfb">
    <title>Convenient proxy creation</title>

    <para>Often we don't need the full power of the
    <literal>ProxyFactoryBean</literal>, because we're only interested in one
    aspect: For example, transaction management.</para>

    <para>There are a number of convenience factories we can use to create AOP
    proxies when we want to focus on a specific aspect. These are discussed in
    other chapters, so we'll just provide a quick survey of some of them
    here.</para>

    <sect2>
      <title>TransactionProxyFactoryBean</title>

      <para>The <emphasis role="bold">jPetStore</emphasis> sample application
      shipped with Spring shows the use of the
      TransactionProxyFactoryBean.</para>

      <para>TThe <literal>TransactionProxyFactoryBean</literal> is a subclass
      of <literal>ProxyConfig</literal>, so basic configuration is shared with
      <literal>ProxyFactoryBean</literal>. (See list of
      <literal>ProxyConfig</literal> properties above.)</para>

      <para>The following example from the jPetStore illustrates how this
      works. As with a <literal>ProxyFactoryBean</literal>, there is a target
      bean definition. Dependencies should be expressed on the proxied factory
      bean definition ("petStore" here), rather than the target POJO
      ("petStoreTarget").</para>

      <para>The <literal>TransactionProxyFactoryBean</literal> requires a
      target, and information about "transaction attributes," specifying which
      methods should be transactional and the required propagation and other
      settings:</para>

      <para><programlisting>&lt;bean id="petStoreTarget" class="org.springframework.samples.jpetstore.domain.logic.PetStoreImpl"&gt;
    &lt;property name="accountDao"&gt;&lt;ref bean="accountDao"/&gt;&lt;/property&gt;
    &lt;!-- Other dependencies omitted --&gt;
&lt;/bean&gt;

&lt;bean id="petStore" 
    class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"&gt;
    &lt;property name="transactionManager"&gt;&lt;ref bean="transactionManager"/&gt;&lt;/property&gt;
    &lt;property name="target"&gt;&lt;ref local="petStoreTarget"/&gt;&lt;/property&gt;
    &lt;property name="transactionAttributes"&gt;
        &lt;props&gt;
            &lt;prop key="insert*"&gt;PROPAGATION_REQUIRED&lt;/prop&gt;
            &lt;prop key="update*"&gt;PROPAGATION_REQUIRED&lt;/prop&gt;
            &lt;prop key="*"&gt;PROPAGATION_REQUIRED,readOnly&lt;/prop&gt;
        &lt;/props&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting></para>

      <para>The <literal>TransactionProxyFactoryBean</literal> automatically
      creates a transaction advisor, including a pointcut based on the
      transaction attributes, so only transactional methods are
      advised.</para>

      <para>The <literal>TransactionProxyFactoryBean</literal> allows the
      specification of "pre" and "post" advice, using the preInterceptors and
      postInterceptors properties. These take Object arrays of interceptors,
      other advice or Advisors to place in the interception chain before or
      after the transaction interceptor. These can be populated using a
      &lt;list&gt; element in XML bean definitions, as follows:</para>

      <para><programlisting>&lt;property name="preInterceptors"&gt;
    &lt;list&gt;
        &lt;ref local="authorizationInterceptor"/&gt;
        &lt;ref local="notificationBeforeAdvice"/&gt;
    &lt;/list&gt;
&lt;/property&gt;
&lt;property name="postInterceptors"&gt;
    &lt;list&gt;
        &lt;ref local="myAdvisor"/&gt;
    &lt;/list&gt;
&lt;/property&gt;</programlisting></para>

      <para>These properties could be added to the "petStore" bean definition
      above. A common usage is to combine transactionality with declarative
      security: a similar approach to that offered by EJB.</para>

      <para>Because of the use of actual instance references, rather than bean
      names as in <literal>ProxyFactoryBean</literal>, pre and post
      interceptors can be used only for shared-instance advice. Thus they are
      not useful for stateful advice: for example, in mixins. This is
      consistent with the TransactionProxyFactoryBean's purpose. It provides a
      simple way of doing common transaction setup. If you need more complex,
      customized, AOP, consider using the generic
      <literal>ProxyFactoryBean</literal>, or an auto proxy creator (see
      below).</para>

      <remark>Especially if we view Spring AOP as, in many cases, a
      replacement for EJB, we find that most advice is fairly generic and uses
      a shared-instance model. Declarative transaction management and security
      checks are classic examples.</remark>

      <para>The <literal>TransactionProxyFactoryBean</literal> depends on a
      <literal>PlatformTransactionManager</literal> implementation via its
      <literal>transactionManager</literal> JavaBean property. This allows for
      pluggable transaction implementation, based on JTA, JDBC or other
      strategies. This relates to the Spring transaction abstraction, rather
      than AOP. We'll discuss the transaction infrastructure in the next
      chapter.</para>

      <remark>If you're interested only in declarative transaction management,
      the TransactionProxyFactoryBean is a good solution, and simpler than
      using a ProxyFactoryBean.</remark>
    </sect2>

    <sect2>
      <title>EJB proxies</title>

      <para>Other dedicated proxies create proxies for EJBs, enabling the EJB
      "business methods" interface to be used directly by calling code.
      Calling code does not need to perform JNDI lookups or use EJB create
      methods: A significant improvement in readability and architectural
      flexibility.</para>

      <para>See the chapter on Spring EJB services in this manual for further
      information.</para>
    </sect2>
  </sect1>

  <sect1 id="aop-prog">
    <title>Creating AOP proxies programmatically with the ProxyFactory</title>

    <para>It's easy to create AOP proxies programmatically using Spring. This
    enables you to use Spring AOP without dependency on Spring IoC.</para>

    <para>The following listing shows creation of a proxy for a target object,
    with one interceptor and one advisor. The interfaces implemented by the
    target object will automatically be proxied:</para>

    <para><programlisting>ProxyFactory factory = new ProxyFactory(myBusinessInterfaceImpl);
factory.addInterceptor(myMethodInterceptor);
factory.addAdvisor(myAdvisor);
MyBusinessInterface tb = (MyBusinessInterface) factory.getProxy();</programlisting></para>

    <para>The first step is to contruct a object of type
    <literal>org.springframework.aop.framework.ProxyFactory</literal>. You can
    create this with a target object, as in the above example, or specify the
    interfaces to be proxied in an alternate constructor.</para>

    <para>You can add interceptors or advisors, and manipulate them for the
    life of the ProxyFactory. If you add an
    IntroductionInterceptionAroundAdvisor you can cause the proxy to implement
    additional interfaces.</para>

    <para>There are also convenience methods on ProxyFactory (inherited from
    AdvisedSupport) allowing you to add other advice types such as before and
    throws advice. AdvisedSupport is the superclass of both ProxyFactory and
    ProxyFactoryBean.</para>

    <remark>Integrating AOP proxy creation with the IoC framework is best
    practice in most applications. We recommend that you externalize
    configuration from Java code with AOP, as in general.</remark>
  </sect1>

  <sect1>
    <title>Manipulating advised objects</title>

    <para>However you create AOP proxies, you can manipulate them using the
    <literal>org.springframework.aop.framework.Advised</literal> interface.
    Any AOP proxy can be cast to this interface, whatever other interfaces it
    implements. This interface includes the following methods:</para>

    <programlisting>void addInterceptor(Interceptor interceptor) throws AopConfigException;

void addInterceptor(int pos, Interceptor interceptor) 
        throws AopConfigException;

void addAdvisor(Advisor advisor) throws AopConfigException;

void addAdvisor(int pos, Advisor advisor) throws AopConfigException;

int indexOf(Advisor advisor);

boolean removeAdvisor(Advisor advisor) throws AopConfigException;

void removeAdvisor(int index) throws AopConfigException;

boolean replaceAdvisor(Advisor a, Advisor b) throws AopConfigException;

boolean isFrozen();</programlisting>

    <para>The <literal>getAdvisors()</literal> method will return an Advisor
    for every advisor, interceptor or other advice type that has been added to
    the factory. If you added an Advisor, the returned advisor at this index
    will be the object that you added. If you added an interceptor or other
    advice type, Spring will have wrapped this in an advisor with a pointcut
    that always returns true. Thus if you added a
    <literal>MethodInterceptor</literal>, the advisor returned for this index
    will be an <literal>DefaultPointcutAdvisor</literal> returning your
    <literal>MethodInterceptor</literal> and a pointcut that matches all
    classes and methods.</para>

    <para>The <literal>addAdvisor()</literal> methods can be used to add any
    Advisor. Usually this will be the generic
    <literal>DefaultPointcutAdvisor</literal>, which can be used with any
    advice or pointcut (but not for introduction).</para>

    <para>By default, it's possible to add or remove advisors or interceptors
    even once a proxy has been created. The only restriction is that it's
    impossible to add or remove an introduction advisor, as existing proxies
    from the factory will not show the interface change. (You can obtain a new
    proxy from the factory to avoid this problem.)</para>

    <remark>It's questionable whether it's advisable (no pun intended) to
    modify advice on a business object in production, although there are no
    doubt legitimate usage cases. However, it can be very useful in
    development: for example, in tests. I have sometimes found it very useful
    to be able to add test code in the form of an interceptor or other advice,
    getting inside a method invocation I want to test. (For example, the
    advice can get inside a transaction created for that method: for example,
    to run SQL to check that a database was correctly updated, before marking
    the transaction for roll back.)</remark>

    <para>Depending on how you created the proxy, you can usually set a
    <literal>frozen</literal> flag, in which case the
    <literal>Advised</literal> <literal>isFrozen()</literal> method will
    return true, and any attempts to modify advice through addition or removal
    will result in an <literal>AopConfigException</literal>. The ability to
    freeze the state of an advised object is useful in some cases: For
    example, to prevent calling code removing a security interceptor. It may
    also be used in Spring 1.1 to allow aggressive optimization if runtime
    advice modification is known not to be required.</para>
  </sect1>

  <sect1 id="aop-autoproxy">
    <title>Using the "autoproxy" facility</title>

    <para>So far we've considered explicit creation of AOP proxies using a
    <literal>ProxyFactoryBean</literal> or similar factory bean.</para>

    <para>Spring also allows us to use "autoproxy" bean definitions, which can
    automatically proxy selected bean definitions. This is built on Spring
    "bean post processor" infrastructure, which enables modification of any
    bean definition as the container loads.</para>

    <para>In this model, you set up some special bean definitions in your XML
    bean definition file configuring the auto proxy infrastructure. This
    allows you just to declare the targets eligible for autoproxying: you
    don't need to use <literal>ProxyFactoryBean</literal>.</para>

    <para>There are two ways to do this:</para>

    <itemizedlist>
      <listitem>
        <para>Using an autoproxy creator that refers to specific beans in the
        current context</para>
      </listitem>

      <listitem>
        <para>A special case of autoproxy creation that deserves to be
        considered separately; autoproxy creation driven by source-level
        metadata attributes</para>
      </listitem>
    </itemizedlist>

    <sect2 id="aop-autoproxy-choices">
      <title>Autoproxy bean definitions</title>

      <para>The <literal>org.springframework.aop.framework.autoproxy</literal>
      package provides the following standard autoproxy creators.</para>

      <sect3>
        <title>BeanNameAutoProxyCreator</title>

        <para>The BeanNameAutoProxyCreator automatically creates AOP proxies
        for beans with names matching literal values or wildcards.</para>

        <para><programlisting>&lt;bean id="jdkBeanNameProxyCreator" 
    class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"&gt;
    &lt;property name="beanNames"&gt;&lt;value&gt;jdk*,onlyJdk&lt;/value&gt;&lt;/property&gt;
    &lt;property name="interceptorNames"&gt;
        &lt;list&gt;
            &lt;value&gt;myInterceptor&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting></para>

        <para>As with <literal>ProxyFactoryBean</literal>, there is an
        interceptorNames property rather than a list of interceptor, to allow
        correct behaviour for prototype advisors. Named "interceptors" can be
        advisors or any advice type.</para>

        <para>As with auto proxying in general, the main point of using
        <literal>BeanNameAutoProxyCreator</literal> is to apply the same
        configuration consistently to multiple objects, and with minimal
        volume of configuration. It is a popular choice for applying
        declarative transactions to multiple objects.</para>

        <para>Bean definitions whose names match, such as "jdkMyBean" and
        "onlyJdk" in the above example, are plain old bean definitions with
        the target class. An AOP proxy will be created automatically by the
        <literal>BeanNameAutoProxyCreator</literal>. The same advice will be
        applied to all matching beans. Note that if advisors are used (rather
        than the interceptor in the above example), the pointcuts may apply
        differently to different beans.</para>
      </sect3>

      <sect3>
        <title>AdvisorAutoProxyCreator</title>

        <para>A more general and extremely powerful auto proxy creator is
        <literal>AdvisorAutoProxyCreator</literal>. This will automagically
        apply eligible advisors in the current context, without the need to
        include specific bean names in the autoproxy advisor's bean
        definition. It offers the same merit of consistent configuration and
        avoidance of duplication as
        <literal>BeanNameAutoProxyCreator</literal>.</para>

        <para>Using this mechanism involves:</para>

        <itemizedlist>
          <listitem>
            <para>Specifying an <literal>AdvisorAutoProxyCreator</literal>
            bean definition</para>
          </listitem>

          <listitem>
            <para>Specifying any number of Advisors in the same or related
            contexts. Note that these <emphasis>must</emphasis> be Advisors,
            not just interceptors or other advices. This is necessary because
            there must be a pointcut to evaluate, to check the eligibility of
            each advice to candidate bean defiitions.</para>
          </listitem>
        </itemizedlist>

        <para>The <literal>AdvisorAutoProxyCreator</literal> will
        automatically evaluate the pointcut contained in each advisor, to see
        what (if any) advice it should apply to each business object (such as
        "businessObject1" and "businessObject2" in the example).</para>

        <para>This means that any number of advisors can be applied
        automatically to each business object. If no pointcut in any of the
        advisors matches any method in a business object, the object will not
        be proxied. As bean definitions are added for new business objects,
        they will automatically be proxied if necessary.</para>

        <para>Autoproxying in general has the advantage of making it
        impossible for callers or dependencies to obtain an un-advised object.
        Calling getBean("businessObject1") on this ApplicationContext will
        return an AOP proxy, not the target business object.</para>

        <para><programlisting>&lt;bean id="autoProxyCreator"
    class="org.springframework.aop.framework.autoproxy.AdvisorAutoProxyCreator"&gt;
&lt;/bean&gt;

&lt;bean id="txAdvisor"
    autowire="constructor"
    class="org.springframework.transaction.interceptor.TransactionAttributeSourceTransactionAroundAdvisor"&gt;
&lt;/bean&gt;

&lt;bean id="customAdvisor"
    class="com.mycompany.MyAdvisor"&gt;
&lt;/bean&gt;

&lt;bean id="businessObject1"
    class="com.mycompany.BusinessObject1"&gt;
    &lt;!-- Properties omitted --&gt;
&lt;/bean&gt;

&lt;bean id="businessObject2"
    class="com.mycompany.BusinessObject2"&gt;
&lt;/bean&gt;</programlisting></para>

        <para>The <literal>AdvisorAutoProxyCreator</literal> is very useful if
        you want to apply the same advice consistently to many business
        objects. Once the infrastructure definitions are in place, you can
        simply add new business objects without including specific proxy
        configuration. You can also drop in additional aspects very
        easily--for example, tracing or performance monitoring aspects--with
        minimal change to configuration.</para>

        <para>The AdvisorAutoProxyCreator offers support for filtering (using
        a naming convention so that only certain advisors are evaluated,
        allowing use of multiple, differently configured,
        AdvisorAutoProxyCreators in the same factory) and ordering. Advisors
        can implement the <literal>org.springframework.core.Ordered</literal>
        interface to ensure correct ordering if this is an issue. The
        TransactionAttributeSourceTransactionAroundAdvisor used in the above
        example has a high order value, as most other advice will normally
        want to be run in a transaction context.</para>
      </sect3>

      <sect3>
        <title>AbstractAdvisorAutoProxyCreator</title>

        <para>This is the superclass of AdvisorAutoProxyCreator. You can
        create your own autoproxy creators by subclassing this class, in the
        unlikely event that advisor definitions offer insufficient
        customization to the behaviour of the framework
        <literal>AdvisorAutoProxyCreator</literal>.</para>
      </sect3>
    </sect2>

    <sect2 id="aop-autoproxy-metadata">
      <title>Using metadata-driven autoproxying</title>

      <para>A particularly important type of autoproxying is driven by
      metadata. This produces a similar programming model to .NET
      <literal>ServicedComponents</literal>. Instead of using XML deployment
      descriptors as in EJB, configuration for transaction management and
      other enterprise services is held in source-level attributes.</para>

      <para>In this case, you use the
      <literal>AdvisorAutoProxyCreator</literal>, in combination with Advisors
      that understand metadata attributes. The metadata specifics are held in
      the pointcut part of the candidate advisors, rather than in the
      autoproxy creation class itself.</para>

      <para>This is really a special case of the
      <literal>AdvisorAutoProxyCreator</literal>, but deserves consideration
      on its own. (The metadata-aware code is in the pointcuts contained in
      the advisors, not the AOP framework itself.)</para>

      <para>The <literal>/attributes</literal> directory of the jPetStore
      sample application shows the use of attribute-driven autoproxying. In
      this case, there's no need to use the
      <literal>TransactionProxyFactoryBean</literal>. Simply defining
      transactional attributes on business objects is sufficient, because of
      the use of metadata-aware pointcuts. The bean definitions include the
      following code, in <literal>/WEB-INF/declarativeServices.xml</literal>.
      Note that this is generic, and can be used outside the jPetStore:</para>

      <para><programlisting>&lt;bean id="autoproxy" 
    class="org.springframework.aop.framework.autoproxy.AdvisorAutoProxyCreator"&gt;	
&lt;/bean&gt;

&lt;bean id="transactionAttributeSource"
    class="org.springframework.transaction.interceptor.AttributesTransactionAttributeSource"
    autowire="constructor"&gt;
&lt;/bean&gt;

&lt;bean id="transactionInterceptor"
    class="org.springframework.transaction.interceptor.TransactionInterceptor"
    autowire="byType"&gt;
&lt;/bean&gt;

&lt;bean id="transactionAdvisor"
    class="org.springframework.transaction.interceptor.TransactionAttributeSourceTransactionAroundAdvisor"
    autowire="constructor" &gt;
&lt;/bean&gt;

&lt;bean id="attributes"
    class="org.springframework.metadata.commons.CommonsAttributes"
/&gt;</programlisting></para>

      <para>The <literal>AdvisorAutoProxyCreator</literal> bean
      definition--called "advisor" in this case, but the name is not
      significant--will pick up all eligible pointcuts in the current
      application context. In this case, the "transactionAdvisor" bean
      definition, of type
      <literal>TransactionAttributeSourceTransactionAroundAdvisor</literal>,
      will apply to classes or methods carrying a transaction attribute. The
      TransactionAttributeSourceTransactionAroundAdvisor depends on a
      TransactionInterceptor, via constructor dependency. The example resolves
      this via autowiring. The
      <literal>AttributesTransactionAttributeSource</literal> depends on an
      implementation of the
      <literal>org.springframework.metadata.Attributes</literal> interface. In
      this fragement, the "attributes" bean satisfies this, using the Jakarta
      Commons Attributes API to obtain attribute information. (The application
      code must have been compiled using the Commons Attributes compilation
      task.)</para>

      <para>The <literal>TransactionInterceptor</literal> defined here depends
      on a <literal>PlatformTransactionManager</literal> definition, which is
      not included in this generic file (although it could be) because it will
      be specific to the application's transaction requirements (typically
      JTA, as in this example, or Hibernate, JDO or JDBC):</para>

      <programlisting>&lt;bean id="transactionManager" 
    class="org.springframework.transaction.jta.JtaTransactionManager"/&gt;</programlisting>

      <remark>If you require only declarative transaction management, using
      these generic XML definitions will result in Spring automatically
      proxying all classes or methods with transaction attributes. You won't
      need to work directly with AOP, and the programming model is similar to
      that of .NET ServicedComponents.</remark>

      <para>This mechanism is extensible. It's possible to do autoproxying
      based on custom attributes. You need to:</para>

      <itemizedlist>
        <listitem>
          <para>Define your custom attribute.</para>
        </listitem>

        <listitem>
          <para>Specify an Advisor with the necessary advice, including a
          pointcut that is triggered by the presence of the custom attribute
          on a class or method. You may be able to use an existing advice,
          merely implementing a static pointcut that picks up the custom
          attribute.</para>
        </listitem>
      </itemizedlist>

      <para>It's possible for such advisors to be unique to each advised class
      (for example, mixins): they simply need to be defined as prototype,
      rather than singleton, bean definitions. For example, the
      <literal>LockMixin</literal> introduction interceptor from the Spring
      test suite, shown above. could be used in conjunction with an
      attribute-driven pointcut to target a mixin, as shown here. We use the
      generic <literal>DefaultPointcutAdvisor</literal>, configured using
      JavaBean properties:</para>

      <para><programlisting>&lt;bean id="lockMixin"
    class="org.springframework.aop.LockMixin"
    singleton="false"
/&gt;

&lt;bean id="lockableAdvisor"
    class="org.springframework.aop.support.DefaultPointcutAdvisor"
    singleton="false"
&gt;
    &lt;property name="pointcut"&gt;
        &lt;ref local="myAttributeAwarePointcut"/&gt;
    &lt;/property&gt;
    &lt;property name="advice"&gt;
        &lt;ref local="lockMixin"/&gt;
    &lt;/property&gt;
&lt;/bean&gt;

&lt;bean id="anyBean" class="anyclass" ...</programlisting></para>

      <para>If the attribute aware pointcut matches any methods in the
      <literal>anyBean</literal> or other bean definitions, the mixin will be
      applied. Note that both <literal>lockMixin</literal> and
      <literal>lockableAdvisor</literal> definitions are prototypes. The
      <literal>myAttributeAwarePointcut</literal> pointcut can be a singleton
      definition, as it doesn't hold state for individual advised
      objects.</para>
    </sect2>
  </sect1>

  <sect1 id="aop-targetsource">
    <title>Using TargetSources</title>

    <para>Spring offers the concept of a <emphasis>TargetSource</emphasis>,
    expressed in the <literal>org.springframework.aop.TargetSource</literal>
    interface. This interface is responsible for returning the "target object"
    implementing the joinpoint. The <literal>TargetSource</literal>
    implementation is asked for a target instance each time the AOP proxy
    handles a method invocation.</para>

    <para>Developers using Spring AOP don't normally need to work directly
    with TargetSources, but this provides a powerful means of supporting
    pooling, hot swappable and other sophisticated targets. For example, a
    pooling TargetSource can return a different target instance for each
    invocation, using a pool to manage instances.</para>

    <para>If you do not specify a TargetSource, a default implementation is
    used that wraps a local object. The same target is returned for each
    invocation (as you would expect).</para>

    <para>Let's look at the standard target sources provided with Spring, and
    how you can use them.</para>

    <remark>When using a custom target source, your target will usually need
    to be a prototype rather than a singleton bean definition. This allows
    Spring to create a new target instance when required.</remark>

    <sect2 id="aop-ts-swap">
      <title>Hot swappable target sources</title>

      <para>The
      <literal>org.springframework.aop.target.HotSwappableTargetSource</literal>
      exists to allow the target of an AOP proxy to be switched while allowing
      callers to keep their references to it.</para>

      <para>Changing the target source's target takes effect immediately. The
      <literal>HotSwappableTargetSource</literal> is threadsafe.</para>

      <para>You can change the target via the <literal>swap()</literal> method
      on HotSwappableTargetSource as follows:</para>

      <para><programlisting>HotSwappableTargetSource swapper = 
    (HotSwappableTargetSource) beanFactory.getBean("swapper");
Object oldTarget = swapper.swap(newTarget);</programlisting></para>

      <para>The XML definitions required look as follows:</para>

      <para><programlisting>&lt;bean id="initialTarget" class="mycompany.OldTarget"&gt;
&lt;/bean&gt;

&lt;bean id="swapper" 
    class="org.springframework.aop.target.HotSwappableTargetSource"&gt;
    &lt;constructor-arg&gt;&lt;ref local="initialTarget"/&gt;&lt;/constructor-arg&gt;
&lt;/bean&gt;

&lt;bean id="swappable" 
    class="org.springframework.aop.framework.ProxyFactoryBean"
&gt;
    &lt;property name="targetSource"&gt;
        &lt;ref local="swapper"/&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting></para>

      <para>The above <literal>swap()</literal> call changes the target of the
      swappable bean. Clients who hold a reference to that bean will be
      unaware of the change, but will immediately start hitting the new
      target.</para>

      <para>Although this example doesn't add any advice--and it's not
      necessary to add advice to use a <literal>TargetSource</literal>--of
      course any <literal>TargetSource</literal> can be used in conjunction
      with arbitrary advice.</para>
    </sect2>

    <sect2 id="aop-ts-pool">
      <title>Pooling target sources</title>

      <para>Using a pooling target source provides a similar programming model
      to stateless session EJBs, in which a pool of identical instances is
      maintained, with method invocations going to free objects in the
      pool.</para>

      <para>A crucial difference between Spring pooling and SLSB pooling is
      that Spring pooling can be applied to any POJO. As with Spring in
      general, this service can be applied in a non-invasive way.</para>

      <para>Spring provides out-of-the-box support for Jakarta Commons Pool
      1.1, which provides a fairly efficient pooling implementation. You'll
      need the commons-pool Jar on your application's classpath to use this
      feature. It's also possible to subclass
      <literal>org.springframework.aop.target.AbstractPoolingTargetSource</literal>
      to support any other pooling API.</para>

      <para>Sample configuration is shown below:</para>

      <para><programlisting>&lt;bean id="businessObjectTarget" class="com.mycompany.MyBusinessObject" 
    singleton="false"&gt;
    ... properties omitted
&lt;/bean&gt;

&lt;bean id="poolTargetSource" 
    class="org.springframework.aop.target.CommonsPoolTargetSource"&gt;
    &lt;property name="targetBeanName"&gt;&lt;value&gt;businessObject&lt;/value&gt;&lt;/property&gt;
    &lt;property name="maxSize"&gt;&lt;value&gt;25&lt;/value&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;bean id="businessObject" 
    class="org.springframework.aop.framework.ProxyFactoryBean"
&gt;
    &lt;property name="targetSource"&gt;&lt;ref local="poolTargetSource"/&gt;&lt;/property&gt;
    &lt;property name="interceptorNames"&gt;&lt;value&gt;myInterceptor&lt;/value&gt;&lt;/property&gt;
&lt;/bean&gt;</programlisting></para>

      <para>Note that the target object--"businessObjectTarget" in the
      example--<emphasis>must</emphasis> be a prototype. This allows the
      <literal>PoolingTargetSource</literal> implementation to create new
      instances of the target to grow the pool as necessary. See the Javadoc
      for <literal>AbstractPoolingTargetSource</literal> and the concrete
      subclass you wish to use for information about it's properties: maxSize
      is the most basic, and always guaranteed to be present.</para>

      <para>In this case, "myInterceptor" is the name of an interceptor that
      would need to be defined in the same IoC context. However, it isn't
      necessary to specify interceptors to use pooling. If you want only
      pooling, and no other advice, don't set the interceptorNames property at
      all.</para>

      <para>It's possible to configure Spring so as to be able to cast any
      pooled object to the
      <literal>org.springframework.aop.target.PoolingConfig</literal>
      interface, which exposes information about the configuration and current
      size of the pool through an introduction. You'll need to define an
      advisor like this:</para>

      <para><programlisting>&lt;bean id="poolConfigAdvisor" 
    class="org.springframework.beans.factory.config.MethodInvokingFactoryBean"&gt;
    &lt;property name="target"&gt;&lt;ref local="poolTargetSource" /&gt;&lt;/property&gt;
    &lt;property name="targetMethod"&gt;&lt;value&gt;getPoolingConfigMixin&lt;/value&gt;&lt;/property&gt;
&lt;/bean&gt;</programlisting></para>

      <para>This advisor is obtained by calling a convenience method on the
      <literal>AbstractPoolingTargetSource</literal> class, hence the use of
      MethodInvokingFactoryBean. This advisor's name ("poolConfigAdvisor"
      here) must be in the list of interceptors names in the ProxyFactoryBean
      exposing the pooled object.</para>

      <para>The cast will look as follows:</para>

      <para><programlisting>PoolingConfig conf = (PoolingConfig) beanFactory.getBean("businessObject");
System.out.println("Max pool size is " + conf.getMaxSize());</programlisting></para>

      <remark>Pooling stateless service objects is not usually necessary. We
      don't believe it should be the default choice, as most stateless objects
      are naturally threadsafe, and instance pooling is problematic if
      resources are cached.</remark>

      <para>Simpler pooling is available using autoproxying. It's possible to
      set the TargetSources used by any autoproxy creator.</para>
    </sect2>

    <sect2 id="aop-ts-prototype">
      <title>Prototype" target sources</title>

      <para>Setting up a "prototype" target source is similar to a pooling
      TargetSource. In this case, a new instance of the target will be created
      on every method invocation. Although the cost of creating a new object
      isn't high in a modern JVM, the cost of wiring up the new object
      (satisfying its IoC dependencies) may be more expensive. Thus you
      shouldn't use this approach without very good reason.</para>

      <para>To do this, you could modify the
      <literal>poolTargetSource</literal> definition shown above as follows.
      (I've also changed the name, for clarity.)</para>

      <para><programlisting>&lt;bean id="prototypeTargetSource" 
    class="org.springframework.aop.target.PrototypeTargetSource"&gt;
    &lt;property name="targetBeanName"&gt;&lt;value&gt;businessObject&lt;/value&gt;&lt;/property&gt;
&lt;/bean&gt;</programlisting></para>

      <para>There's only one property: the name of the target bean.
      Inheritance is used in the TargetSource implementations to ensure
      consistent naming. As with the pooling target source, the target bean
      must be a prototype bean definition.</para>
    </sect2>
  </sect1>

  <sect1 id="aop-extensibility">
    <title>Defining new Advice types</title>

    <para>Spring AOP is designed to be extensible. While the interception
    implementation strategy is presently used internally, it is possible to
    support arbitrary advice types in addition to interception around advice,
    before, throws advice and after returning advice, which are supported out
    of the box.</para>

    <para>The <literal>org.springframework.aop.framework.adapter</literal>
    package is an SPI package allowing support for new custom advice types to
    be added without changing the core framework. The only constraint on a
    custom Advice type is that it must implement the
    <literal>org.aopalliance.aop.Advice</literal> tag interface.</para>

    <para>Please refer to the
    <literal>org.springframework.aop.framework.adapter</literal> package's
    Javadocs for further information</para>
  </sect1>

  <sect1>
    <title>Further reading and resources</title>

    <para>I recommend the excellent <emphasis>AspectJ in Action</emphasis> by
    Ramnivas Laddad (Manning, 2003) for an introduction to AOP.</para>

    <para>Please refer to the Spring sample applications for further examples
    of Spring AOP:</para>

    <itemizedlist>
      <listitem>
        <para>The JPetStore's default configuration illustrates the use of the
        TransactionProxyFactoryBean for declarative transaction
        management</para>
      </listitem>

      <listitem>
        <para>The <literal>/attributes</literal> directory of the JPetStore
        illustrates the use of attribute-driven declarative transaction
        management</para>
      </listitem>
    </itemizedlist>

    <para>If you are interested in more advanced capabilities of Spring AOP,
    take a look at the test suite. The test coverage is over 90%, and this
    illustrates advanced features not discussed in this document.</para>
  </sect1>

  <sect1>
    <title>Roadmap</title>

    <para>Spring AOP, like the rest of Spring, is actively developed. The core
    API is stable. Like the rest of Spring, the AOP framework is very modular,
    enabling extension while preserving the fundamental design. Several
    improvements are likely in the Spring 1.1-1.2 timeframe, which will
    preserve backward compatibility. These include:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Performance improvements</emphasis>: The creation of
        AOP proxies is handled by a factory via a Strategy interface. Thus we
        can support additional AopProxy types without impacting user code or
        the core implementation. For Spring 1.1, we are examining generating
        all byte code for AopProxy implementations in cases where runtime
        advice changes are not required. This should produce a significant
        reduction in the overhead of the AOP framework. Note, however, that
        the overhead of the AOP framework is not an issue in normal
        usage.</para>
      </listitem>

      <listitem>
        <para><emphasis>More expressive pointcuts</emphasis>: Spring presently
        offers an expressive Pointcut interface, but we can add value through
        adding more Pointcut implementations. We are considering
        implementations offering a simple but powerful expression language. If
        you wish to contribute a useful Pointcut implementation, please
        do!</para>
      </listitem>

      <listitem>
        <para>Introduction of a higher-level concept of an
        <literal>Aspect</literal>, which could include multiple
        Advisors.</para>
      </listitem>
    </itemizedlist>
  </sect1>
</chapter>