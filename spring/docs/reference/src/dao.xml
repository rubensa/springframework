<?xml version="1.0" encoding="UTF-8"?>
<chapter id="dao">
  <title>DAO support</title>

  <sect1 id="dao-introduction">
    <title>Introduction</title>

    <para>The DAO (Data Access Object) support in Spring is primarily aimed at
    making it easy to work with data access technologies like JDBC, Hibernate
    or JDO in a standardized way. This allows you to switch between them
    fairly easily and it also allows you to code without worrying about
    catching exceptions that are specific to each tecnology. </para>
  </sect1>

  <sect1 id="dao-exceptions">
    <title>Consistent Exception Hierarchy</title>

    <para>Spring provides a convenient translation from technology specific
    exceptions like <literal>SQLException</literal> to its own exception
    hierarchy with the <literal>DataAccessException</literal> as the root
    exception. These exceptions wrap the original exception so there is never
    any risk that you would lose any information as to what might have gone
    wrong.</para>

    <para>In addition to JDBC exceptions, Spring can also wrap Hibernate
    exceptions, converting them from proprietary, checked exceptions, to a set
    of abstracted runtime exceptions. The same is true for JDO exceptions.
    This allows you to handle most persistence exceptions, which are
    non-recoverable, only in the appropriate layers, without annoying
    boilerplate catches/throws, and exception declarations. You can still trap
    and handle exceptions anywhere you need to. As we mentioned above, JDBC
    exceptions (including DB specific dialects) are also converted to the same
    hierarchy, meaning that you can perform some operations with JDBC within a
    consistent programming model.</para>

    <para>The above is true for the Template versions of the ORM access
    framework. If you use the Interceptor based classes then the application
    must care about handling HibernateExceptions and JDOExceptions itself,
    preferably via delegating to <literal>SessionFactoryUtils</literal>'
    <literal>convertHibernateAccessException</literal> or
    <literal>convertJdoAccessException</literal> methods respectively. These
    methods converts the exceptions to ones that are compatible with the
    org.springframework.dao exception hierarchy. As JDOExceptions are
    unchecked, they can simply get thrown too, sacrificing generic DAO
    abstraction in terms of exceptions though.</para>

    <para>The exception hierarchy that Spring uses is oulined in the following
    graph:</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/DataAccessException.gif" />
      </imageobject>
    </mediaobject>

    <para></para>
  </sect1>

  <sect1>
    <title>Consistent Abstract Classes for DAO Support </title>

    <para>To make it easier to work with a variety of data access technologies
    like JDBC, JDO and Hibernate in a consistent way, Spring provides a set of
    abtract DAO classes that you can extend. These abstract classes has
    methods for setting the data source and any other configuration settings
    that are specific to the technology you currently are using.</para>

    <para>Dao Support classes:</para>

    <itemizedlist>
      <listitem>
        <para><literal>JdbcDaoSupport</literal> - super class for JDBC data
        access objects. Requires a DataSource to be set, providing a
        JdbcTemplate based on it to subclasses.</para>
      </listitem>

      <listitem>
        <para><literal>HibernateDaoSupport</literal> - super class for
        Hibernate data access objects. Requires a SessionFactory to be set,
        providing a HibernateTemplate based on it to subclasses. Can
        alternatively be initialized directly via a HibernateTemplate, to
        reuse the latter's settings like SessionFactory, flush mode, exception
        translator, etc. </para>
      </listitem>

      <listitem>
        <para><literal>JdoDaoSupport</literal> - super class for JDO data
        access objects. Requires a PersistenceManagerFactory to be set,
        providing a JdoTemplate based on it to subclasses.</para>
      </listitem>
    </itemizedlist>

    <para></para>
  </sect1>
</chapter>