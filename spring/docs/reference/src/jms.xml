<?xml version="1.0" encoding="UTF-8"?>
<chapter id="jms">
  <title>JMS</title>
  <sect1>
    <title>Introduction</title>
    <para>Spring provides a JMS abstraction framework that simplifies
    the use of the JMS API and shields the user from differences between
    the JMS 1.0.2 and 1.1 APIs.
    </para>

    <para>JMS can be roughly divided into two areas of
    functionality, production and consumption of messages.  In a
    J2EE environment, the ability to consume messages 
    asynchronously is provided for by message-driven beans while in a
    standalone application this is provided for by the creation 
    of MessageListeners or ConnectionConsumers.  The functionality 
    in JmsTemplate is focused on producing messages.  Future releases
    of Spring will address asynchronous message consumption in a standalone 
    environment.
    </para>

    <para>The package <literal>org.springframework.jms.core</literal> provides 
    the core functionality for using JMS.  
    It contains JMS template classes 
    that simplifies the use of the JMS by handling the creation and release 
    of resources, much like the <literal>JdbcTemplate</literal> does for JDBC.  

    The design principal common to Spring template classes is to
    provide helper methods to perform common operations and for more
    sophisticated usage, delegate the essence of the processing 
    task to user implemented callback interfaces.  The JMS template
    follows the same design.  The classes offer various convenience methods 
    for the sending of messages, consuming a message synchronously, and 
    exposing the JMS session and message producer to the user.
    </para>

    <para>
    The package <literal>org.springframework.jms.support</literal>
    provides JMSException translation functionality.  The translation
    converts the checked JMSException hierarchy to a mirrored hierarchy 
    of unchecked exceptions.  If there are any provider specific subclasses 
    of the checked javax.jms.JMSException, this exception is wrapped in the 
    unchecked UncategorizedJmsException.
    The package <literal>org.springframework.jms.support.converter</literal>
    provides a MessageConverter abstraction to convert between
    Java objects and JMS messages.  The package 
    <literal>org.springframework.jms.support.destination</literal> provides
    various strategies for managing JMS destinations, such as providing
    a service locator for destinations stored in JNDI.
    </para>

    <para>Finally, the package
    <literal>org.springframework.jms.connection</literal>
    provides an implementation of the ConnectionFactory suitable for use
    in standalone applications.  It also contains an implementation
    of Spring's <literal>PlatformTransactionManager</literal>
    for JMS.  This allows for integration of JMS as a transactional
    resource into Spring's transaction management mechanisms.
    </para>

  </sect1>    

  <sect1>
    <title>Domain unification</title>
    <para>There are two major releases of the JMS specification, 1.0.2 
    and 1.1.  JMS 1.0.2 defined two types of messaging domains, 
    point-to-point (Queues) and publish/subscribe (Topics).
    The 1.0.2 API reflected these two
    messaging domains by providing a parallel class hierarchy for each domain.
    Consequentially, a client application was domain specific in the use of
    the JMS API.  JMS 1.1 introduced the concept of domain unification 
    that minimized both the functional differences and client API 
    differences between the two domains.  As an example of a functional 
    difference that was removed, if you use a JMS 1.1 provider you can 
    transactionally consume a message from one domain and produce a message
    on the other using the same <literal>Session</literal>.
    </para>

    <para>The JMS 1.1 specification was released in April 2002 and
    incorporated as part of J2EE 1.4 in November 2003.
    As a result, most application servers that are currently in use 
    are only required to support JMS 1.0.2.
    </para>
  </sect1>

  <sect1>
    <title>JmsTemplate</title>
    Two implementations of the JmsTemplate are provided.  The class
    <literal>JmsTemplate</literal> uses the JMS 1.1 API and the
    subclass <literal>JmsTemplate102</literal> uses the JMS 1.0.2 API.
    <para>Code that uses the JmsTemplate only needs to implement callback
    interfaces giving them a clearly defined contract.  The 
    <literal>MessageCreator</literal> callback interface creates a message
    given a Session provided by the calling code in JmsTemplate.
    In order to allow
    for more complex usage of the JMS API, the callback  
    <literal>SessionCallback</literal> provides the user with the JMS
    session and the callback <literal>ProducerCallback</literal> exposes
    a Session and MessageProducer pair.
    </para>

    <para>
    The JMS API exposes two types of send methods, one that takes 
    delivery mode, priority, and time-to-live as quality of service 
    (QOS) parameters and one that takes no QOS parameters which uses
    default values.  Since there are many send methods in JmsTemplate, 
    the setting of the QOS parameters have been exposed as bean
    properties to avoid duplication in the number 
    of send methods.  Similarly, the timeout value for
    synchronous receive calls is set using the property
    <literal>setReceiveTimeout</literal>.
    </para>
    <para>
    Some JMS providers allow the setting of default QOS
    values administratively through the configuration of the 
    ConnectionFactory.
    This has the effect that a call to MessageProducer's send method
    <literal>send(Destination destination, Message message)</literal>
    will use QOS different default values than those specified in the
    JMS specification.   Therefore, in order to provide consistent
    management of QOS values, the JmsTemplate must be specifically
    enabled to use its own QOS values by setting the boolean property
    <literal>isExplicitQosEnabled</literal> to true.  
    </para>    


    <sect2>
      <title>ConnectionFactory</title>
      <para>The JmsTemplate requires a reference to 
      a <literal>ConnectionFactory</literal>.  
      The <literal>ConnectionFactory</literal> is part of the JMS
      specification and serves as the entry point for working with JMS.
      It is used by the client application as a factory to 
      create connections with the JMS provider and encapsulates various 
      configuration parameters, many of which are vendor specific such 
      as SSL configuration options.
      </para>
      <para>
      When using JMS inside an EJB the vendor provides implementations
      the JMS interfaces so that they can participate in declarative
      transaction management and perform pooling of connections
      and session.  In order to use this implementation, 
      J2EE containers typically require that you declare a 
      JMS connection factory as a <literal>resource-ref</literal>
      inside the EJB or servlet deployment descriptors.  To ensure
      the use of these features with the JmsTemplate inside an EJB,
      the client application should ensure that it references the managed 
      implementation of the ConnectionFactory. 
      </para>
      
      <para>Spring provides an implementation of the ConnectionFactory
      interface, <literal>SingleConnectionFactory</literal>, that 
      will return the same Connection on all
      <literal>createConnection</literal> calls and ignore calls
      to <literal>close.</literal>  This is useful for testing and
      standalone environments so that the same connection can be
      used for multiple JmsTemplate calls that may span any number of
      transactions.  SingleConnectionFactory takes a reference to
      a standard ConnectionFactory that would typically comes from JNDI.
      </para>
    </sect2>
    <sect2>
      <title>Transaction Management</title>
      <para>Spring provides a <literal>JmsTransactionManager</literal> 
      that manages transactions for a single JMS ConnectionFactory.  
      This allows JMS applications to leverage the managed transaction 
      features of Spring as described in <literal>Chapter 7</literal>.
      The <literal>JmsTransactionManager</literal> binds a Connection/Session
      pair from the specified ConnectionFactory to the thread.  However,
      in a J2EE environment the ConnectionFactory will pool connections 
      and sessions, so the instances that are bound to the thread depend
      on the pooling behavior.  In a standalone environment, using Spring's
      <literal>SingleConnectionFactory</literal> will result in a 
      using a single JMS Connection and each transaction having its own
      Session.  The <literal>JmsTemplate</literal> can also be used with 
      the <literal>JtaTransactionManager</literal> and an XA-capable
      JMS ConnectionFactory for performing distributed transactions.
      </para>
      <para>Reusing code across a managed and unmanaged transactional 
      environment can be confusing when using JMS API to create
      a <literal>Session</literal> from a Connection.
      This is because the JMS API only has only one 
      factory method to create a Session and it requires values for 
      the transaction and acknowledgement modes.  In a managed environment, 
      setting these values in the responsibility of the environments
      transactional infrastructure, so these values are ignored by the 
      vendor's wrapper to the JMS Connection.
      When using the <literal>JmsTemplate</literal> in an unmanaged
      environment you can specify these values
      though the use of the properties <literal>SessionTransacted</literal>
      and <literal>SessionAcknowledgeMode</literal>.
      When using a <literal>PlatformTransactionManager</literal> with 
      <literal>JmsTemplate</literal>, the template will always be
      given a transactional JMS Session.
      </para>
    </sect2>
    <sect2>
      <title>Destination Management</title>
      <para>Destinations, like ConnectionFactories, are JMS administered
      objects that can be stored and retrieved in JNDI.  When
      configuring a Spring application context one can use the
      JNDI factory class <literal>JndiObjectFactoryBean</literal> to
      perform dependency injection on your object's references to
      JMS destinations.  However, often this strategy is cumbersome if
      there are a large number of destinations in the application or if there
      are advanced destination management features unique to the JMS provider.
      Examples of such advanced destination management would be the
      creation of dynamic destinations or support for a hierarchical 
      namespace of destinations.
      The JmsTemplate delegates the resolution of a destination name
      to a JMS destination object to an implementation of the 
      interface <literal>DestinationResolver</literal>.
      <literal>DynamicDestinationResolver</literal> is the
      default implementation used by <literal>JmsTemplate</literal> and
      accommodates resolving dynamic destinations.  
      A <literal>JndiDestinationResolver</literal> is also provided that
      acts as a service locator for destinations contained in JNDI and 
      optionally falls back to the behavior contained in 
      <literal>DynamicDestinationResolver</literal>. 
      </para>
      <para>Quite often the destinations used in a JMS application are only 
      known at runtime and therefore can not be administratively created 
      when the application is deployed.  This is often because there is 
      shared application logic between interacting system components that 
      create destinations at runtime according to a well known naming 
      convention.  Even though the creation of dynamic destinations
      are not part of the JMS specification, 
      most vendors have provided this functionality.
      Dynamic destinations are created with
      a name defined by the user which differentiates them from temporary
      destinations and are often not registered in JNDI.  
      The API used to create dynamic destinations varies from provider to
      provider since the properties associated with the destination are
      vendor specific.  However, a simple implementation choice that is
      sometimes made by vendors is to disregard the warnings in the JMS
      specification and to use the <literal>TopicSession</literal> method 
      <literal>createTopic(String topicName)</literal> or the 
      <literal>QueueSession</literal> method 
      <literal>createQueue(String queueName)</literal>
      to create a new destination with default destination properties.
      Depending on the vendor implementation, 
      <literal>DynamicDestinationResolver</literal> may then also 
      create a physical destination instead of only resolving one.
      </para>

      <para>The boolean property <literal>PubSubDomain</literal> is used 
      to configure the <literal>JmsTemplate</literal>
      with knowledge of what JMS domain is being used.  By default the
      value of this property is false, indicating that the point-to-point
      domain, Queues, will be used.  In the 1.0.2 implementation the value
      of this property determines if the JmsTemplate's send operations will
      send a message to a Queue or to a Topic.  This flag has no effect on send
      operations for the 1.1 implementation.  However, in both implementations,
      this property determines the behavior of resolving dynamic 
      destination via implementations of 
      <literal>DestinationResolver</literal>.
      </para>

      <para>You can also configure the JmsTemplate with a default destination
      via the property <literal>DefaultDestination</literal>.  The default
      destination will be used with send and receive operations that do not 
      refer to a specific destination.
      </para>
    </sect2> 
  </sect1>  



  <sect1>
    <title>Using the JmsTemplate</title>
    <para>To get started using the JmsTemplate you need to select either the
    JMS 1.0.2 implementation <literal>JmsTemplate102</literal> or the
    JMS 1.1 implementation <literal>JmsTemplate</literal>. Check your
    JMS provider to determine what version is supported.  
    </para>

    <sect2>
      <title>Sending a message</title>
      <para>The JmsTemplate contains many convenience methods to send a message.
      There are send methods that specify the destination using a 
      <literal>javax.jms.Destination</literal> object and those that
      specify the destination using a string for use in a JNDI lookup.
      The send method that takes no destination argument uses the
      default destination. Here is an example that sends a message to
      a queue using the 1.0.2 implementation.
      </para>
      <programlisting>import javax.jms.ConnectionFactory;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.Queue;
import javax.jms.Session;

import org.springframework.jms.core.MessageCreator;
import org.springframework.jms.core.JmsTemplate;
import org.springframework.jms.core.JmsTemplate102;

public class JmsQueueSender {

  private JmsTemplate jmsTemplate;

  private Queue queue;

  public void setConnectionFactory(ConnectionFactory cf) {
    jt = new JmsTemplate102(cf, false);
  }

  public void setQueue(Queue q) {
    queue = q;
  }

  public void simpleSend() {
    this.jmsTemplate.send(this.queue, new MessageCreator() {
      public Message createMessage(Session session) throws JMSException {
        return session.createTextMessage("hello queue world");
      }
    });
  }
}
      </programlisting>
      <para>This example uses the <literal>MessageCreator</literal> callback 
      to create a text message from the supplied Session object and the
      JmsTemplate is constructed by passing a reference to a ConnectionFactory
      and a boolean specifying the messaging domain.
      A zero argument constructor and <literal>connectionFactory</literal> /
      <literal>queue</literal> bean properties are provided and can be used
      for constructing the instance (using a BeanFactory or plain Java code).
      Alternatively, consider deriving from Spring's
      <literal>JmsGatewaySupport</literal> convenience base class, which
      provides pre-built bean properties for JMS configuration.
 </para>

      <para>When configuring the JMS 1.0.2 support in an application context,
      it is important to remember setting the value of the 
      boolean property <literal>pubSubDomain</literal> property in order
      to indicate if you want to send to Queues or Topics.</para>
      <para>The method 
      <literal>send(String destinationName, MessageCreator creator)</literal>
      lets you send to a message using the string name of the destination.
      If these names are registered in JNDI, you should set
      the <literal>DestinationResolver</literal> property of the template
      to an instance of <literal>JndiDestinationResolver</literal>.
      </para>
      <para>If you created the JmsTemplate and specified a default 
      destination, the <literal>send(MessageCreator c)</literal>
      sends a message to that destination.
      </para>
    </sect2>

    <sect2>
      <title>Synchronous Receiving</title>
      <para>While JMS is typically associated with asynchronous processing, it
      is possible to consume messages synchronously.  The overloaded
      <literal>receive</literal> methods provide this functionality.
      During a synchronous receive the calling thread blocks until a 
      message becomes available.  This can be a dangerous operation since
      the calling thread can potentially be blocked indefinitely.  The
      property <literal>receiveTimeout</literal> specifies how long
      the receiver should wait before giving up waiting for a message.
      </para>
    </sect2>


    <sect2>
      <title>Using Message Converters</title>
      <para>In order to facilitate the sending 
      of domain model objects the <literal>JmsTemplate</literal> 
      has various send methods that take a Java object as an argument 
      for a message's  data content.  
      The overloaded methods 
      <literal>convertAndSend</literal> and 
      <literal>receiveAndConvert</literal> in
      <literal>JmsTemplate</literal> delegate the conversion process to
      an instance of the <literal>MessageConverter</literal> interface.
      This interface defines a simple contract to convert between
      Java objects and JMS messages. The default
      implementation, <literal>SimpleMessageConverter</literal> 
      supports conversion between <literal>String</literal> and 
      <literal>TextMessage</literal>, <literal>byte[]</literal> and
      <literal>BytesMesssage</literal>, and <literal>java.util.Map</literal>
      and <literal>MapMessage</literal>.
      By using the converter, you
      your application code can focus on the business object that is 
      being sent or received via JMS and not bother with the details of 
      how it is represented as a JMS  message.  
      </para>
      <para>
      The sandbox currently includes a 
      <literal>MapMessageConverter</literal> which uses reflection
      to convert between a JavaBean and a MapMessage.  
      Other popular implementations choices you might implement yourself
      are Converters that bust an existing XML marshalling packages, such as 
      JAXB, Castor, XMLBeans, or XStream, to create a TextMessage 
      representing the object.  
      </para>
      <para>To accommodate the setting of a message's properties, 
      headers, and body that can not be generically encapsulated inside 
      a converter class, the interface <literal>MessagePostProcessor</literal>
      gives you access to the message after it has been converted, but before
      it is sent.  The example below shows how to modify a message header and 
      a property after a <literal>java.util.Map</literal> is
      converted to a message.
      </para>
      <programlisting>
public void sendWithConversion() {
  Map m = new HashMap();
  m.put("Name", "Mark");
  m.put("Age", new Integer(35));
  jt.convertAndSend("testQueue", m, new MessagePostProcessor() {
    public Message postProcessMessage(Message message) throws JMSException {
      message.setIntProperty("AccountID", 1234);
      message.setJMSCorrelationID("123-00001");
      return message;
    }
  });
}
      </programlisting>   
      <para>This results in a message of the form
      </para>
      <programlisting>
MapMessage={ 
  Header={ 
    ... standard headers ...
    CorrelationID={123-00001} 
  } 
  Properties={ 
    AccountID={Integer:1234}
  } 
  Fields={ 
    Name={String:Mark} 
    Age={Integer:35} 
  } 
}
      </programlisting>

    </sect2>
    <sect2>
        <title>SessionCallback and ProducerCallback</title>
        <para>
        While the send operations cover many common usage scenarios, there
        are cases when you want to perform multiple operations on a
        JMS Session or MessageProducer.  The <literal>SessionCallback</literal>
        and <literal>ProducerCallback</literal> expose the JMS Session
        and Session/MessageProducer pair respectfully.  The 
        <literal>execute()</literal> methods on JmsTemplate execute these
        callback methods.
        </para>
    </sect2>
    </sect1>
    
        
</chapter>

