<?xml version="1.0" encoding="UTF-8"?>
<chapter id="mail">
  <title>Email</title>

  <section id="mail-introduction">
    <title>Introduction</title>
	<sidebar>
		<title>Library dependencies</title>
		<para>The following additional jars to be on the classpath of your
		application in order to be able to use the Spring Framework's email library.</para>
		<itemizedlist>
			<listitem>
				<para>The <ulink url="http://java.sun.com/products/javamail/">JavaMail</ulink> <filename class="libraryfile">mail.jar</filename> library</para>
			</listitem>
			<listitem>
				<para>The <ulink url="http://java.sun.com/products/javabeans/jaf/downloads/index.html">JAF</ulink> <filename class="libraryfile">activation.jar</filename> library</para>
			</listitem>
		</itemizedlist>
		<para>All of these libraries are available in the Spring-with-dependecies
		distribution of the Spring Framework (in addition to also being freely
		available on the web).</para>
	</sidebar>

    <para>The Spring Framework provides a helpful utility library for sending
	email that shields the user from the specifics of the underlying mailing
	system and is responsible for low level resource handling on behalf of
    the client.</para>
	  
    <para>The <literal>org.springframework.mail</literal> package is the root level package
	for the Spring Framework's email support. The central interface for sending
	emails is the <interfacename>MailSender</interfacename> interface; a simple value object
	encapsulating the properties of a simple mail such as <emphasis>from</emphasis> and
	<emphasis>to</emphasis> (plus many others) is the <classname>SimpleMailMessage</classname> class.
    This package also contains a hierarchy of checked exceptions which provide
    a higher level of abstraction over the lower level mail system exceptions
    with the root exception being <exceptionname>MailException</exceptionname>. Please
    refer to the Javadocs for more information on the rich mail exception hierarchy.</para>

    <para>The <interfacename>org.springframework.mail.javamail.JavaMailSender</interfacename>
	interface adds specialized <emphasis>JavaMail</emphasis> features such as MIME
    message support to the <interfacename>MailSender</interfacename> interface
	(from which it inherits). <interfacename>JavaMailSender</interfacename> also provides a
	callback interface for preparation of JavaMail MIME messages, called
    <interfacename>org.springframework.mail.javamail.MimeMessagePreparator</interfacename></para>

  </section>

	<section id="mail-usage">
		<title>Usage</title>
		<para>Let's assume there is a business interface called <interfacename>OrderManager</interfacename>:</para>
		<programlisting><![CDATA[public interface OrderManager {

    void placeOrder(Order order);
}]]></programlisting>

		<para>Let us also assume that there is a requirement stating that an email message
		with an order number needs to be generated and sent to a customer placing the
		relevant order.</para>
		
		<section id="mail-usage-simple">
			<title>Basic <interfacename>MailSender</interfacename> and <classname>SimpleMailMessage</classname> usage</title>
			<programlisting><![CDATA[import org.springframework.mail.MailException;
import org.springframework.mail.MailSender;
import org.springframework.mail.SimpleMailMessage;

public class SimpleOrderManager implements OrderManager {

    private MailSender mailSender;
    private SimpleMailMessage templateMessage;

    public void setMailSender(MailSender mailSender) {
        this.mailSender = mailSender;
    }

    public void setTemplateMessage(SimpleMailMessage templateMessage) {
        this.templateMessage = templateMessage;
    }

    public void placeOrder(Order order) {

        ]]><lineannotation>// Do the business calculations...</lineannotation><![CDATA[

        ]]><lineannotation>// Call the collaborators to persist the order...</lineannotation><![CDATA[

        ]]><lineannotation>// Create a thread safe "copy" of the template message and customize it</lineannotation><![CDATA[
        SimpleMailMessage msg = new SimpleMailMessage(this.templateMessage);
        msg.setTo(order.getCustomer().getEmailAddress());
        msg.setText(
            "Dear " + order.getCustomer().getFirstName()
                + order.getCustomer().getLastName()
                + ", thank you for placing order. Your order number is "
                + order.getOrderNumber());
        try{
            this.mailSender.send(msg);
        }
        catch(MailException ex) {
            ]]><lineannotation>// simply log it and go on...</lineannotation><![CDATA[
            System.err.println(ex.getMessage());            
        }
    }
}]]></programlisting>
    
			<para>Find below the bean definitions for the above code:</para>
    		<programlisting><![CDATA[<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
  <property name="host" value="mail.mycompany.com"/>
</bean>

]]><lineannotation>&lt;!-- this is a template message that we can pre-load with default state --&gt;</lineannotation><![CDATA[
<bean id="templateMessage" class="org.springframework.mail.SimpleMailMessage">
  <property name="from" value="customerservice@mycompany.com"/>
  <property name="subject" value="Your order"/>
</bean>

<bean id="orderManager" class="com.mycompany.businessapp.support.SimpleOrderManager">
  <property name="mailSender" ref="mailSender"/>
  <property name="templateMessage" ref="templateMessage"/>
</bean>]]></programlisting>

		</section>
		
		<section id="mail-usage-mime">
			<title>Using the <interfacename>JavaMailSender</interfacename> and the <classname>MimeMessagePreparator</classname></title>
			<para>Here is another implementation of <interfacename>OrderManager</interfacename> using
			the <interfacename>MimeMessagePreparator</interfacename> callback interface. Please note
			in this case that the <literal>mailSender</literal> property is of type
			<interfacename>JavaMailSender</interfacename> so that we are able to use the JavaMail
			<classname>MimeMessage</classname> class:</para>
			
			<programlisting><![CDATA[import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import javax.mail.internet.MimeMessage;
import org.springframework.mail.MailException;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessagePreparator;

public class SimpleOrderManager implements OrderManager {

    private JavaMailSender mailSender;
    
    public void setMailSender(JavaMailSender mailSender) {
        this.mailSender = mailSender;
    }

    public void placeOrder(final Order order) {

        ]]><lineannotation>// Do the business calculations...</lineannotation><![CDATA[

        ]]><lineannotation>// Call the collaborators to persist the order...</lineannotation><![CDATA[
        
        MimeMessagePreparator preparator = new MimeMessagePreparator() {
        
            public void prepare(MimeMessage mimeMessage) throws Exception {
        
                mimeMessage.setRecipient(Message.RecipientType.TO, 
                        new InternetAddress(order.getCustomer().getEmailAddress()));
                mimeMessage.setFrom(new InternetAddress("mail@mycompany.com"));
                mimeMessage.setText(
                    "Dear " + order.getCustomer().getFirstName() + " "
                        + order.getCustomer().getLastName()
                        + ", thank you for placing order. Your order number is "
                        + order.getOrderNumber());
            }
        };
        try {
            this.mailSender.send(preparator);
        }
        catch (MailException ex) {
            ]]><lineannotation>// simply log it and go on...</lineannotation><![CDATA[
            System.err.println(ex.getMessage());            
        }
    }
}]]></programlisting>
	
			<note>
				<para>The mail code is a crosscutting concern and could well be a candidate
				for refactoring into a <link linkend="aop">custom Spring AOP aspect</link>,
				which then could be executed at appropriate joinpoints on the
				<interfacename>OrderManager</interfacename> target.</para>
			</note>
			
			<para>The Spring Framework's mail support ships with two
			<interfacename>MailSender</interfacename> implementations. The standard JavaMail
			implementation and the implementation on top of Jason Hunter's
			<classname>MailMessage</classname> class that is included in
			<ulink url="http://servlets.com/cos">the <literal>com.oreilly.servlet</literal>
			package</ulink>. Please refer to the relevant Javadocs for more information.</para>
		</section>
		
	</section>
		
	<section id="mail-javamail-mime">
		<title>Using the JavaMail <classname>MimeMessageHelper</classname></title>
		
		<para>A class that comes in pretty handy when dealing with JavaMail messages is
		the <classname>org.springframework.mail.javamail.MimeMessageHelper</classname> class,
		which shields you from having to use the nasty APIs of the various classes in the
		<literal>javax.mail.internet</literal> package. Using the
		<classname>MimeMessageHelper</classname> it is pretty easy to create a
		<classname>MimeMessage</classname>:</para>
		<programlisting><lineannotation>// of course you would use DI in any real-world cases</lineannotation><![CDATA[
JavaMailSenderImpl sender = new JavaMailSenderImpl();
sender.setHost("mail.host.com");

MimeMessage message = sender.createMimeMessage();
MimeMessageHelper helper = new MimeMessageHelper(message);
helper.setTo("test@host.com");
helper.setText("Thank you for ordering!");

sender.send(message);]]></programlisting>
	
		<section id="mail-javamail-mime-attachments">
			<title>Sending attachments and inline resources</title>
			<para>Multipart email messages allow for both attachments and inline resources.
			Examples of inline resources would be be images or a stylesheet you want to use
			in your message, but that you don't want displayed as an attachment.</para>
			<section id="mail-javamail-mime-attachments-attachment">
				<title>Attachments</title>
				<para>The following example shows you how to use the
				<classname>MimeMessageHelper</classname> to send an email along with a
				single JPEG image attachment.</para>
				<programlisting><![CDATA[JavaMailSenderImpl sender = new JavaMailSenderImpl();
sender.setHost("mail.host.com");

MimeMessage message = sender.createMimeMessage();

]]><lineannotation>// use the true flag to indicate you need a multipart message</lineannotation><![CDATA[
MimeMessageHelper helper = new MimeMessageHelper(message, true);
helper.setTo("test@host.com");

helper.setText("Check out this image!");

]]><lineannotation>// let's attach the infamous windows Sample file (this time copied to c:/)</lineannotation><![CDATA[
FileSystemResource file = new FileSystemResource(new File("c:/Sample.jpg"));
helper.addAttachment("CoolImage.jpg", file);

sender.send(message);]]></programlisting>
			</section>
			<section id="mail-javamail-mime-attachments-inline">
				<title>Inline resources</title>
				<para>The following example shows you how to use the
				<classname>MimeMessageHelper</classname> to send an email along with an
				inline image.</para>
				<programlisting><![CDATA[JavaMailSenderImpl sender = new JavaMailSenderImpl();
sender.setHost("mail.host.com");

MimeMessage message = sender.createMimeMessage();

]]><lineannotation>// use the true flag to indicate you need a multipart message</lineannotation><![CDATA[
MimeMessageHelper helper = new MimeMessageHelper(message, true);
helper.setTo("test@host.com");

]]><lineannotation>// use the true flag to indicate the text included is HTML</lineannotation><![CDATA[
helper.setText("<html><body><img src='cid:identifier1234'></body></html>", true);

]]><lineannotation>// let's include the infamous windows Sample file (this time copied to c:/)</lineannotation><![CDATA[
FileSystemResource res = new FileSystemResource(new File("c:/Sample.jpg"));
helper.addInline("identifier1234", res);

sender.send(message);]]></programlisting>
				<warning>
					<para>Inline resources are added to the mime message using the
					specified <literal>Content-ID</literal> (<literal>identifier1234</literal>
					in the above example). The order in which you are adding the text and the
					resource are <emphasis role="bold">very</emphasis> important. Be sure to
					<emphasis>first add the text</emphasis> and after that the resources. If
					you are doing it the other way around, it won't work!</para>
				</warning>
			</section>
		
		</section>
	
	</section>
  
</chapter>
