<?xml version="1.0" encoding="UTF-8"?>
<chapter id="new-in-2">
  <title>What's new in Spring 2.0?</title>

  <section>
    <title>Introduction</title>

    <para>If you have been using the Spring Framework for some time, you will
    be aware that Spring has just undergone a major revision.</para>

    <sidebar>
      <title>Backported features</title>

      <para>Some of the new and improved functionality described below has
      been (or will be) backported into the Spring 1.2.x release line.</para>

      <para>Please do consult the changelogs for the 1.2.x releases to see if
      a feature has been backported.</para>
    </sidebar>

    <para>This revision includes a host of new features, and a lot of the
    existing functionality has been reviewed and improved. In fact, so much of
    Spring is shiny and improved that the Spring development team decided that
    the next release of Spring merited an increment of the version number; and
    so Spring 2.0 was announced in December 2005 at the Spring Experience
    conference in Florida.</para>

    <para>This chapter is a guide to the new and improved features of Spring 
    2.0. It is intended to provide an high-level summary so that seasoned Spring 
    architects and developers can become immediately familiar with the new Spring 2.0 
    functionality. For more in-depth information on the features, please refer to the
    corresponding sections hyperlinked from within this chapter.</para>
  </section>

  <section id="new-in-2-ioc">
    <title>IoC</title>

    <para>One of the areas that contains a considerable number of 2.0 improvements
    is Spring's IoC container.</para>

    <section id="new-in-2-ioc-configuration">
      <title>Easier XML configuration</title>

      <para>Spring XML configuration is now even easier, thanks to the advent
      of the new XML configuration syntax. If you want to take advantage of
      the new tags that Spring provides (and the Spring team certainly suggest
      that you do because they make configuration much less verbose and
      much easier to read), then do read the section entitled
      <xref linkend="xsd-config"/>.</para>
    </section>

    <section id="new-in-2-ioc-custom-configuration">
      <title>Extensible XML authoring</title>

      <para>Not only is XML configuration easier to write, it is now also extensible.</para>

      <para>What 'extensible' means in this context is that you, as an
      application developer, or (more likely) as a third party framework or
      product vendor, can write custom tags that other developers can then
      plug into their own Spring configuration files. This allows you to have
      your own domain specific language (the term is used loosely here) of
      sorts be reflected in the specific configuration of your own components.</para>
      
      <para>Implementing custom Spring tags may not be of interest to every single 
      application developer or enterprise architect using Spring in their own projects.
      We expect third-party vendors to be highly interested in developing
      custom configuration tags for use in Spring configuration files.</para>
      
      <para>The extensible configuration mechanism is more thoroughly documented in 
      <xref linkend="extensible-xml"/>.</para>
    </section>

    <section id="new-in-2-ioc-scopes">
      <title>New bean scopes</title>

      <para>Previous versions of Spring had IoC container level support for
      exactly two distinct bean scopes (singleton and prototype). Spring 2.0
      improves on this by not only providing a number of additional scopes
      depending on the environment in which Spring is being deployed (for
      example, request and session scoped beans in a web environment), but
      also by providing 'hooks' (for want of a better word) so that Spring
      users can create their own scopes.</para>

      <para>It should be noted that although the underlying (and internal)
      implementation for singleton- and prototype-scoped beans has been
      changed, said change is totally transparent to the end user... no
      existing configuration needs to change, and no existing configuration
      will break.</para>

      <para>Both the new and the original scopes are detailed in the section
      entitled <xref linkend="beans-factory-scopes" />.</para>
    </section>
  </section>

  <section id="new-in-2-aop">
    <title>AOP</title>

    <para>Spring 2.0 has a much improved AOP offering. The Spring AOP framework
    itself is markedly easier to configure in XML (and significantly less verbose
    as a result); and Spring 2.0 integrates with the AspectJ pointcut language
    and @AspectJ aspect declaration style. The chapter entitled <xref linkend="aop" />
    is dedicated to describing this new support.</para>

    <section id="new-in-2-aop-configuration">
      <title>Easier AOP XML configuration</title>

      <para>Spring 2.0 introduces new schema support for defining aspects backed by
      regular Java objects. This support takes advantage of the AspectJ pointcut
      language and offers fully typed advice (i.e. no more casting and
      <literal>Object[]</literal> argument manipulation). Details of this support
      can be found in the section entitled <xref linkend="aop-schema" />.</para>
    </section>

    <section id="new-in-2-aop-aspectJ">
      <title>Support for @AspectJ aspects</title>

      <para>Spring 2.0 also supports aspects defined using the @AspectJ annotations.
      These aspects can be shared between AspectJ and Spring AOP, and require (honestly!)
      only some simple configuration. The support for @AspectJ aspects is discussed in
      <xref linkend="aop-ataspectj" />.</para>
    </section>
  </section>

  <section id="new-in-2-middle-tier">
    <title>Middle Tier (Data Access)</title>

    <section id="new-in-2-middle-tier-transaction-configuration">
      <title>Easier configuration of declarative transactions in XML</title>

      <para>The way that transactions are configured in Spring 2.0 has been changed
      significantly. The previous 1.2.x style of configuration continues to be valid
      (and supported), but the new style is markedly less verbose and is the
      recommended style. Spring 2.0 also ships with an AspectJ aspects library that
      you can use to make pretty much any object - even objects not created by the
      Spring container - transactional.</para>
      <para>The chapter entitled <xref linkend="transaction"/> contains all of the details.</para>
    </section>

    <section id="new-in-2-middle-tier-jpa">
      <title>JPA</title>

      <para>Spring 2.0 ships with a JPA abstraction layer, that is similar in intent
      to Spring's JDBC abstraction layer in the scope of what it addresses and in its
      general usage patterns.</para>

      <para>If you are interested in using a JPA-implementation as the
      backbone of your persistence layer, the section entitled <xref
      linkend="orm-jpa" /> is dedicated to detailing Spring's support and
      value-add in this area.</para>
    </section>

    <section id="new-in-2-middle-tier-async-jms">
      <title>Asynchronous JMS</title>

      <para>Prior to Spring 2.0, Spring's JMS offering was limited to
      producing messages. This functionality (encapsulated by the
      <classname>JmsTemplate</classname> class) was good, but it didn't
      address the full JMS stack such as the production
      and consumption of messages <emphasis>asynchronously</emphasis>.</para>

      <para>This missing piece of the JMS stack has been added, and
      Spring 2.0 now ships with full support for the consumption of messages
      in an asynchronous fashion, as detailed in the section entitled
      <xref linkend="jms-asynchronousMessageReception" />.</para>
    </section>

    <section id="new-in-2-middle-tier-jdbc">
      <title>JDBC</title>

      <para>There are some notable new classes in the area of Spring's JDBC
      abstraction framework. The first,
      <classname>NamedParameterJdbcTemplate</classname>, provides support for
      programming JDBC statements using named parameters (as opposed to
      programming JDBC statements using only classic placeholder
      (<literal>'?'</literal>) arguments.</para>

      <para>Another of the new classes, the
      <classname>SimpleJdbcTemplate</classname>, is aimed at making using the
      core class in Spring's JDBC abstraction framework,
      <classname>JdbcTemplate</classname>, even easier to use... but this
      class is only available to you if you are using Java 5 (Tiger).</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="jdbc-NamedParameterJdbcTemplate" /></para>
        </listitem>
        <listitem>
          <para><xref linkend="jdbc-SimpleJdbcTemplate" /></para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section id="new-in-2-web">
    <title>Web</title>

    <para>The web tier support has been <emphasis>substantially</emphasis>
    improved and expanded in Spring 2.0.</para>

    <section id="new-in-2-web-form-tags">
      <title>A form tag library for Spring MVC</title>

      <para>A rich JSP tag library for Spring MVC was <emphasis>the</emphasis>
      JIRA issue that garnered the most votes from Spring users (and by a wide
      margin).</para>

      <para>Spring 2.0 now ships with a full featured JSP tag library that
      makes the job of authoring JSP pages much easier when using Spring MVC;
      the Spring team is confident it will satisfy all of those developers who
      voted for the issue on JIRA. The new tag library is itself covered in the
      section entitled <xref linkend="mvc" />, and a quick reference to all of
      the new tags can be found in the appendix entitled
      <xref linkend="spring-form.tld" />.</para>
    </section>

    <section id="new-in-2-web-convention">
      <title>Sensible defaulting in Spring MVC</title>

      <para>For a lot of projects, sticking to established conventions and
      having reasonable defaults is just what they (the projects) need...
      this theme of convention-over-configuration now has explicit support in
      Spring MVC. What this means is that if you establish a set of naming
      conventions and suchlike, you can <emphasis>substantially</emphasis> cut
      down on the amount of configuration that is required to setup handler
      mappings, view resolvers, <classname>ModelAndView</classname> instances,
      etc. This is a great boon with regards to rapid prototyping, and can also
      lend a degree of (always good-to-have) consistency across a codebase
      should you choose to move forward with it into production.</para>

      <para>Spring MVC's convention-over-configuration support is detailed in
      the section entitled <xref linkend="mvc-coc"/></para>
    </section>

    <section id="new-in-2-web-portlet">
      <title>Portlet framework</title>

      <para>Spring 2.0 ships with a Portlet framework that is similar in
      spirit to the Spring MVC framework. Detailed coverage of the Spring
      Portlet framework can be found in the section entitled
      <xref linkend="portlet" />.</para>
    </section>
  </section>

  <section id="new-in-2-other">
    <title>Everything else...</title>

    <para>This final section contains all of the new and improved Spring 2.0
    features and functionality that didn't fit neatly into any of the above
    sections.</para>

    <section id="new-in-2-other-dynamic-language-support">
      <title>Dynamic language support</title>

      <para>Spring 2.0 now has support for beans that have been written in a
      language other than Java. The dynamic languages that are supported
      currently include JRuby, Groovy and BeanShell. This dynamic language
      support is comprehensively detailed in the section entitled
      <xref linkend="dynamic-language" />.</para>
    </section>

    <section id="new-in-2-other-jmx">
      <title>JMX</title>

      <para>The changes to the JMX support in Spring are more evolutionary
      than revolutionary; check out the sections listed below to jump straight
      to the JMX changes.</para>

      <itemizedlist>
        <listitem>
          <xref linkend="jmx-exporting-registration-behavior" />
        </listitem>

        <listitem>
          <xref linkend="jmx-notifications" />
        </listitem>
      </itemizedlist>
    </section>

    <section id="new-in-2-other-taskexecutor">
      <title>Task scheduling</title>

      <para>Spring 2.0 offers an abstraction around the scheduling of tasks.
      For the interested developer, the section entitled
      <xref linkend="taskexecutor"/> contains all of the details.</para>
    </section>

    <section id="new-in-2-other-java5">
      <title>Java 5 (Tiger) support</title>

      <para>If you are one of the lucky few to be developing projects using
      Java 5 (Tiger), you will be pleased to know that Spring 2.0 now has some
      quite compelling support for Tiger. (What follows is a set of pointers
      to Spring Java 5-only features.)</para>

      <itemizedlist>
		<listitem>
			<xref linkend="aop-atconfigurable"/>
		</listitem>
		<listitem>
			<xref linkend="aop-ataspectj"/>
		</listitem>
		<listitem>
			<xref linkend="transaction-declarative-aspectj"/>
		</listitem>
        <listitem>
          <xref linkend="metadata-annotations-required" />
        </listitem>
        <listitem>
          <xref linkend="jdbc-SimpleJdbcTemplate" />
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section id="new-in-2-other-finally">
    <title>Finally...</title>

    <para>The reference documentation has been markedly improved, and now
    sports a host of fleshed out examples and (hopefully) clearer
    explanations. A number of the sample applications that ship with the full
    Spring distribution also have been updated to showcase the new and
    improved features and functionality of Spring 2.0, so do check them out...
    the aforementioned sample applications can be found in the
    <literal>samples</literal> directory of the full Spring distribution.</para>
  </section>
</chapter>
