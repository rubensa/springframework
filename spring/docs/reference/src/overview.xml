<?xml version="1.0" encoding="UTF-8" ?>
<preface id="preface">
	<title>Preface</title>
	<para>
        Developing software applications is hard enough even with good tools and 
        technologies. Implementing applications using platforms which promise 
        everything but turn out to be heavy-weight,
        hard to control and not very efficient during the development cycle makes
        it even harder. Spring provides a light-weight solution for 
        building enterprise-ready applications, while still supporting the
		possibility of using declarative transaction management, remote access to
		your logic using RMI or webservices, mailing facilities and various options
		for persisting your data to a database. Spring provides an MVC framework,
        transparent ways of integrating AOP into your software, and a 
        well-structured exception hierarchy including automatic mapping from 
		proprietary exception hierarchies.
    </para>
	<para>
        Spring could potentially be a one-stop-shop for all your enterprise
        applications; however, Spring is modular, allowing you to use just those parts
        of it that you need, without having to bring in the rest. You can use
        the IoC container, with Struts on top, but you could also choose to just
        use the Hibernate integration or the JDBC abstraction layer.
        Spring has been (and continues to be) designed to be non-intrusive, meaning
        dependencies on the framework are generally none or absolutely minimal, depending
        on the area of use..
    </para>
	<para>
        This document provides a reference guide to Spring's features.
        Since this document is still a work-in-progress, if you have any
        requests or comments, please post them on the user mailing list or
		on the support forums at <ulink url="http://forum.springframework.org/"/>.
    </para>
	<para>
        Before we go on, a few words of gratitude are due to Chris Bauer (of the
        Hibernate team), who prepared and adapted the DocBook-XSL software in
		order to be able to create Hibernate's reference guide, thus also allowing
        us to create this one. Also thanks to Russell Healy for doing an extensive
        and valuable review of some of the material.
    </para>
</preface>

<chapter id="introduction">
	<title>Introduction</title>
	<sect1 id="introduction-overview">
		<title>Overview</title>
		<para>
			Spring contains a lot of functionality and features, which are well-organized in
			seven modules shown in the diagram below. This chapter discusses each of the modules
			in turn.
		</para>
		<para>
			<mediaobject>
				<imageobject role="fo">
					<imagedata fileref="images/spring-overview.svg" format="SVG" align="center" />
				</imageobject>
				<imageobject role="html">
					<imagedata fileref="images/spring-overview.gif" format="GIF" align="center" />
				</imageobject>
				<caption>
					<para>Overview of the Spring Framework</para>
				</caption>
			</mediaobject>
		</para>
		<para>
			The <link linkend="beans-introduction"><emphasis>Core</emphasis></link> package is the most
			fundamental part of the framework and provides the IoC and Dependency Injection features.
			The basic concept here is the <classname>BeanFactory</classname>, which provides a
			sophisticated implementation of the	factory pattern which removes the need for programmatic
			singletons and allows you to decouple the configuration and specification of dependencies from
			your actual program logic.  
		</para>
		<para>
			On top of the <link linkend="beans-introduction"><emphasis>Core</emphasis></link> package sits
			the <link linkend="context-introduction"><emphasis>Context</emphasis></link>
			package, providing a way to access beans in a framework-style manner, which somewhat
			(loosely) resembles a JNDI-registry. The context package inherits its features from the
			beans package and adds support for internationalization (I18N) (using for example
			resource bundles), event-propagation, resource-loading, and the transparent creation
			of contexts by, for example, a servlet container.
		</para>
		<para>
			The <link linkend="dao-introduction"><emphasis>DAO</emphasis></link> package provides a
			JDBC-abstraction layer that removes the need to do tedious JDBC coding and parsing
			of database-vendor specific error codes. Also, the <link linkend="jdbc-introduction">JDBC</link>
			package provides a way to do programmatic as well as declarative transaction management, not
			only for classes implementing special interfaces, but for <emphasis>all your POJOs (plain
			old Java objects)</emphasis>.
		</para>
		<para>
			The <link linkend="orm-introduction"><emphasis>ORM</emphasis></link> package provides
			integration layers for popular object-relational mapping APIs, including
			<link linkend="orm-jdo">JDO</link>,	<link linkend="orm-hibernate">Hibernate</link>,	and
			<link linkend="orm-ibatis">iBatis</link>. Using the ORM package you can use all those
			O/R-mappers	in combination with all the other features Spring offers, such as
			the simple declarative transaction management feature mentioned previously.
		</para>
		<para>
			Spring's <link linkend="aop-introduction"><emphasis>ORM</emphasis></link> package provides an 
			<emphasis>AOP Alliance</emphasis>-compliant aspect-oriented
			programming implementation allowing you to define, for example,
			method-interceptors and pointcuts to cleanly decouple code
			implementing functionality that should logically speaking be separated.
			Using source-level metadata functionality you can also
			incorporate all kinds of behavioral information into your code,
			in a manner similar to that of .NET attributes.
		</para>
		<para>
			Spring's <emphasis>Web</emphasis> package provides basic 
			web-oriented integration features, such as multipart file-upload functionality,
			the initialization of the IoC container using servlet listeners and 
			a web-oriented application context. When using Spring together with WebWork or
			Struts, this is the package to integrate with.
		</para>
		<para>
			Spring's <link linkend="mvc-introduction"><emphasis>MVC</emphasis></link> package provides a
			Model-View-Controller (MVC)	implementation for web-applications. Spring's MVC implementation
			is not just any old	implementation, it provides a <emphasis>clean</emphasis> separation between
			domain model code and web forms, and allows you to use all the other features of the Spring
			Framework-like validation.
		</para>
	</sect1>
	<sect1 id="overview-usagescenarios">
		<title>Usage scenarios</title>
		<para>
			With the building blocks described above you can use Spring in all sorts
			of scenarios, from applets up to fully-fledged enterprise applications
			using Spring's transaction management functionality and Web framework.
		</para>
		<para>
			<mediaobject>
				<imageobject role="fo">
					<imagedata fileref="images/full.svg" format="SVG" align="center" />
				</imageobject>
				<imageobject role="html">
					<imagedata fileref="images/full.gif" format="GIF" align="center" />
				</imageobject>
				<caption>
					<para>Typical full-fledged Spring web application</para>
				</caption>
			</mediaobject>
		</para>
		<para>
			By using <classname>TransactionProxyFactoryBeans</classname> the web application is
			fully transactional, just as it would be when using container managed transactions as
			provided by Enterprise JavaBeans. All your custom business logic can be implemented
			using simple POJOs, managed	by Spring's Dependency Injection container. Additional
			services include support for sending email, and	validation that is independent of the
			web layer enabling you to choose where to execute validation rules. Spring's ORM
			support is integrated with Hibernate, JDO and iBatis; for example, when using Hibernate,
			you can continue to use your existing mapping files and standard Hibernate
			<classname>SessionFactory</classname> configuration. Form controllers seamlessly integrate
			the web-layer with the domain model, removing the need for <classname>ActionForms</classname>
			or other classes that transform HTTP parameters to values for your domain model.
		</para>
		<para>
			<mediaobject>
				<imageobject role="fo">
					<imagedata fileref="images/thirdparty-web.svg" format="SVG" align="center" />
				</imageobject>
				<imageobject role="html">
					<imagedata fileref="images/thirdparty-web.gif" format="GIF" align="center" />
				</imageobject>
				<caption>
					<para>Spring middle-tier using a third-party web framework</para>
				</caption>
			</mediaobject>
		</para>
		<para>
			Sometimes the current circumstances do not allow you to	completely switch to a
			different framework. Spring does <emphasis>not</emphasis> force
			you to use everything within it; it's not an <emphasis>all-or-nothing</emphasis>
			solution. Existing front-ends built using WebWork, Struts, Tapestry, or other UI frameworks
			can be integrated perfectly well with a Spring-based middle-tier, allowing you to use
			the transaction features that Spring offers. The only thing you need to do is wire up
			your business logic using an <classname>ApplicationContext</classname> and
			integrate your web layer using a <classname>WebApplicationContext</classname>.
		</para>
		<para>
			<mediaobject>
				<imageobject role="fo">
					<imagedata fileref="images/remoting.svg" format="SVG" align="center" />
				</imageobject>
				<imageobject role="html">
					<imagedata fileref="images/remoting.gif" format="GIF" align="center" />
				</imageobject>
				<caption>
					<para>Remoting usage scenario</para>
				</caption>
			</mediaobject>
		</para>
		<para>			
			When you need to access existing code via web services, you can use
			Spring's <literal>Hessian-</literal>, <literal>Burlap-</literal>, <literal>Rmi-</literal>
			or <literal>JaxRpcProxyFactory</literal> classes. Enabling remote access to existing
			applications is suddenly not that hard anymore.
		</para>
		<para>
			<mediaobject>
				<imageobject role="fo">
					<imagedata fileref="images/ejb.svg" format="SVG" align="center" />
				</imageobject>
				<imageobject role="html">
					<imagedata fileref="images/ejb.gif" format="GIF" align="center" />
				</imageobject>
				<caption>
					<para>EJBs - Wrapping existing POJOs</para>
				</caption>
			</mediaobject>
		</para>
		<para>
			Spring also provides an <link linkend="ejb">access- and abstraction- layer</link> for
			Enterprise JavaBeans, enabling you to reuse your existing POJOs and wrap them in
			Stateless Session Beans, for use in scalable, failsafe web applications that might need
			declarative security.
		</para>
	</sect1>
</chapter>
