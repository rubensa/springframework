<chapter id="overview">

    <title>Introduction</title>
    
    <sect1 id="overview-intro">
    	<title>Introduction</title>
		<para>
			In short, Spring is a ligthweight container based upon Inversion of Control (Dependency
			Injection)
			principles. Inversion of Control is a design pattern for component based architectures
			that turns over the responsibilities of resolving of dependencies to the container 
			instead of letting the components resolve those themselves. The lightweight aspect
			of the container shows itself when implementing components for use within Spring.
			Components developed for Spring will not require any external libraries. Furthermore,
			the container is lightweight in that it does not have some of the major drawbacks of
			for instance an EJB container; i.e. long startup times, complex testing, deployment
			and configuration overhead, etcetera.			
		</para>
		<para>
			This chapter first of all describes the overall design of the lightweight container.
			Furthermore, it provides a quick overview of some of the features Spring has besides
			the IoC implementation. In short these are:
			<itemizedlist spacing="compact">
				<listitem>
					<para>
						<emphasis>built-in AOP support</emphasis> to for instance facilitate declarative transaction 
						management outside an EJB container
					</para>	
				</listitem>
				<listitem>
					<para>
						<emphasis>framework for data access</emphasis>, whether using JDBC or an 
						O/R mapping product such as Hibernate
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>an MVC web framework</emphasis> completely integrated with the rest of
						the Spring framework, providing a clean, non-intrusive way for
						doing MVC implementation, without tying yourself into one specific
						view
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>support for sending email</emphasis> using JavaMail or any other mailing system
					</para>
				</listitem>	
				<listitem>
					<para>
						<emphasis>source level medeta support</emphasis> to model enterprise services 
						using for example AOP
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>JNDI abstraction layer</emphasis> to facilitate for example transparent switching
						between remote and local services
					</para>
				</listitem>
			</itemizedlist>
		</para>
		<para>
			Also, this chapter gives you some guidelines on when to choose
			Spring for a specific project and provides an overview of some of the advantages 
			(and also disadvantages) of Spring and IoC in general.
		</para>
    </sect1>
    
</chapter>


