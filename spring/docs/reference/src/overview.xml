<preface id="preface">
    <title>Preface</title>
    <para>
        Developing applications alone is hard already, implementing applications
        using platforms that promise everything but turn out to be heavy-weight,
        hard to control and not very efficient during development cycles makes
        it even harder. Spring provides a light-weight solution to 
        build enterprise-ready applications, still supporting the possibility
        of having declarative transaction management, remote access to your
        logic using RMI or webservices, mailing facilities and a decent way
        of persisting your data in a database. Spring provides an MVC framework,
        transparent ways of integrating AOP in your software and a 
        well-structured exception hierarchy for for example JDBC.
    </para>
    <para>
        Spring could potentially be a one-stop-shop for all your enterprise
        applications, however, Spring is modular, allowing you to use
        parts of it, without bothering about the rest. You can use
        the bean container, with Struts on top, but you could also choose to just
        use the Hibernate integration or the JDBC abstraction layer.
        Spring is non-intrusive, meaning you can do without any dependencies
        on the framework at all, thus not tying yourself in to Spring.
    </para>
    <para>
        This document provides a reference guide to Spring's features.
        Since this document is still work-in-progress, you if you have any
        requests, comments, please post them on the userlist or on the
        forum at the SourceForge project page:
        <ulink url="http://www.sf.net/projects/springframework"/> 
    </para>
    <para>
        Before we go on a couple some words of gratitude. Chris Bauer
        (Hibernate) prepared and adapted the DocBook-XSL software in order 
        to be able to create Hibernate's reference guide, also allowing
        us to create this one.
    </para>
</preface>

<chapter id="overview">

    <title>Spring Framework - an overview</title>
    <para>
        Spring contains a lot of functionality and features, which are
        well-organized in 6 modules, shown in the diagram below. The rest
        of this section discusses each the of modules very shortly.
    </para>
    <para>
        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="images/spring-overview.svg" format="SVG" align="center"/>
            </imageobject>
            <caption>
                <para>Overview of the the Spring Framework
                </para>
            </caption>
        </mediaobject>
    </para>
    <para>
        The <emphasis>beans</emphasis> package is the most fundamental part of the framework and
        provides the Dependency Injection features allowing you to manage
        beans containing functionality. The basic concept here is the 
        BeanFactory, which provides a factory pattern preventing you to use
        programmatic singletons and allowing you to decouple configuration,
        specification of dependencies from your actual logic.            
    </para>
    <para>
        On top of the <emphasis>beans</emphasis> package sits the 
        <emphasis>context</emphasis> package,
        providing you a way to access beans in a more framework-style manner,
        somewhat resembling an JNDI-registry. The context package inherits
        its features from the beans package and adds messaging, 
        event-propagation, resource-loading and transparent
        creating of contexts by for example a servlet container.
    </para>
    <para>
        The <emphasis>JDBC</emphasis> package provides a JDBC-abstraction
        layer that takes removes the need to do tedious JDBC coding, parsing
        database-vendor specific error codes and stuff like that.
        Also, the JDBC package provides a way to do 
        programmatic as well as declarative transaction
        management, not only for classes implementing special interfaces,
        but for <emphasis>all you POJOs</emphasis> you're coding.
    </para>
    <para>
        The <emphasis>ORM</emphasis> package provides integration layers
        for popular object-relational mappers, including JDO, Hibernate
        and iBatis. Using the ORM package you can use all those O/R-mappers
        in combination with all the other features Spring offers, like
        simple delcarative transaction management mentioned before.
    </para>
    <para>
        Spring's <emphasis>AOP</emphasis> package provides an 
        <emphasis>Aop Alliance</emphasis> compliant aspect-oriented
        programming implementing allowing you to define for example
        method-interceptors and pointcuts to cleanly decouple code
        implementing functionality that should logically speaking be separated.
        Using source-level metadata functionality you can 
        incorporate all kinds of behavioral information in your code,
        a little like .NET attributes.
    </para>
    <para>
        Spring's <emphasis>web</emphasis> package provides the basic 
        web-oriented integration features, like multipart functionality,
        initialization of contexts using servlet listeners and 
        a web-oriented application context. When in need of using
        Spring together with WebWork or Struts, this is the package to 
        integrate with.
    </para>
    <para>
        Spring <emphasis>web MVC</emphasis> package provides a 
        Model-View-Controller implementation for web-applications. 
        Spring's MVC implementation is not just any implementation,
        it provides a clean separation between domain model code and
        web forms and allows you to use all the other features of the Spring
        Framework like validation.
    </para>
</chapter>


