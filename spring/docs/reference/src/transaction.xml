<?xml version="1.0" encoding="UTF-8"?>
<chapter id="transaction">
  <title>Transaction management</title>

  <sect1>
    <title>The Spring transaction abstraction</title>

    <para>Spring provides a consistent abstraction for transaction management.
    This abstraction is one of the most important of Spring's abstractions,
    and delivers the following benefits:<itemizedlist>
        <listitem>
          <para>Provides a consistent programming model across different
          transaction APIs such as JTA, JDBC, Hibernate, iBATIS Database Layer
          and JDO.</para>
        </listitem>

        <listitem>
          <para>Provides a simpler, easier to use, API for programmatic
          transaction management than most of these transaction APIs</para>
        </listitem>

        <listitem>
          <para>Integrates with the Spring data access abstraction</para>
        </listitem>

        <listitem>
          <para>Supports Spring declarative transaction management</para>
        </listitem>
      </itemizedlist></para>

    <para>Traditionally, J2EE developers have had two choices for transaction
    management: to use <emphasis>global</emphasis> or
    <emphasis>local</emphasis> transactions. Global transactions are managed
    by the application server, using JTA. Local transactions are
    resource-specific: for example, a transaction associated with a JDBC
    connection. This choice had profound implications. Global transactions
    provide the ability to work with multiple transactional resources. (It's
    worth noting that most applications use a single transaction resource)
    With local transactions, the application server is not involved in
    transaction management, and cannot help ensure correctness across multiple
    resources.</para>

    <para>Global transactions have a significant downside. Code needs to use
    JTA: a cumbersome API to use (partly due to its exception model).
    Furthermore, a JTA <literal>UserTransaction</literal> normally needs to be
    obtained from JNDI: meaning that we need to use <emphasis>both</emphasis>
    JNDI and JTA to use JTA. Obviously all use of global transactions limits
    the reusability of application code, as JTA is normally only available in
    an application server environment.</para>

    <para>The preferred way to use global transactions was via EJB
    <emphasis>CMT</emphasis> (<emphasis>Container Managed
    Transaction</emphasis>): a form of <emphasis role="bold">declarative
    transaction management</emphasis> (as distinguished from <emphasis
    role="bold">programmatic transaction management</emphasis>). EJB CMT
    removes the need for transaction-related JNDI lookups--although of course
    the use of EJB itself necessitates the use of JNDI. It removes most--not
    all--need to write Java code to control transactions. The significant
    downside is that CMT is (obviously) tied to JTA and an application server
    environment; and that it's only available if we choose to implement
    business logic in EJBs, or at least behind a transactional EJB facade. The
    negatives around EJB in general are so great that this is not an
    attractive proposition, when there are alternatives for declarative
    transaction management.</para>

    <para>Local transactions may be easier to use, but also have significant
    disadvantages: They cannot work across multiple transactional resources,
    and tend to invade the programming model. For example, code that manages
    transactions using a JDBC connection cannot run within a global JTA
    transaction.</para>

    <para>Spring resolves these problems. It enables application developers to
    use a consistent programming model <emphasis>in any
    environment</emphasis>. You write your code once, and it can benefit from
    different transaction management strategies in different environments.
    Spring provides both declarative and programmatic transaction management.
    Declarative transaction management is preferred by most users, and
    recommended in most cases.</para>

    <para>With programmatic transaction management developers work with the
    Spring transaction abstraction, which can run over any underlying
    transaction infrastructure. With the preferred declarative model
    developers typically write little or no code related to transaction
    management, and hence don't depend on Spring's or any other transaction
    API.</para>
  </sect1>

  <sect1>
    <title>Transaction strategies</title>

    <para>The key to the Spring transaction abstraction is the notion of a
    <emphasis>transaction strategy</emphasis>.</para>

    <para>This is captured in the
    <literal>org.springframework.transaction.PlatformTransactionManager</literal>
    interface, shown below:</para>

    <para><programlisting>public interface PlatformTransactionManager {

    TransactionStatus getTransaction(TransactionDefinition definition)
        throws TransactionException;

    void commit(TransactionStatus status) throws TransactionException;

    void rollback(TransactionStatus status) throws TransactionException;
}</programlisting></para>

    <para>This is primarily an SPI interface, although it can be used
    programmatically. Note that in keeping with Spring's philosophy, this is
    an <emphasis>interface</emphasis>. Thus it can easily be mocked or stubbed
    if necessary. Nor is it tied to a lookup strategy such as JNDI:
    PlatformTransactionManager implementations are defined like any other
    object in a Spring IoC container. This benefit alone makes this a
    worthwhile abstraction even when working with JTA: transactional code can
    be tested much more easily than if it directly used JTA.</para>

    <para>In keeping with Spring's philosophy,
    <literal>TransactionException</literal> is unchecked. Failures of the
    transaction infrastructure are almost invariably fatal. In rare cases
    where application code can recover from them, the application developer
    can still choose to catch and handle
    <literal>TransactionException</literal>.</para>

    <para>The <literal>getTransaction() </literal>method returns a
    <literal>TransactionStatus</literal> object, depending on a
    <literal>TransactionDefinition</literal> parameter. The returned
    <literal>TransactionStatus</literal> might represent a new or existing
    transaction (if there was a matching transaction in the current call
    stack).</para>

    <para>As with J2EE transaction contexts, a
    <literal>TransactionStatus</literal> is associated with a <emphasis
    role="bold">thread</emphasis> of execution.</para>

    <para>The <literal>TransactionDefinition</literal> interface
    specifies:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">Transaction isolation</emphasis>: The
        degree of isolation this transaction has from the work of other
        transactions. For example, can this transaction see uncommitted writes
        from other transactions?</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Transaction propagation</emphasis>:
        Normally all code executed within a transaction scope will run in that
        transaction. However, there are several options specifying behavior if
        a transactional method is executed when a transaction context already
        exists: For example, simply running in the existing transaction (the
        most common case); or suspending the existing transaction and creating
        a new transaction. Spring offers the transaction propagation options
        familiar from EJB CMT.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Transaction timeout</emphasis>: How long
        this transaction may run before timing out (automatically being rolled
        back by the underlying transaction infrastructure).</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Read-only status</emphasis>: A read-only
        transaction does not modify any data. Read-only transactions can be a
        useful optimization in some cases (such as when using
        Hibernate).</para>
      </listitem>
    </itemizedlist>

    <para>These settings reflect standard concepts. If necessary, please refer
    to a resource discussing transaction isolation levels and other core
    transaction concepts: Understanding such core concepts is essential to
    using Spring or any other transaction management solution.</para>

    <para>The <literal>TransactionStatus</literal> interface provides a simple
    way for transactional code to control transaction execution and query
    transaction status. The concepts should be familiar, as they are common to
    all transaction APIs:</para>

    <para><programlisting>public interface TransactionStatus {

    boolean isNewTransaction();

    void setRollbackOnly();

    boolean isRollbackOnly();
}</programlisting>However Spring transaction management is used, defining the
    <literal>PlatformTransactionManager</literal> implementation is essential.
    In good Spring fashion, this important definition is made using Inversion
    of Control.</para>

    <para>PlatformTransactionManager implementations normally require
    knowledge of the environment in which they work: JDBC, JTA, Hibernate
    etc.</para>

    <para>The following examples from
    <literal>dataAccessContext-local.xml</literal> from Spring's <emphasis
    role="bold">jPetStore</emphasis> sample application show how a local
    PlatformTransactionManager implementation can be defined. This will work
    with JDBC.</para>

    <para>We must define a JDBC DataSource, and then use the Spring
    DataSourceTransactionManager, giving it a reference to the
    DataSource.</para>

    <para><programlisting>&lt;bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"&gt;
  &lt;property name="driverClassName" value="${jdbc.driverClassName}"/&gt;
  &lt;property name="url" value="${jdbc.url}"/&gt;
  &lt;property name="username" value="${jdbc.username}"/&gt;
  &lt;property name="password" value="${jdbc.password}"/&gt;
&lt;/bean&gt;</programlisting></para>

    <para>The PlatformTransactionManager definition will look like
    this:</para>

    <para><programlisting>&lt;bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt;
  &lt;property name="dataSource" ref="dataSource"/&gt;
&lt;/bean&gt;</programlisting></para>

    <para>If we use JTA, as in the <literal>dataAccessContext-jta.xml
    </literal>file from the same sample application, we need to use a
    container DataSource, obtained via JNDI, and a JtaTransactionManager
    implementation. The JtaTransactionManager doesn't need to know about the
    DataSource, or any other specific resources, as it will use the
    container's global transaction management.</para>

    <para><programlisting>&lt;bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"&gt;
  &lt;property name="jndiName" value="jdbc/jpetstore"/&gt;&gt;
&lt;/bean&gt;

&lt;bean id="txManager" class="org.springframework.transaction.jta.JtaTransactionManager"/&gt;</programlisting></para>

    <para>We can use Hibernate local transactions easily, as shown in the
    following examples from the Spring <emphasis
    role="bold">PetClinic</emphasis> sample application.</para>

    <para>In this case, we need to define a Hibernate LocalSessionFactory,
    which application code will use to obtain Hibernate Sessions.</para>

    <para>The DataSource bean definition will be similar to one of the above
    examples, and is not shown. (If it's a container DataSource it should be
    non-transactional as Spring, rather than the container, will manage
    transactions.)</para>

    <para>The "txManager" bean in this case is of class
    HibernateTransactionManager. In the same way as the
    DataSourceTransactionManager needs a reference to the DataSource, the
    HibernateTransactionManager needs a reference to the
    SessionFactory.</para>

    <para><programlisting>&lt;bean id="sessionFactory" class="org.springframework.orm.hibernate.LocalSessionFactoryBean"&gt;
  &lt;property name="dataSource" ref="dataSource"/&gt;
  &lt;property name="mappingResources"&gt;
    &lt;list&gt;
      &lt;value&gt;org/springframework/samples/petclinic/hibernate/petclinic.hbm.xml&lt;/value&gt;
    &lt;/list&gt;
  &lt;/property&gt;
  &lt;property name="hibernateProperties"&gt;
    &lt;props&gt;
      &lt;prop key="hibernate.dialect"&gt;${hibernate.dialect}&lt;/prop&gt;
    &lt;/props&gt;
  &lt;/property&gt;
&lt;/bean&gt;

&lt;bean id="txManager" class="org.springframework.orm.hibernate.HibernateTransactionManager"&gt;
  &lt;property name="sessionFactory" ref="sessionFactory"/&gt;
&lt;/bean&gt;</programlisting></para>

    <para>With Hibernate and JTA transactions we could simply use the
    JtaTransactionManager as with JDBC or any other resource strategy.</para>

    <para><programlisting>&lt;bean id="txManager" class="org.springframework.transaction.jta.JtaTransactionManager"/&gt;</programlisting></para>

    <para>Note that this is identical to JTA configuration for any resource,
    as these are global transactions, which can enlist any transactional
    resource.</para>

    <para><remark>In all these cases, application code won't need to change at
    all. We can change how transactions are managed merely by changing
    configuration, even if that change means moving from local to global
    transactions or vice versa.</remark></para>
  </sect1>

  <sect1>
    <title>Resource synchronization with transactions</title>

    <para>It should now be clear how different transaction managers are
    created, and how they are linked to related resources which need to be
    synchronized to transactions (i.e.
    <literal>DataSourceTransactionManager</literal> to a JDBC
    <literal>DataSource</literal>,
    <literal>HibernateTransactionManager</literal> to a Hibernate
    <literal>SessionFactory</literal>, etc.). There remains the question
    however of how the application code directly or indirectly using a
    persistence API (JDBC, Hibernate, JDO, etc.), ensures that these resources
    are obtained and handled properly, in terms of proper
    creation/reuse/cleanup and to trigger (optionally) transaction
    synchronization via the relevant
    <literal>PlatformTransactionManager</literal>.</para>

    <sect2>
      <title>High-level approach</title>

      <para>The preferred approach is to use Spring's highest level
      persistence integration APIs. These do not replace the native APIs, but
      do internally handle resource creation/reuse, cleanup, optional
      transaction synchronization of the resources and exception mapping, so
      that user data access code doesn't have to worry about these concerns at
      all, but can concentrate purely on non-boilerplate persistence logic.
      Generally, the same<emphasis> template</emphasis> approach is followed
      for all persistence APIs, with classes such as
      <literal>JdbcTemplate</literal>, <literal>HibernateTemplate</literal>,
      <literal>JdoTemplate</literal>, etc.. These integrationA classes are
      detailed in subsequent chapters of this manual.</para>
    </sect2>

    <sect2>
      <title>Low-level approach</title>

      <para>At a lower level exist classes such as
      <literal>DataSourceUtils</literal> (for JDBC),
      <literal>SessionFactoryUtils</literal> (for Hibernate),
      <literal>PersistenceManagerFactoryUtils</literal> (for JDO), and so on.
      When it is preferred for application code to deal directly with the
      resource types of the native persistence APIs, these classes ensure that
      proper Spring-managed instances are obtained, transactions are
      (optionally) synchronized to, and exceptions which happen in the process
      are properly mapped to a consistent API.</para>

      <para>For example, for JDBC, instead of the traditional JDBC approach of
      calling the <literal>getConnection()</literal> method on the
      <literal>DataSource</literal>, you would instead use Spring's
      <literal>org.springframework.jdbc.datasource.DataSourceUtils</literal>
      class as follows:</para>

      <programlisting>Connection conn = DataSourceUtils.getConnection(dataSource);</programlisting>

      <para>If an existing transaction exists, and already has a connection
      synchronized (linked) to it, that instance will be returned. Otherwise,
      the method call will trigger the creation of a new connection, which
      will be (optionally) synchronized to any existing transaction, and
      available for subsequent reuse in that same transaction. As mentioned,
      this has the added advantage that any <literal>SQLException</literal>
      will be wrapped in a Spring
      <literal>CannotGetJdbcConnectionException</literal>--one of Spring's
      hierarchy of unchecked DataAccessExceptions. This gives you more
      information than can easily be obtained from the
      <literal>SQLException</literal>, and ensures portability across
      databases: even across different persistence technologies.</para>

      <para>It should be noted that this will also work fine without Spring
      transaction management (transaction synchronization is optional), so you
      can use it whether or not you are using Spring for transaction
      management.</para>

      <para>Of course, once you've used Spring's JDBC support or Hibernate
      support, you will generally prefer not to use
      <literal>DataSourceUtils</literal> or the other helper classes, because
      you'll be much happier working via the Spring abstraction than directly
      with the relevant APIs. For example, if you use the Spring JdbcTemplate
      or jdbc.object package to simplify your use of JDBC, correct connection
      retrieval happens behind the scenes and you won't need to write any
      special code.</para>

      <para>All these lower level resource access classes are detailed in
      subsequent chapters of this manual.</para>
    </sect2>

    <sect2>
      <title>TransactionAwareDataSourceProxy</title>

      <para>At the very lowest level exists the
      <literal>TransactionAwareDataSourceProxy</literal> class. This is a
      proxy for a target <literal>DataSource</literal>, which wraps that
      target <literal>DataSource</literal> to add awareness of Spring-managed
      transactions. In this respect it is similar to a transactional JNDI
      <literal>DataSource</literal> as provided by a J2EE server.</para>

      <para>It should almost never be necessary or desireable to use this
      class, except when existing code exists which must be called and passed
      a standard JDBC <literal>DataSource</literal> interface implementation.
      In this case, it's possible to still have this code be usable, but
      participating in Spring managed transactions. It is preferable to write
      your own new code using the higher level abstractions mentioned
      above.</para>

      <para>See the <literal>TransactionAwareDataSourceProxy</literal>
      Javadocs for more details.</para>
    </sect2>
  </sect1>

  <sect1>
    <title>Programmatic transaction management</title>

    <para>Spring provides two means of programmatic transaction
    management:</para>

    <itemizedlist>
      <listitem>
        <para>Using the <literal>TransactionTemplate</literal></para>
      </listitem>

      <listitem>
        <para>Using a <literal>PlatformTransactionManager</literal>
        implementation directly</para>
      </listitem>
    </itemizedlist>

    <para>We generally recommend the first approach.</para>

    <para>The second approach is similar to using the JTA
    <literal>UserTransaction</literal> API (although exception handling is
    less cumbersome).</para>

    <sect2>
      <title>Using the <literal>TransactionTemplate</literal></title>

      <para>The <literal>TransactionTemplate</literal> adopts the same
      approach as other Spring <emphasis>templates</emphasis> such as
      <literal>JdbcTemplate</literal> and
      <literal>HibernateTemplate</literal>. It uses a callback approach, to
      free application code from the working of acquiring and releasing
      resources. (No more try/catch/finally.) Like other templates, a
      <literal>TransactionTemplate</literal> is threadsafe.</para>

      <para>Application code that must execute in a transaction context looks
      like this. Note that the <literal>TransactionCallback</literal> can be
      used to return a value:</para>

      <para><programlisting>Object result = tt.execute(new TransactionCallback() {
    public Object doInTransaction(TransactionStatus status) {
        updateOperation1();
        return resultOfUpdateOperation2();
    }
});</programlisting></para>

      <para>If there's no return value, use a
      <literal>TransactionCallbackWithoutResult</literal> like this:</para>

      <para><programlisting>tt.execute(new TransactionCallbackWithoutResult() {
    protected void doInTransactionWithoutResult(TransactionStatus status) {
        updateOperation1();
        updateOperation2();
    }
});</programlisting></para>

      <para>Code within the callback can roll the transaction back by calling
      the <literal>setRollbackOnly()</literal> method on the
      <literal>TransactionStatus</literal> object.</para>

      <para>Application classes wishing to use the
      <literal>TransactionTemplate</literal> must have access to a
      PlatformTransactionManager: usually exposed as a JavaBean property or as
      a constructor argument.</para>

      <para>It's easy to unit test such classes with a mock or stub
      <literal>PlatformTransactionManager</literal>. There's no JNDI lookup or
      static magic here: it's a simple interface. As usual, you can use Spring
      to simplify your unit testing.</para>
    </sect2>

    <sect2>
      <title>Using the <literal>PlatformTransactionManager</literal></title>

      <para>You can also use the
      <literal>org.springframework.transaction.PlatformTransactionManager</literal>
      directly to manage your transaction. Simply pass the implementation of
      the PlatformTransactionManager you're using to your bean via a bean
      reference. Then, using the <literal>TransactionDefinition</literal> and
      <literal>TransactionStatus</literal> objects you can initiate
      transactions, rollback and commit.</para>

      <para><programlisting>DefaultTransactionDefinition def = new DefaultTransactionDefinition();
def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

TransactionStatus status = txManager.getTransaction(def);
try {
    // execute your business logic here
}
catch (MyException ex) {
    txManager.rollback(status);
    throw ex;
}
txManager.commit(status);</programlisting></para>
    </sect2>
  </sect1>

  <sect1>
    <title>Declarative transaction management</title>

    <para>Spring also offers declarative transaction management. This is
    enabled by Spring AOP, although, as the transactional aspects code comes
    with Spring and may be used in a boilerplate fashion, AOP concepts do not
    generally have to be understood to make effective use of this
    code..</para>

    <remark>Most Spring users choose declarative transaction management. It is
    the option with the least impact on application code, and hence is most
    consistent with the ideals of a n<emphasis>on-invasive
    </emphasis>lightweight container.</remark>

    <para>It may be helpful to begin by considering EJB CMT and explaining the
    similarities and differences with Spring declarative transaction
    management. The basic approach is similar: It's possible to specify
    transaction behavior (or lack of it) down to individual methods. It's
    possible to make a <literal>setRollbackOnly() </literal>call within a
    transaction context if necessary. The differences are:</para>

    <itemizedlist>
      <listitem>
        <para>Unlike EJB CMT, which is tied to JTA, Spring declarative
        transaction management works in any environment. It can work with
        JDBC, JDO, Hibernate or other transactions under the covers, with
        configuration changes only.</para>
      </listitem>

      <listitem>
        <para>Spring enables declarative transaction management to be applied
        to any POJO, not just special classes such as EJBs.</para>
      </listitem>

      <listitem>
        <para>Spring offers declarative <emphasis>rollback rules</emphasis>: a
        feature with no EJB equivalent, which we'll discuss below. Rollback
        can be controlled declaratively, not merely programmatically.</para>
      </listitem>

      <listitem>
        <para>Spring gives you an opportunity to customize transactional
        behavior, using AOP. For example, if you want to insert custom
        behavior in the case of transaction rollback, you can. You can also
        add arbitrary advice, along with the transactional advice. With EJB
        CMT, you have no way to influence the container's transaction
        management other than <literal>setRollbackOnly()</literal>.</para>
      </listitem>

      <listitem>
        <para>Spring does not support propagation of transaction contexts
        across remote calls, as do high-end application servers. If you need
        this feature, we recommend that you use EJB. However, don't use this
        feature lightly. Normally we don't want transactions to span remote
        calls.</para>
      </listitem>
    </itemizedlist>

    <para>The concept of rollback rules is important: they enable us to
    specify which exceptions (and throwables) should cause automatic roll
    back. We specify this declaratively, in configuration, not in Java code.
    So, while we can still call <literal>setRollbackOnly() </literal>on the
    <literal>TransactionStatus</literal> object to roll the current
    transaction back programmatically, most often we can specify a rule that
    <literal>MyApplicationException</literal> should always result in roll
    back. This has the significant advantage that business objects don't need
    to depend on the transaction infrastructure. For example, they typically
    don't need to import any Spring APIs, transaction or other.</para>

    <para>While the EJB default behavior is for the EJB container to
    automatically roll back the transaction on a <emphasis>system
    exception</emphasis> (usually a runtime exception), EJB CMT does not roll
    back the transaction automatically on an <emphasis>application
    exception</emphasis> (checked exception other than
    <literal>java.rmi.RemoteException</literal>). While the Spring default
    behavior for declarative transaction management follows EJB convention
    (roll back is automatic only on unchecked exceptions), it's often useful
    to customize this.</para>

    <para>On our benchmarks, the performance of Spring declarative transaction
    management exceeds that of EJB CMT.</para>

    <para>The usual way of setting up transactional proxying in Spring is via
    the the use of <literal>TransactionProxyFactoryBean</literal> to create
    the transactional proxy. This factory bean is simply a specialized version
    of Spring's generic <literal>ProxyFactoryBean</literal>, that, in addition
    to creating a proxy to wrap a target object, will also always
    automatically create and attach a
    <literal>TransactionInterceptor</literal> to that proxy, reducing
    boilerplate code. (Note that as with <literal>ProxyFactoryBean</literal>,
    you may still specify other interceptors or AOP advice to apply via the
    proxy).</para>

    <para>When using <literal>TransactionProxyFactoryBean</literal>, you need
    to first of all specify the target object to wrap in the transactional
    proxy, via the <literal>target</literal> attribute.. The target object is
    normally a POJO bean definition. You must also specify a reference to the
    relevant <literal>PlatformTransactionManager</literal>. Finally, you must
    specify the <emphasis role="bold">transaction attributes</emphasis>.
    Transaction attributes contain the definition of what transaction
    semantics we wish to use (as discussed above), as well as where they
    apply. Now let's consider the following sample:</para>

    <para><programlisting>&lt;!-- this example is in verbose form, see note later about concise for multiple proxies! --&gt;
&lt;!-- the target bean to wrap transactionally --&gt;
&lt;bean id="petStoreTarget"&gt;
  ...
&lt;/bean&gt;

&lt;bean id="petStore" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"&gt;
  &lt;property name="transactionManager" ref="txManager"/&gt;
  &lt;property name="target" ref="petStoreTarget"/&gt;
  &lt;property name="transactionAttributes"&gt;
    &lt;props&gt;
      &lt;prop key="insert*"&gt;PROPAGATION_REQUIRED,-MyCheckedException&lt;/prop&gt;
      &lt;prop key="update*"&gt;PROPAGATION_REQUIRED&lt;/prop&gt;
      &lt;prop key="*"&gt;PROPAGATION_REQUIRED,readOnly&lt;/prop&gt;
    &lt;/props&gt;
  &lt;/property&gt;
&lt;/bean&gt;</programlisting></para>

    <para>The transactional proxy will implement the interfaces of the target:
    in this case, the bean with id <emphasis>petStoreTarget</emphasis>. (Note
    that using CGLIB it's possible to transactionally proxy non-interface
    methods of the target class as well. Set the "proxyTargetClass" property
    to true to force this to always happen, although it will happen
    automatically if the target doesn't implement any interfaces. In general,
    of course, we want to program to interfaces rather than classes.) It's
    possible (and usually a good idea) to restrict the transactional proxy to
    proxying only specific target interfaces, using the
    <emphasis>proxyInterfaces</emphasis> property. It's also possible to
    customize the behavior of a <literal>TransactionProxyFactoryBean</literal>
    via several properties inherited from
    <literal>org.springframework.aop.framework.ProxyConfig</literal>, and
    shared with all AOP proxy factories.</para>

    <para>The transaction interceptor will ultimately use an object
    implementating Spring's <literal>TransactionAttributeSource</literal>
    interface to get at the transaction attributes (in the form of
    <literal>TransactionAttribute</literal> objects) defining the transaction
    semantics to be applied to specific methods of specific classes. The most
    basic way to specify this <literal>TransactionAttributeSource</literal>
    instance when creating the proxy is for you to create a bean implementing
    the <literal>TransactionAttributeSource</literal> interface (Spring has
    several implementations), and then directly set the the
    <literal>transactionAttributeSource</literal> property of the proxy
    factory bean to refer to it (or wrap it as an inner bean. Alternately, you
    may set a text string for this property, and rely on the fact that the
    pre-registered (by Spring)
    <literal>TransactionAttributeSourceEditor</literal> will automatically
    convert that text string to a
    <literal>MethodMapTransactionAttributeSource</literal> instance.</para>

    <para>However, as shown in this example, most users will instead prefer to
    define the transaction attributes by setting the
    <literal>transactionAttributes</literal> property. This property has a
    type of <literal>Java.util.Properties</literal>, which will then
    internally be converted to a
    <literal>NameMatchTransactionAttributeSource</literal> object.</para>

    <para>As can be seen in the above definition, a
    <literal>NameMatchTransactionAttributeSource</literal> object holds a list
    of name/value pairs. The key of each pair is a method or methods (a *
    wildcard ending is optional) to apply transactional semantics to. Note
    that the method name is <emphasis>not</emphasis> qualified with a package
    name, but rather is considered relative to the class of the target object
    being wrapped. The value portion of the name/value pair is the
    <literal>TransactionAttribute</literal> itself that needs to be applied.
    When specifying it as the <literal>Properties</literal> value as in this
    example, it's in String format as defined by
    <literal>TransactionAttributeEditor</literal>. This format is:</para>

    <para><programlisting>PROPAGATION_NAME,ISOLATION_NAME,readOnly,timeout_NNNN,+Exception1,-Exception2</programlisting></para>

    <para>Note that the only mandatory portion of the string is the
    propagation setting. The default transactions semantics which apply are as
    follows:</para>

    <itemizedlist>
      <listitem>
        <para>Exception Handling: RuntimeExceptions roll-back, normal
        (checked) Exceptions don’t</para>
      </listitem>

      <listitem>
        <para>Transactions are read/write</para>
      </listitem>

      <listitem>
        <para>Isolation Level: TransactionDefinition.ISOLATION_DEFAULT</para>
      </listitem>

      <listitem>
        <para>Timeout: TransactionDefinition.TIMEOUT_DEFAULT</para>
      </listitem>
    </itemizedlist>

    <para>See the JavaDocs for
    <literal>org.springframework.transaction.TransactionDefinition</literal>
    class for the format allowed for the propagation setting and isolation
    level setting. The String format is the same as the Integer constant names
    for the same values.</para>

    <para>In this example, note that the value for the insert* mapping
    contains a rollback rule. Adding <literal>-MyCheckedException</literal>
    here specifies that if the method throws
    <literal>MyCheckedException</literal> or any subclasses, the transaction
    will automatically be rolled back. Multiple rollback rules can be
    specified here, comma-separated. A - prefix forces rollback; a + prefix
    specifies commit. (This allows commit even on unchecked exceptions, if you
    really know what you're doing!)</para>

    <para>The <literal>TransactionProxyFactoryBean</literal> allows you to set
    optional "pre" and "post" advice, for additional interception behavior,
    using the "preInterceptors" and "postInterceptors" properties. Any number
    of pre and post advices can be set, and their type may be
    <literal>Advisor</literal> (in which case they can contain a pointcut),
    <literal>MethodInterceptor</literal> or any advice type supported by the
    current Spring configuration (such as <literal>ThrowsAdvice</literal>,
    <literal>AfterReturningtAdvice</literal> or
    <literal>BeforeAdvice</literal>, which are supported by default.) These
    advices must support a shared-instance model. If you need transactional
    proxying with advanced AOP features such as stateful mixins, it's normally
    best to use the generic
    <literal>org.springframework.aop.framework.ProxyFactoryBean</literal>,
    rather than the <literal>TransactionProxyFactoryBean</literal> convenience
    proxy creator.</para>

    <para><emphasis>Note</emphasis>: Using TransactionProxyFactoryBean
    definitions in the form above can seem overly verbose when many almost
    identical transaction proxies need to be created. You will almost always
    want to take advantage of parent and child bean definitions, along with
    inner bean definitions, to significantly reduce the verbosity of your
    transaction proxy definitions, as described in <xref
    linkend="aop-concise-proxy" />.</para>

    <sect2>
      <title>Source Annotations for Transaction Demarcation</title>

      <para>XML-based transaction attribute sources definitions are
      convenient, and work in any environment, but if you are willing to
      commit to a dependency on Java 5+ (JDK 1.5+), you will almost certainly
      want to consider using Spring's support for transaction Annotations in
      JDK standard format, as the attribute source instead.</para>

      <para>Declaring transaction semantics directly in the Java source code
      puts the declarations much closer to the affected code, and there is
      generally not much danger of undue coupling, since typically, code that
      is deployed as transactional is always deployed that way.</para>

      <sect3>
        <title>The <literal>Transactional</literal> Annotation</title>

        <para>The
        <literal>org.springframework.transaction.annotation.Transactional
        Annotation</literal> is used to indicate that an interface, interface
        method, class, or class method should have transaction
        semantics.</para>

        <para><programlisting>@Transactional
public interface OrderService {

void createOrder(Order order);
List queryByCriteria(Order criteria);</programlisting>Used in bare form, this
        Annotation specifies that an interface, class, or method must be
        transactional. Default transaction semantics are read/write,
        PROPAGATION_REQUIRED, ISOLATION_DEFAULT, TIMEOUT_DEFAULT, with
        rollback on a <literal>RuntimeException</literal>, but not
        <literal>Exception</literal>.</para>

        <para>Optional properties of the annotation modify transaction
        settings.</para>

        <para><table>
            <title>Properties of the <literal>Transactional</literal>
            Annotation</title>

            <tgroup cols="3">
              <thead>
                <row>
                  <entry>Property</entry>

                  <entry>Type</entry>

                  <entry>Description</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry><literal>propagation</literal></entry>

                  <entry>enum: Propagation</entry>

                  <entry>optional propagation setting (defaults to
                  PROPAGATION_REQUIRED)</entry>
                </row>

                <row>
                  <entry><literal>isolation</literal></entry>

                  <entry>enum: Isolation</entry>

                  <entry>optional isolation level (defaults to
                  ISOLATION_DEFAULT)</entry>
                </row>

                <row>
                  <entry><literal>readOnly</literal></entry>

                  <entry>boolean</entry>

                  <entry>read/write vs. read-only transaction (defaults to
                  false, or read/write)</entry>
                </row>

                <row>
                  <entry><literal>rollbackFor</literal></entry>

                  <entry>array of Class objects, must be derived from
                  Throwable</entry>

                  <entry>optional array of exception classes which should
                  cause rollback. By default, checked exceptions do not roll
                  back, unchecked (RuntimeException derived) roll back</entry>
                </row>

                <row>
                  <entry><literal>rollbackForClassname</literal></entry>

                  <entry>array of String class names. Classes must be derived
                  from Throwable</entry>

                  <entry>optional array of names of exception classes which
                  should cause rollback</entry>
                </row>

                <row>
                  <entry><literal>noRollbackFor</literal></entry>

                  <entry>array of Class objects, must be derived from
                  Throwable</entry>

                  <entry>optional array of exception classes which should not
                  cause rollback.</entry>
                </row>

                <row>
                  <entry><literal>noRollbackForClassname</literal></entry>

                  <entry>array of String class names, must be derived from
                  Throwable</entry>

                  <entry>optional array of names of exception classes which
                  should not rollback</entry>
                </row>
              </tbody>
            </tgroup>
          </table></para>

        <para>The annotation may be placed before an interface definition, a
        method on an interface, a class definition, or a method on a class. It
        may exist on both an element of an interface, and a class which
        implements that interface. The most derived location takes precedence
        when evaluating the transaction semantics of a method.</para>

        <sect4>
          <title><literal>Transactional</literal> annotation examples</title>

          <para>Annotating a class definition:</para>

          <para><programlisting>public class OrderServiceImpl implements OrderService {

  @Transactional
  void createOrder(Order order);
  public List queryByCriteria(Order criteria);

}</programlisting>In the following example, the interface is annotated for
          read-only transactions, which will thus be the setting used for
          methods by default. The Annotation on the createOrder method
          overrides this, setting the transaction to read/write, and
          specifying that transactions should also (in addition to the defualt
          rollback rule for <literal>RuntimeException</literal>) rollback when
          the <literal>DuplicateOrderIdException</literal> (presumably a
          non-checked Exception) is thrown.</para>

          <para><programlisting>@Transactional(readOnly=true)
interface TestService {

  @Transactional(readOnly=false,
               rollbackFor=DuplicateOrderIdException.class)
  void createOrder(Order order) throws DuplicateOrderIdException ;

  List queryByCriteria(Order criteria);
}</programlisting>Note that a class definition which implements this interface
          may still override these settings on its own class or method
          elements.</para>
        </sect4>

        <sect4>
          <title>Telling Spring to apply the <literal>Transactional</literal>
          annotation</title>

          <para>By itself, adding instances of this annotation to interface or
          class elements will not result in transactional wrapping of the
          implementation clases. Spring must still be told somehow to create
          transactional proxies around classes with these annotations.</para>

          <para>The key is to take advantage of the
          <literal>org.springframework.transaction.annotation.AnnotationTransactionAttributeSource</literal>
          class, which reads Annotations format transaction attributes from
          class files. Taking the previous example which uses
          TransactionProxyFactoryBean, the
          <literal>TransactionAttributes</literal> property which specified
          transaction attributes in text form is replaced by the direct usage
          of the <literal>TransactionAttributeSource</literal> property, specifying
          an <literal>AnnotationTransactionAttributeSource</literal>.</para>

          <para><programlisting>&lt;bean id="petStore" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"&gt;
  &lt;property name="transactionManager" ref="txManager"/&gt;
  &lt;property name="target" ref="petStoreTarget"/&gt;
  &lt;property name="transactionAttributeSource"&gt;
    &lt;bean class="...transaction.annotation.AnnotationTransactionAttributeSource"/&gt;
  &lt;/property&gt;
&lt;/bean&gt;</programlisting>Since the TransactionAttributeSource property
          does not need to change at all for each proxy instance, when using
          parent and child bean definitions to avoid code duplication, the
          property may just be set on the base, parent definition and
          forgotten, there is never a need to override it in the child since
          the attribute source will read the right settings from each class
          file.</para>
        </sect4>

        <sect4>
          <title>Using AOP to ensure the <literal>Transactional</literal>
          annotation is applied</title>

          <para>The previous example is still more work than would be ideal.
          There is in principle no need for XML for each proxy (to point to
          the target bean) when the annotations in the class files themselves
          can be used as an indication that a proxy needs to be created for
          the annotated classes.</para>

          <para>A more AOP focused approach allows a small amount of
          boilerplate XML (used once only, not for each target bean) to
          automatically ensure that proxies are created for all classes with
          Transactional annotations in them. Spring AOP was fully detailed in
          a previous chapter, which you should consult for general AOP
          documentation, but the key is the use of
          <literal>DefaultAdvisorAutoProxyCreator</literal>, a
          <literal>BeanPostProcessor</literal>. Because it is a bean post
          processor, it gets a chance to look at every bean that is created as
          it is created. If the bean contains the
          <literal>Transactional</literal> annotation, a transactional proxy
          is automatically created to wrap it.</para>

          <para><programlisting>&lt;bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/&gt;

&lt;bean class="org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor"&gt;
  &lt;property name="transactionInterceptor" ref="transactionInterceptor"/&gt;
&lt;/bean&gt;

&lt;bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor"&gt;
  &lt;property name="transactionManager" ref="txManager"/&gt;
  &lt;property name="transactionAttributeSource"&gt;
    &lt;bean class="org.springframework.transaction.annotation.AnnotationTransactionAttributeSource"/&gt;
  &lt;/property&gt;
&lt;/bean&gt;</programlisting></para>

          <para>A number of classes are involved here:</para>

          <itemizedlist>
            <listitem>
              <para><literal>TransactionInterceptor</literal>: the AOP Advice,
              actually intercepts method call and wraps it with a
              transaction</para>
            </listitem>

            <listitem>
              <para><literal>TransactionAttributeSourceAdvisor</literal>: AOP
              Advisor (holds the TransactionInterceptor, which is the advice,
              and a pointcut (where to apply the advice), in the form of a
              TransactionAttributeSource)</para>
            </listitem>

            <listitem>
              <para><literal>AnnotationTransactionAttributeSource</literal>:
              TransactionAttributeSource implementation which provides
              transaction attributes read from class files</para>
            </listitem>

            <listitem>
              <para><literal>DefaultAdvisorAutoProxyCreator</literal>: looks
              for Advisors in the context, and automatically creates proxy
              objects which are the transactional wrappers</para>
            </listitem>
          </itemizedlist>
        </sect4>
      </sect3>
    </sect2>

    <sect2>
      <title
      id="beannameautoproxycreator-for-transactions">BeanNameAutoProxyCreator,
      another declarative approach</title>

      <para><classname>TransactionProxyFactoryBean</classname> is very useful,
      and gives you full control when wrapping objects with a transactional
      proxy. Used with parent/child bean definitions and inner beans holding
      the target, and when Java 5 Annotations are not available as an option,
      it is generally the best choice for transactional wrapping. In the case
      that you need to wrap a number of beans in a completely identical
      fashion (for example, a boilerplate, 'make all methods transactional',
      using a <classname>BeanFactoryPostProcessor</classname> called
      <classname>BeanNameAutoProxyCreator</classname> can offer an alternative
      approach which can end up being even less verbose for this simplified
      use case.</para>

      <para>To recap, once the ApplicationContext has read its initialization
      information, it instantiates any beans within it which implement the
      <classname>BeanPostProcessor</classname> interface, and gives them a
      chance to post-process all other beans in the ApplicationContext. So
      using this mechanism, a properly configured
      <classname>BeanNameAutoProxyCreator</classname> can be used to
      postprocess any other beans in the ApplicationContext (recognizing them
      by name), and wrap them with a transactional proxy. The actual
      transaction proxy produced is essentially identical to that produced by
      the use of <classname>TransactionProxyFactoryBean</classname>, so will
      not be discussed further.</para>

      <para>Let us consider a sample configuration:</para>

      <para><programlisting>&lt;beans&gt;

	&lt;!-- Transaction Interceptor set up to do PROPAGATION_REQUIRED on all methods --&gt;
  &lt;bean id="matchAllWithPropReq" 
      class="org.springframework.transaction.interceptor.MatchAlwaysTransactionAttributeSource"&gt;
    &lt;property name="transactionAttribute" value="PROPAGATION_REQUIRED"/&gt;
  &lt;/bean&gt;

  &lt;bean id="matchAllTxInterceptor"
      class="org.springframework.transaction.interceptor.TransactionInterceptor"&gt;
    &lt;property name="transactionManager" ref="txManager"/&gt;
    &lt;property name="transactionAttributeSource" ref="matchAllWithPropReq"/&gt;
  &lt;/bean&gt;

  &lt;!-- One BeanNameAutoProxyCreator handles all beans where we want all methods to use 
       PROPAGATION_REQUIRED --&gt;
  &lt;bean id="autoProxyCreator" 
      class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"&gt;
    &lt;property name="interceptorNames"&gt;
      &lt;list&gt;
        &lt;idref local="matchAllTxInterceptor"/&gt;
        &lt;idref bean="hibInterceptor"/&gt;
      &lt;/list&gt;
    &lt;/property&gt;
    &lt;property name="beanNames"&gt;
      &lt;list&gt;
        &lt;idref local="core-services-applicationControllerSevice"/&gt;
        &lt;idref local="core-services-deviceService"/&gt;
        &lt;idref local="core-services-authenticationService"/&gt;
        &lt;idref local="core-services-packagingMessageHandler"/&gt;
        &lt;idref local="core-services-sendEmail"/&gt;
        &lt;idref local="core-services-userService"/&gt;
      &lt;/list&gt;
    &lt;/property&gt;
  &lt;/bean&gt;

&lt;/beans&gt;</programlisting></para>

      <para>Assuming that we already have a
      <classname>TransactionManager</classname> instance in our
      ApplicationContext, the first thing we need to do is create a
      <classname>TransactionInterceptor</classname> instance to use. The
      <classname>TransactionInterceptor</classname> decides which methods to
      intercept based on a <classname>TransactionAttributeSource</classname>
      implementing object passed to it as a property. In this case, we want to
      handle the very simple case of matching all methods. This is not
      necessarily the most efficient approach, but it's very quick to set up,
      because we can use the special pre-defined
      <classname>MatchAlwaysTransactionAttributeSource</classname>, which
      simply matches all methods. If we wanted to be more specific, we could
      use other variants such as
      <classname>MethodMapTransactionAttributeSource</classname>,
      <classname>NameMatchTransactionAttributeSource</classname>, or
      <classname>AttributesTransactionAttributeSource</classname>.</para>

      <para>Now that we have the transaction interceptor, we simply feed it to
      a <classname>BeanNameAutoProxyCreator</classname> instance we define,
      along with the names of 6 beans in the ApplicationContext that we want
      to wrap in an identical fashion. As you can see, the net result is
      significantly less verbose than it would have been to wrap 6 beans
      identically with TransactionProxyFactoryBean. Wrapping a 7th bean would
      add only one more line of config.</para>

      <para>You may notice that we are able to apply multiple interceptors. In
      this case, we are also applying a
      <classname>HibernateInterceptor</classname> we have previously defined
      (bean id=<emphasis>hibInterceptor</emphasis>), which will manage
      Hibernate Sessions for us.</para>

      <para>There is one thing to keep in mind, with regards to bean naming,
      when switching back and forth between the use of
      <classname>TransactionProxyFactoryBean</classname>, and
      <classname>BeanNameAutoProxyCreator</classname>. For the former, if the
      target bean is not defined as an inner bean, you normally give the
      target bean you want to wrap an id similar in form to
      <emphasis>myServiceTarget</emphasis>, and then give the proxy object an
      id of <emphasis>myService</emphasis>; then all users of the wrapped
      object simply refer to the proxy, i.e. <emphasis>myService</emphasis>.
      (These are just sample naming conventions, the point is that the target
      object has a different name than the proxy, and both are available from
      the ApplicationContext). However, when using
      <classname>BeanNameAutoProxyCreator</classname>, you name the target
      object something like <emphasis>myService</emphasis>. Then, when
      <classname>BeanNameAutoProxyCreator</classname> postprocesses the target
      object and create the proxy, it causes the proxy to be inserted into the
      Application context under the name of the original bean. From that point
      on, only the proxy (the wrapped object) is available from the
      ApplicationContext. When using TransactionProxyFactoryBean with the
      target specified as an inner bean, this naming issue is not a concern,
      since the inner bean is not normally given a name.</para>
    </sect2>

    <sect2>
      <title>AOP and Transactions</title>

      <remark>As you've seen by reading this chapter, you don't really need to
      be an AOP expert--or indeed, to know much at all about AOP--to use
      Spring's declarative transaction management effectively. However, if you
      do want to become a "power user" of Spring AOP, you will find it easy to
      combine declarative transaction management with powerful AOP
      capabilities.</remark>
    </sect2>
  </sect1>

  <sect1>
    <title>Choosing between programmatic and declarative transaction
    management</title>

    <para>Programmatic transaction management is usually a good idea only if
    you have a small number of transactional operations. For example, if you
    have a web application that require transactions only for certain update
    operations, you may not want to set up transactional proxies using Spring
    or any other technology. Using the TransactionTemplate may be a good
    approach.</para>

    <para>On the other hand, if your applications has numerous transactional
    operations, declarative transaction management is usually worthwhile. It
    keeps transaction management out of business logic, and is not difficult
    to configure in Spring. Using Spring, rather than EJB CMT, the
    configuration cost of declarative transaction management is greatly
    reduced.</para>
  </sect1>

  <sect1>
    <title>Do you need an application server for transaction
    management?</title>

    <para>Spring's transaction management capabilities--and especially its
    declarative transaction management--significantly changes traditional
    thinking as to when a J2EE application requires an application
    server.</para>

    <para>In particular, you don't need an application server just to have
    declarative transactions via EJB. In fact, even if you have an application
    server with powerful JTA capabilities, you may well decide that Spring
    declarative transactions offer more power and a much more productive
    programming model than EJB CMT.</para>

    <para>You need an application server's JTA capability only if you need to
    enlist multiple transactional resources. Many applications don't face this
    requirement. For example, many high-end applications use a single, highly
    scalable, database such as Oracle 9i RAC.</para>

    <para>Of course you may need other application server capabilities such as
    JMS and JCA. However, if you need only JTA, you could also consider an
    open source JTA add-on such as JOTM. (Spring integrates with JOTM out of
    the box.) However, as of early 2004, high-end application servers provide
    more robust support for XA transactions.</para>

    <para></para>

    <para>The most important point is that with Spring <emphasis>you can
    choose when to scale your application up to a full-blown application
    server</emphasis>. Gone are the days when the only alternative to using
    EJB CMT or JTA was to write coding using local transactions such as those
    on JDBC connections, and face a hefty rework if you ever needed that code
    to run within global, container-managed transactions. With Spring only
    configuration needs to change: your code doesn't.</para>
  </sect1>

  <sect1>
    <title>Common problems</title>

    <para>Developers should take care to use the correct
    <emphasis><literal>PlatformTransactionManager</literal></emphasis>
    implementation for their requirements.</para>

    <para>It's important to understand how the Spring transaction abstraction
    works with JTA global transactions. Used properly, there is no conflict
    here: Spring merely provides a simplifying, portable abstraction.</para>

    <para>If you are using global transactions, you <emphasis>must</emphasis>
    use the Spring
    <literal>org.springframework.transaction.jta.JtaTransactionManager</literal>
    for all your for all your transactional operations. Otherwise Spring will
    attempt to perform local transactions on resources such as container
    DataSources. Such local transactions don't make sense, and a good
    application server will treat them as errors. </para>
  </sect1>

  <sect1>
    <title>AppServer-specific integration</title>

    <para>Spring's transaction abstraction is generally AppServer agnostic.
    Additionally, Spring's <literal>JtaTransactionManager</literal> class,
    which can optionally perform a JNDI lookup for the JTA
    <literal>UserTransaction</literal> and
    <literal>TransactionManager</literal> objects, can be set to autodetect
    the location for the latter object, which varies by AppServer. Having
    access to the <literal>TransactionManager</literal> instance does allow
    enhanced transaction semantics. Please see the
    <literal>JtaTransactionManager</literal> Javadocs for more details.</para>

    <sect2>
      <title>BEA WebLogic</title>

      <para>In a WebLogic 7.0, 8.1 or higher environment, you will generally
      prefer to use <literal>WebLogicJtaTransactionManager</literal> instead
      of the stock <literal>JtaTransactionManager</literal> class. This
      special WebLogic specific subclass of the normal
      <literal>JtaTransactionManager</literal>. It supports the full power of
      Spring's transaction definitions in a WebLogic managed transaction
      environment, beyond standard JTA semantics: features include transaction
      names, per-transaction isolation levels, and proper resuming of
      transactions in all cases. </para>

      <para>Please see the Javadocs for full details. </para>
    </sect2>

    <sect2>
      <title>IBM WebSphere</title>

      <para>In a WebSphere 5.1, 5.0 and 4 environment, you may wish to use
      Spring's <literal>WebSphereTransactionManagerFactoryBean</literal>
      class. This is a factory bean which retrieves the JTA
      <literal>TransactionManager</literal> in a WebSphere environment, which
      is done via WebSphere's static access methods. These methods are
      different for each version of WebSphere.</para>

      <para>Once the JTA <literal>TransactionManager</literal> instance has
      been obtained via this factory bean, Spring's
      <literal>JtaTransactionManager</literal> may be configured with a
      reference to it, for enhanced transaction semantics over the use of only
      the JTA <literal>UserTransaction</literal> object.</para>

      <para>Please see the Javadocs for full details.</para>
    </sect2>
  </sect1>
</chapter>