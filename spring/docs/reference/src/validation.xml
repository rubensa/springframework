<?xml version="1.0" encoding="UTF-8"?>
<chapter id="validation">
  <title>PropertyEditors, data binding, validation and the BeanWrapper</title>

  <section id="validation-introduction">
    <title>Introduction</title>

    <para>The big question is whether or not validation should be considered
    <emphasis>business logic</emphasis>. There are pros and cons for both
    answers, and Spring offers a design for validation (and data binding) that
    does not exclude either one of them. Validation should specifically not be
    tied to the web tier, should be easy to localize and it should be
    possible to plug in any validator available. Considering the above, Spring
    has come up with a <literal>Validator</literal> interface that's both
    basic and usable in every layer of an application.</para>

    <para>Data binding is useful for allowing user input to be dynamically
    bound to the domain model of an application (or whatever objects you use
    to process user input). Spring provides the so-called
    <literal>DataBinder</literal> to do exactly that. The Validator and the
    DataBinder make up the <literal>validation</literal> package, which is
    primarily used in but not limited to the MVC framework.</para>

    <para>The <literal>BeanWrapper</literal> is a fundamental concept in the
    Spring Framework and is used in a lot of places. However, you probably
    will not ever have the need to use the BeanWrapper directly. Because this
    is reference documentation however, we felt that some explanation might be
    right. We're explaining the BeanWrapper in this chapter since if you were
    going to use it at all, you would probably do that when trying to bind
    data to objects, which is strongly related to the BeanWrapper.</para>

    <para>Spring uses PropertyEditors all over the place. The concept of a
    PropertyEditor is part of the JavaBeans specification. Just as the
    BeanWrapper, it's best to explain the use of PropertyEditors in this
    chapter as well, since it's closely related to the BeanWrapper and the
    DataBinder.</para>
  </section>

  <section id="validation-databinding">
    <title>Binding data using the <literal>DataBinder</literal></title>

    <para>The DataBinder builds on top of the BeanWrapper<footnote>
        <para>See <link linkend="beans">the beans chapter</link> for more
        information</para>
      </footnote>.</para>
  </section>

  <section id="beans-beans">
    <title>Bean manipulation and the <literal>BeanWrapper</literal></title>

    <para>The <literal>org.springframework.beans</literal> package adheres to
    the JavaBeans standard provided by Sun. A JavaBean is simply a class with
    a default no-argument constructor, which follows a naming conventions
    where a property named <literal>prop</literal> has a setter
    <literal>setProp(...)</literal> and a getter <literal>getProp()</literal>.
    For more information about JavaBeans and the specification, please refer
    to Sun's website (<ulink
    url="http://java.sun.com/products/javabeans/">java.sun.com/products/javabeans</ulink>).</para>

    <para>One quite important concept of the beans package is the
    <literal>BeanWrapper</literal> interface and its corresponding
    implementation (<literal>BeanWrapperImpl</literal>). As quoted from the
    Javadoc, the BeanWrapper offers functionality to set and get property
    values (individually or in bulk), get property descriptors, and to query
    properties to determine if they are readable or writable. Also, the
    BeanWrapper offers support for nested properties, enabling the setting of
    properties on sub-properties to an unlimited depth. Then, the BeanWrapper
    supports the ability to add standard JavaBeans
    <literal>PropertyChangeListeners</literal> and
    <literal>VetoableChangeListeners</literal>, without the need for
    supporting code in the target class. Last but not least, the BeanWrapper
    provides support for the setting of indexed properties. The BeanWrapper
    usually isn't used by application code directly, but by the
    <literal>DataBinder</literal> and the
    <literal>BeanFactory</literal>.</para>

    <para>The way the BeanWrapper works is partly indicated by its name:
    <emphasis>it wraps a bean</emphasis> to perform actions on that bean, like
    setting and retrieving properties.</para>

    <section id="beans-beans-conventions">
      <title>Setting and getting basic and nested properties</title>

      <para>Setting and getting properties is done using the
      <literal>setPropertyValue(s)</literal> and
      <literal>getPropertyValue(s)</literal> methods that both come with a
      couple of overloaded variants. They're all described in more detail in
      the Javadoc Spring comes with. What's important to know is that there
      are a couple of conventions for indicating properties of an object. A
      couple of examples: <table frame="all">
          <title>Examples of properties</title>

          <tgroup cols="2">
            <colspec colname="c1" colwidth="1*" />

            <colspec colname="c2" colwidth="3*" />

            <thead>
              <row>
                <entry>Expression</entry>

                <entry>Explanation</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><literal>name</literal></entry>

                <entry>Indicates the property <literal>name</literal>
                corresponding to the methods <literal>getName()</literal> or
                <literal>isName()</literal> and
                <literal>setName()</literal></entry>
              </row>

              <row>
                <entry><literal>account.name</literal></entry>

                <entry>Indicates the nested property <literal>name</literal>
                of the property <literal>account</literal> corresponding e.g.
                to the methods <literal>getAccount().setName()</literal> or
                <literal>getAccount().getName()</literal></entry>
              </row>

              <row>
                <entry><literal>account[2]</literal></entry>

                <entry>Indicates the <emphasis>third</emphasis> element of the
                indexed property <literal>account</literal>. Indexed
                properties can be of type <literal>array</literal>,
                <literal>list</literal> or other <emphasis>naturally
                ordered</emphasis> collection</entry>
              </row>

              <row>
                <entry><literal>account[COMPANYNAME]</literal></entry>

                <entry>Indicates the value of the map entry indexed by the key
                <emphasis>COMPANYNAME</emphasis> of the Map property
                <literal>account</literal></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para>Below you'll find some examples of working with the BeanWrapper to
      get and set properties.</para>

      <para><emphasis>Note: this part is not important to you if you're not
      planning to work with the BeanWrapper directly. If you're just using the
      <literal>DataBinder</literal> and the <literal>BeanFactory</literal> and
      their out-of-the-box implementation, you should skip ahead to the
      section about <literal>PropertyEditors</literal>.</emphasis></para>

      <para>Consider the following two classes: <programlisting>public class Company {
    private String name;
    private Employee managingDirector;

    public String getName()	{ 
        return this.name; 
    }
    public void setName(String name) { 
        this.name = name; 
    } 
    public Employee getManagingDirector() { 
        return this.managingDirector; 
    }
    public void setManagingDirector(Employee managingDirector) {
        this.managingDirector = managingDirector;
    }
}</programlisting> <programlisting>public class Employee {
    private float salary;

    public float getSalary() {
        return salary;
    }
    public void setSalary(float salary) {
        this.salary = salary;
    }
}</programlisting></para>

      <para>The following code snippets show some examples of how to retrieve
      and manipulate some of the properties of instantiated
      <literal>Companies</literal> and <literal>Employees</literal>:</para>
      <programlisting><![CDATA[Company c = new Company();
BeanWrapper bwComp = BeanWrapperImpl(c);
// setting the company name...
bwComp.setPropertyValue("name", "Some Company Inc.");
// ... can also be done like this:
PropertyValue v = new PropertyValue("name", "Some Company Inc.");
bwComp.setPropertyValue(v);

]]><lineannotation>// ok, let's create the director and tie it to the company:</lineannotation><![CDATA[
Employee jim = new Employee();
BeanWrapper bwJim = BeanWrapperImpl(jim);
bwJim.setPropertyValue("name", "Jim Stravinsky");
bwComp.setPropertyValue("managingDirector", jim);

]]><lineannotation>// retrieving the salary of the managingDirector through the company</lineannotation><![CDATA[
Float salary = (Float)bwComp.getPropertyValue("managingDirector.salary");]]></programlisting>
    </section>

    <section id="beans-beans-conversion">
      <title>Built-in <interface>PropertyEditor</interface> implementations</title>

      <para>Spring heavily uses the concept of
      <literal>PropertyEditors</literal>. Sometimes it might be handy to be
      able to represent properties in a different way than the object itself.
      For example, a date can be represented in a human readable way, while
      we're still able to convert the human readable form back to the original
      date (or even better: convert any date entered in a human readable form,
      back to Date objects). This behavior can be achieved by
      <emphasis>registering custom editors</emphasis>, of type
      <literal>java.beans.PropertyEditor</literal>. Registering custom editors
      on a BeanWrapper or alternately in a specific Application Context as
      mentioned in the previous chapter, gives it the knowledge of how to
      convert properties to the desired type. Read more about PropertyEditors
      in the Javadoc of the <literal>java.beans</literal> package provided by
      Sun.</para>

      <para>A couple of examples where property editing is used in Spring
      <itemizedlist spacing="compact">
          <listitem>
            <para><emphasis>setting properties on beans</emphasis> is done
            using PropertyEditors. When mentioning
            <literal>java.lang.String</literal> as the value of a property of
            some bean you're declaring in XML file, Spring will (if the setter
            of the corresponding property has a Class-parameter) use the
            <literal>ClassEditor</literal> to try to resolve the parameter to
            a Class object</para>
          </listitem>

          <listitem>
            <para><emphasis>parsing HTTP request parameters</emphasis> in
            Spring's MVC framework is done using all kinds of PropertyEditors
            that you can manually bind in all subclasses of the
            <literal>CommandController</literal></para>
          </listitem>
        </itemizedlist></para>

      <para>Spring has a number of built-in PropertyEditors to make life easy.
      Each of those is listed below and they are all located in the
      <literal>org.springframework.beans.propertyeditors</literal> package.
      Most, but not all (as indicated below), are registered by default by
      BeanWrapperImpl. Where the property editor is configurable in some
      fashion, you can of course still register your own variant to override
      the default one: <table frame="all">
          <title>Built-in PropertyEditors</title>

          <tgroup cols="2">
            <colspec colname="c1" colwidth="3*" />

            <colspec colname="c2" colwidth="5*" />

            <thead>
              <row>
                <entry>Class</entry>

                <entry>Explanation</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><literal>ByteArrayPropertyEditor</literal></entry>

                <entry>Editor for byte arrays. Strings will simply be
                converted to their corresponding byte representations.
                Registered by default by BeanWrapperImpl.</entry>
              </row>

              <row>
                <entry><literal>ClassEditor</literal></entry>

                <entry>Parses Strings representing classes to actual classes
                and the other way around. When a class is not found, an
                IllegalArgumentException is thrown. Registered by default by
                BeanWrapperImpl.</entry>
              </row>

              <row>
                <entry><literal>CustomBooleanEditor</literal></entry>

                <entry>Customizable property editor for Boolean properties.
                Registered by default by BeanWrapperImpl, but, can be
                overridden by registering custom instance of it as custom
                editor.</entry>
              </row>
              <row>
                <entry><literal>CustomCollectionEditor</literal></entry>
                <entry>Property editor for Collections, converting any source Collection
                to a given target Collection type.</entry>
              </row>
              <row>
                <entry><literal>CustomDateEditor</literal></entry>

                <entry>Customizable property editor for java.util.Date,
                supporting a custom DateFormat. NOT registered by default. Must
                be user registered as needed with appropriate format.</entry>
              </row>

              <row>
                <entry><literal>CustomNumberEditor</literal></entry>

                <entry>Customizable property editor for any Number subclass
                like Integer, Long, Float, Double. Registered by default by
                BeanWrapperImpl, but, can be overridden by registering custom
                instance of it as custom editor.</entry>
              </row>

              <row>
                <entry><literal>FileEditor</literal></entry>

                <entry>Capable of resolving Strings to
                <literal>java.io.File</literal> objects. Registered by default by
                BeanWrapperImpl. </entry>
              </row>

              <row>
                <entry><literal>InputStreamEditor</literal></entry>

                <entry>One-way property editor, capable of taking a text
                string and producing (via an intermediate ResourceEditor and
                Resource) an InputStream, so InputStream properties may be
                directly set as Strings. Note that the default usage
                will not close the InputStream for you! Registered by default
                by BeanWrapperImpl.</entry>
              </row>

              <row>
                <entry><literal>LocaleEditor</literal></entry>

                <entry>Capable of resolving Strings to
                <literal>Locale</literal> objects and vice versa (the String
                format is [language]_[country]_[variant], which is the same
                thing the toString() method of Locale provides). Registered by
                default by BeanWrapperImpl.</entry>
              </row>

              <row>
                <entry><literal>PropertiesEditor</literal></entry>

                <entry>Capable of converting Strings (formatted using the
                format as defined in the Javadoc for the java.lang.Properties
                class) to <literal>Properties</literal> objects. Registered by
                default by BeanWrapperImpl.</entry>
              </row>

              <row>
                <entry><literal>StringArrayPropertyEditor</literal></entry>

                <entry>Capable of resolving a comma-delimited list of String
                to a String-array and vice versa. Registered by default by
                BeanWrapperImpl.</entry>
              </row>

              <row>
                <entry><literal>StringTrimmerEditor</literal></entry>

                <entry>Property editor that trims Strings. Optionally allows
                transforming an empty string into a null value. NOT registered
                by default. Must be user registered as needed.</entry>
              </row>

              <row>
                <entry><literal>URLEditor</literal></entry>

                <entry>Capable of resolving a String representation of a URL
                to an actual <literal>URL</literal> object. Registered by
                default by BeanWrapperImpl.</entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para>
		Spring uses the <interfacename>java.beans.PropertyEditorManager</interfacename> to set
		the search path for property editors that might be needed. The search path also includes
		<literal>sun.bean.editors</literal>, which includes
		<interfacename>PropertyEditor</interfacename> implementations for types such as
		<classname>Font</classname>, <classname>Color</classname>, and most fo the primitive types.
		Note also that the standard JavaBeans infrastructure will automatically discover
		<interfacename>PropertyEditor</interfacename> classes (without you having to register them
		explicitly) if they are in the same package as the class they handle, and have the same name
		as that class, with <literal>'Editor'</literal> appended; for example, one could have the
		following class and package structure, which would be sufficient for the
		<classname>FooEditor</classname> class to be recognized and used as the
		<interfacename>PropertyEditor</interfacename> for <classname>Foo</classname>-typed
		properties.
	  </para>
	  <programlisting><![CDATA[com
  chank
    pop
      Foo
      FooEditor   ]]><lineannotation>// the <interfacename>PropertyEditor</interfacename> for the <classname>Foo</classname> class</lineannotation></programlisting>
      <para>
		Note that you can also use the standard <interfacename>BeanInfo</interfacename> JavaBeans
		mechanism here as well (described
		<ulink url="http://java.sun.com/docs/books/tutorial/javabeans/customization/index.html">in not-amazing-detail here</ulink>).
		Find below an example of using the <interfacename>BeanInfo</interfacename> mechanism for
		explicitly registering one or more <interfacename>PropertyEditor</interfacename> instances
		with the properties of an associated class.
      </para>
	  <programlisting><![CDATA[com
  chank
    pop
      Foo
      FooBeanInfo   ]]><lineannotation>// the <interfacename>BeanInfo</interfacename> for the <classname>Foo</classname> class</lineannotation></programlisting>
      <para>
		And here is the Java source code for the referenced <classname>FooBeanInfo</classname> class. This
		would associate a <classname>CustomNumberEditor</classname> with the <literal>age</literal>
		property of the <classname>Foo</classname> class.
	  </para>
	  <programlisting><![CDATA[public class FooBeanInfo extends SimpleBeanInfo {
      
    public PropertyDescriptor[] getPropertyDescriptors() {
        try {
            final PropertyEditor numberPE = new CustomNumberEditor(Integer.class, true);
            PropertyDescriptor ageDescriptor = new PropertyDescriptor("age", Foo.class) {
                public PropertyEditor createPropertyEditor(Object bean) {
                    return numberPE;
                };
            };
            return new PropertyDescriptor[] { ageDescriptor };
        }
        catch (IntrospectionException ex) {
            throw new Error(ex.toString());
        }
    }
}]]></programlisting>


        <section id="beans-beans-conversion-customeditor-registration">
            <title>Registering additional custom <literal>PropertyEditors</literal></title>
            <para>When setting bean properties as a string value, a Spring IoC container
            ultimately uses standard JavaBeans <literal>PropertyEditors</literal> to convert these
            Strings to the complex type of the property. Spring pre-registers a number
            of custom <literal>PropertyEditors</literal> (for example, to convert a classname expressed
            as a string into a real <classname>Class</classname> object). Additionally, Java's standard
            JavaBeans <interfacename>PropertyEditor</interfacename> lookup mechanism allows a <classname>PropertyEditor</classname> for a
            class to be simply named appropriately and placed in the same package as
            the class it provides support for, to be found automatically.</para>
            <para>If there is a need to register other custom <literal>PropertyEditors</literal>, there
            are several mechanisms available. The most manual approach, which is not normally convenient or
            recommended, is to simply use the <methodname>registerCustomEditor()</methodname> method of the
            <interfacename>ConfigurableBeanFactory</interfacename> interface, assuming you have a
            <interfacename>BeanFactory</interfacename> reference. The more convenient mechanism is to use
            a special bean factory post-processor called <classname>CustomEditorConfigurer</classname>.
            Although bean factory post-processors can be used semi-manually with
            <interfacename>BeanFactory</interfacename> implementations, this one has a nested property
            setup, so it is strongly recommended that it is used
            with the <interfacename>ApplicationContext</interfacename>, where it may be deployed in similar fashion
            to any other bean, and automatically detected and applied.</para>
            <para>Note that all bean factories and application contexts automatically
            use a number of built-in property editors, through their use of something
            called a <interfacename>BeanWrapper</interfacename> to handle property conversions.
            The standard property editors that the <interfacename>BeanWrapper</interfacename> registers
            are listed in <link linkend="beans-beans-conversion">a subsequent chapter</link>. Additionally,
            <literal>ApplicationContexts</literal> also override or add an additional number of editors
            to handle resource lookups in a manner appropriate to the specific application context type.</para>

        <para>
			Standard JavaBeans <interfacename>PropertyEditor</interfacename>
			instances are used to convert property values expressed as strings to
			the actual complex type of the property.
			<classname>CustomEditorConfigurer</classname>, a bean factory post-processor,
			may be used to conveniently add support for additional
			<interfacename>PropertyEditor</interfacename> instances to an
			<interfacename>ApplicationContext</interfacename>.
		</para>
        <para>
			Consider a user class <classname>ExoticType</classname>, and another
			class <classname>DependsOnExoticType</classname> which needs
			<classname>ExoticType</classname> set as a property:
		</para>
		<programlisting><![CDATA[public class ExoticType {

    private String name;

    public ExoticType(String name) {
        this.name = name;
    }
}

public class DependsOnExoticType { 
   
    private ExoticType type;

    public void setType(ExoticType type) {
        this.type = type;
    }
}]]></programlisting>
		<para>When things are properly set up, we want to be able to assign the type property
		as a string, which a <interfacename>PropertyEditor</interfacename> will behind the scenes
		convert into a real <classname>ExoticType</classname> object:</para>
		<programlisting><![CDATA[<bean id="sample" class="example.DependsOnExoticType">
    <property name="type" value="aNameForExoticType"/>
</bean>]]></programlisting>
		<para>The <interfacename>PropertyEditor</interfacename> implementation could look similar to this:</para>
		<programlisting><![CDATA[// converts string representation to ExoticType object
public class ExoticTypeEditor extends PropertyEditorSupport {

    private String format;

    public void setFormat(String format) {
        this.format = format;
    }
    
    public void setAsText(String text) {
        if (format != null &amp;&amp; format.equals("upperCase")) {
            text = text.toUpperCase();
        }
        ExoticType type = new ExoticType(text);
        setValue(type);
    }
}]]></programlisting>
		<para>Finally, we use <classname>CustomEditorConfigurer</classname> to
		register the new <interfacename>PropertyEditor</interfacename>
		with the <interfacename>ApplicationContext</interfacename>, which will
		then be able to use it as needed:</para>
		<programlisting><![CDATA[<bean id="customEditorConfigurer" 
    class="org.springframework.beans.factory.config.CustomEditorConfigurer">
  <property name="customEditors">
    <map>
      <entry key="example.ExoticType">
        <bean class="example.ExoticTypeEditor">
          <property name="format" value="upperCase"/>
        </bean>
      </entry>
    </map>
  </property>
</bean>]]></programlisting>
        </section>

    </section>

    <section id="beans-beans-other">
      <title>Other features worth mentioning</title>

      <para>Besides the features you've seen in the previous sections there a
      couple of features that might be interesting to you, though not worth an
      entire section. <itemizedlist spacing="compact">
          <listitem>
            <para><emphasis>determining readability and
            writability</emphasis>: using the <literal>isReadable()</literal>
            and <literal>isWritable()</literal> methods, you can determine
            whether or not a property is readable or writable</para>
          </listitem>

          <listitem>
            <para><emphasis>retrieving PropertyDescriptors</emphasis>: using
            <literal>getPropertyDescriptor(String)</literal> and
            <literal>getPropertyDescriptors()</literal> you can retrieve
            objects of type <literal>java.beans.PropertyDescriptor</literal>,
            that might come in handy sometimes</para>
          </listitem>
        </itemizedlist></para>
    </section>
  </section>
	
	<section id="validator">
		<title>Validation using Spring's Validator interface</title>
		<para>
			Spring's features a Validator interface you can use to validate objects.
			The Validator interface, is pretty straightforward and works using with
			a so-called Errors object. In other words, while validating, validators
			will report validation failures to the Errors object.
		</para>
		<para>
			As said already, the Validator interface is pretty straightforward, just
			as implementing one yourself. Let's consider a small data object:
			<programlisting><![CDATA[
public class Person {
  private String name;
  private int age;

  // the usual suspects: getters and setters
}]]></programlisting>
		</para>
		<para>
			Using the <literal>org.springframework.validation.Validator</literal>
			interface we're going to provide validation behavior for the <literal>Person</literal>
			class. This is the Validator interface:
			<itemizedlist spacing="compact">
				<listitem>
					<para><literal>supports(Class)</literal> - indicates whether or not this validator
					supports the given object</para>
					<para><literal>validate(Object, org.springframework.validation.Errors)</literal> - 
					validates the given object and in case of validation errors, put registers
					those with the given Errors object</para>					
				</listitem>				
			</itemizedlist>
		</para>
		<para>
			Implementing a validator is fairly straightforward, especially when you know of the 
			<literal>ValidationUtils</literal> Spring also provides. Let's review 
			how a validator is created:
			<programlisting><![CDATA[public class PersonValidator implements Validator {
    
    public boolean supports(Class clazz) {
        return Person.class.equals(clazz);
    }
    
    public void validate(Object obj, Errors e) {
        ValidationUtils.rejectIfEmpty(e, "name", "name.empty");
        Person p = (Person) obj;
        if (p.getAge() < 0) {
            e.rejectValue("age", "negativevalue");
        } else if (p.getAge() > 110) {
            e.rejectValue("age", "tooold");
        }
    }
}]]></programlisting>
			As you can see, a <literal>static</literal> method on the
			<classname>ValidationUtils</classname> class is used to reject the name
			property. Have a look at the Javadoc for <classname>ValidationUtils</classname> to see
			what functionality it provides besides the example shown above.
		</para>
	</section>
	<section id="validation-errors">
		<title>The Errors interface</title>
		<para>
			Validation errors are reported to the Errors object passed to the validator.
			In case of Spring Web MVC you can use <literal>spring:bind</literal> tags to
			inspect the error messages, but of course you can also inspect the errors
			object yourself. The methods it offers are pretty straightforward. More information
			can be found in the Javadoc.
		</para>
	</section>
	<section id="validation-conversion">
		<title>Resolving codes to error messages</title>
		<para>
			We've talked about databinding and validation. Outputting messages corresponding to 
			validation errors is the last thing we need to discuss. In the example we've shown
			above, we rejected the <literal>name</literal> and the <literal>age</literal> field.
			If, using a <literal>MessageSource</literal>, we're going to output the error messages
			we will do so using the error code we've given when rejecting the field ('name' and 'age'
			in this case). When you call (either directly, or indirectly, using for example the 
			<literal>ValidationUtils</literal> class) <literal>rejectValue</literal> or one of
			the other <literal>reject</literal> method from the Errors interface, the underlying 
			implementation will not only register the code, you've passed in, but also a number of
			additional error codes. What error codes it registers is determined by the
			<literal>MessageCodesResolver</literal> that is used.
			By default, the <literal>DefaultMessageCodesResolver</literal> is used, which for example
			not only register a message with the code you gave, but also messages that include the 
			field name you passed to the reject method. So in case you reject a field using
			<literal>rejectValue("age", "tooold")</literal>, apart from the <literal>tooold</literal> code,
			Spring will also register <literal>tooold.age</literal> and <literal>tooold.age.int</literal>
			(so the first will include the field name and the second will include the type of the field).
		</para>
		<para>
			More information on the MessageCodesResolver and the default strategy can be found online with the Javadocs for
			<ulink url="http://www.springframework.org/docs/api/org/springframework/validation/MessageCodesResolver.html">
				MessageCodesResolver
			</ulink> and 
			<ulink url="http://www.springframework.org/docs/api/org/springframework/validation/DefaultMessageCodesResolver.html">
				DefaultMessageCodesResolver
			</ulink> respectively. 
		</para>		
	</section>
</chapter>