<chapter id="validation">

    <title>Validating and data binding</title>
    
    <sect1 id="validation-introduction">
    	<title>Introduction</title>
    	<para>
			The big question is whether or not validation should be considered <emphasis>business
			logic</emphasis>. There's pros and cons for both answers and Spring offers a design
			for validation (and data binding) that does not exclude either one of them. Validation
			should specifically not be tied to the web tier, should be easily localizable and it should
			be possible to plug in any validator available. Considering the above, Spring has come up
			with a <literal>Validator</literal> interface that's both basic and usable in every layer
			of an application.
		</para>
		<para>
			Data binding is useful for allowing user input to be dynamically bound to the domain model
			of an application (or whatever objects you use to process user input). Spring provides the
			so-called <literal>DataBinder</literal> to do exactly that. The Validator and the DataBinder
			make up the <literal>validation</literal> package, which is primarily used in the MVC framework.
		</para>
	</sect1>
	
	<sect1 id="validation-databinding">
		<title>Binding data using the <literal>DataBinder</literal></title>
		<para>
			The DataBinder builds on top the BeanWrapper<footnote>
				<para>
					See <link linkend="beans-beans">the beans chapter</link> for more information
				</para>
			</footnote>
		</para>
	</sect1>

</chapter>


