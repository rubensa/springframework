<?xml version="1.0" encoding="UTF-8" ?>
<appendix id="xsd-config">
    <title>XML Schema-based configuration</title>
    <section>
        <title>Introduction</title>
        <para>This section of the reference documentation details the XML Schema based
    configuration introduced in Spring 2.0.</para>
        <sidebar>
            <title>DTD support?</title>
            <para>Authoring Spring configuration files using the older DTD style
            is still fully supported.</para>
            <para>Nothing will break if you forego the use of the new XML Schema-based
            approach to authoring Spring XML configuration files. All that you lose
            out on is more succinct and clearer configuration. In the end, all of the
            XML configuration, be it DTD- or Schema-based, all boils down to the same
            object model in the container.</para>
        </sidebar>
        <para>The central motivation for moving to XML Schema based configuration files was
        to make Spring XML configuration easier. The <emphasis>'classic'</emphasis>
        <literal>&lt;bean/&gt;</literal>-based approach is good, but its generic-nature comes
        with a price in terms of configuration overhead.</para>
        <para>From the Spring IoC containers point-of-view, <emphasis>everything</emphasis>
        is a bean. That's great news for the Spring IoC container, because if everything is
        a bean then everything can be treated in the exact same fashion. The same, however,
        is not true from a developer's point-of-view. The objects defined in a Spring
        XML configuration file are not all generic, vanilla beans. Usually, each bean requires
        some degree of specific configuration.</para>
        <para>Spring 2.0's new XML Schema-based configuration addresses this issue.
        The <literal>&lt;bean/&gt;</literal> element is still present, and if you
        wanted to, you could continue to write the <emphasis>exact same</emphasis>
        style of Spring XML configuration using only <literal>&lt;bean/&gt;</literal>
        elements. The new XML Schema-based configuration does, however, make
        Spring XML configuration files substantially clearer to read. In addition, it allows
        you to express the intent of a bean definition.
        </para>
        <para>The key thing to remember is that the new custom tags work best for infrastructure
        or integration beans: for example, AOP, collections, transactions, integration with
        3rd-party frameworks such as Mule, etc, while the existing bean tags are best suited to
        application-specific beans, such as DAOs, service layer objects, validators, etc.
        </para>
        <para>The examples included below will hopefully convince you that the inclusion
        of XML Schema support in Spring 2.0 was a good idea. The reception in the community
        has been encouraging; something that is not covered in this section (at least
        not right now) is the fact that this new configuration mechanism is totally
        customisable and extensible. This means you can write your own domain-specific
        configuration tags that would better represent your application's domain.</para>
    </section>
    <section id="xsd-config-body">
        <title>XML Schema-based configuration</title>
        <section id="xsd-config-body-referencing">
            <title>Referencing the schemas</title>
            <para>To switch over from the DTD-style to the new XML Schema-style, you need
            to make the following change.</para>
            <programlisting><lineannotation>&lt;!-- DTD-style --&gt;</lineannotation>
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN"
    "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>

]]><lineannotation>&lt;!-- <literal>&lt;bean/&gt;</literal> definitions here --&gt;</lineannotation><![CDATA[

</beans>]]></programlisting>
            <para>The equivalent file in the XML Schema-style would be...</para>
            <programlisting><lineannotation>&lt;!-- XML Schema-style --&gt;</lineannotation>
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

]]><lineannotation>&lt;!-- <literal>&lt;bean/&gt;</literal> definitions here --&gt;</lineannotation><![CDATA[

</beans>]]></programlisting>
            <note>
                <para>The <literal>'xsi:schemaLocation'</literal> fragment is not actually required,
                but can be specified to refer to a local copy of a schema (which can be useful
                during development).</para>
            </note>
            <para>The above Spring XML configuration fragment is pretty much boilerplate;
            you can simply use this and continue to write
            <literal>&lt;bean/&gt;</literal> definitions like you have always done.
            However, the entire point of switching over is to take advantage of the new Spring 2.0 XML tags since
            they make configuration easier. The section entitled <xref linkend="xsd-config-body-schemas-util"/>
            demonstrates how you can start immediately by using some of the more common utility tags.
            </para>
        </section>
        <para>The rest of this chapter is devoted to showing examples of the new Spring XML Schema
        based configuration, with at least one example for every new tag. The format follows
        a before and after style, with a <literal>'before'</literal> snippet of XML showing
        the old (but still 100% legal and supported) style, followed immediately
        by an <literal>'after'</literal> example showing the equivalent in the new XML Schema-based
        style.
        </para>
        <section id="xsd-config-body-schemas-util">
            <title>The <literal>util</literal> schema</title>
            <para>First up is coverage of the <literal>util</literal> tags. As the name
            implies, the <literal>util</literal> tags deal with common, <emphasis>utility</emphasis>
            configuration issues, such as configuring collections and suchlike.
            </para>
            <para>To use the tags in the <literal>util</literal> schema, you need to have
            the following preamble at the top of your Spring XML configuration file;
            the emboldened text in the snippet below references the correct schema so that
            the tags in the <literal>util</literal> namespace are available to you.</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       ]]><emphasis role="bold">xmlns:util="http://www.springframework.org/schema/util"</emphasis><![CDATA[
       xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
]]><emphasis role="bold">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"</emphasis><![CDATA[>

]]><lineannotation>&lt;!-- <literal>&lt;bean/&gt;</literal> definitions here --&gt;</lineannotation><![CDATA[

</beans>]]></programlisting>
            <section>
                <title><literal>&lt;util:constant/&gt;</literal></title>
                <para>Before...</para>    
                <programlisting><![CDATA[<bean id="..." class="...">
  <property name="isolation">
    <bean id="java.sql.Connection.TRANSACTION_SERIALIZABLE"
    class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />
  </property>
</bean>]]></programlisting>
                <para>The above configuration uses a Spring <interfacename>FactoryBean</interfacename>
                implementation, the <classname>FieldRetrievingFactoryBean</classname>, to
                set the value of the <literal>'isolation'</literal> property on a bean
                to the value of the <literal>'java.sql.Connection.TRANSACTION_SERIALIZABLE'</literal>
                constant. This is all well and good, but it is a tad verbose and (unneccessarily)
                exposes Spring's internal plumbing to the end user.
                </para>
                <para>The following XML Schema-based version is more concise
                and clearly expresses the developer's intent (<emphasis>'inject this constant
                value'</emphasis>), and it just reads better.
                </para>
                <programlisting><![CDATA[<bean id="..." class="...">
    <property name="isolation">
        <util:constant static-field="java.sql.Connection.TRANSACTION_SERIALIZABLE"/>
    </property>
</bean>]]></programlisting>
            </section>
            <section>
                <title><literal>&lt;util:property-path/&gt;</literal></title>
                <para>Before...</para>    
                <programlisting><lineannotation>&lt;!-- target bean to be referenced by name --&gt;</lineannotation><![CDATA[
<bean id="testBean" class="org.springframework.beans.TestBean" singleton="false">
  <property name="age" value="10"/>
  <property name="spouse">
    <bean class="org.springframework.beans.TestBean">
      <property name="age" value="11"/>
    </bean>
  </property>
</bean>

]]><lineannotation>&lt;!-- will result in 10, which is the value of property 'age' of bean 'testBean' --&gt;</lineannotation><![CDATA[
<bean id="testBean.age" class="org.springframework.beans.factory.config.PropertyPathFactoryBean"/>]]></programlisting>
                <para>The above configuration uses a Spring <interfacename>FactoryBean</interfacename>
                implementation, the <classname>PropertyPathFactoryBean</classname>, to
                create a bean (of type <classname>int</classname>) called
                <literal>'testBean.age'</literal> that has a value equal to the <literal>'age'</literal>
                property of the <literal>'testBean'</literal> bean.
                </para>
                <para>After...</para>
                <programlisting><lineannotation>&lt;!-- target bean to be referenced by name --&gt;</lineannotation><![CDATA[
<bean id="testBean" class="org.springframework.beans.TestBean" singleton="false">
  <property name="age" value="10"/>
  <property name="spouse">
    <bean class="org.springframework.beans.TestBean">
      <property name="age" value="11"/>
    </bean>
  </property>
</bean>

]]><lineannotation>&lt;!-- will result in 10, which is the value of property 'age' of bean 'testBean' --&gt;</lineannotation><![CDATA[
<util:property-path id="name" path="testBean.age"/>]]></programlisting>
                <para>The value of the <literal>'path'</literal> attribute of the
                <literal>&lt;property-path/&gt;</literal> tag follows the form <literal>'beanName.beanProperty'</literal>.</para>
            </section>
            <section>
                <title><literal>&lt;util:properties/&gt;</literal></title>
                <para>Before...</para>    
                <programlisting><lineannotation>&lt;!-- creates a <classname>java.util.Properties</classname> instance with values loaded from the supplied location --&gt;</lineannotation><![CDATA[
<bean id="jdbcConfiguration" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
  <property name="location" value="classpath:com/foo/jdbc-production.properties"/>
</bean>]]></programlisting>
                <para>The above configuration uses a Spring <interfacename>FactoryBean</interfacename>
                implementation, the <classname>PropertiesFactoryBean</classname>, to
                instantiate a <classname>java.util.Properties</classname> instance with values loaded from
                the supplied <link linkend="resources"><interfacename>Resource</interfacename></link> location).
                </para>
                <para>After...</para>
                <programlisting><lineannotation>&lt;!-- creates a <classname>java.util.Properties</classname> instance with values loaded from the supplied location --&gt;</lineannotation><![CDATA[
<util:properties id="jdbcConfiguration" location="classpath:com/foo/jdbc-production.properties"/>]]></programlisting>
            </section>
            <section>
                <title><literal>&lt;util:list/&gt;</literal></title>
                <para>Before...</para>    
                <programlisting><lineannotation>&lt;!-- creates a <classname>java.util.List</classname> instance with values loaded from the supplied <literal>'sourceList'</literal> --&gt;</lineannotation><![CDATA[
<bean id="emails" class="org.springframework.beans.factory.config.ListFactoryBean">
  <property name="sourceList">
      <list>
        <value>pechorin@hero.org</value>
        <value>raskolnikov@slums.org</value>
        <value>stavrogin@gov.org</value>
        <value>porfiry@gov.org</value>
      </list>
  </property>
</bean>]]></programlisting>
                <para>The above configuration uses a Spring <interfacename>FactoryBean</interfacename>
                implementation, the <classname>ListFactoryBean</classname>, to
                create a <classname>java.util.List</classname> instance initialized
                with values taken from the supplied <literal>'sourceList'</literal>.
                </para>
                <para>After...</para>
                <programlisting><lineannotation>&lt;!-- creates a <classname>java.util.List</classname> instance with values loaded from the supplied <literal>'sourceList'</literal> --&gt;</lineannotation><![CDATA[
<util:list id="emails">
    <value>pechorin@hero.org</value>
    <value>raskolnikov@slums.org</value>
    <value>stavrogin@gov.org</value>
    <value>porfiry@gov.org</value>
</util:list>]]></programlisting>
            </section>
            <section>
                <title><literal>&lt;util:map/&gt;</literal></title>
                <para>Before...</para>    
                <programlisting><lineannotation>&lt;!-- creates a <classname>java.util.Map</classname> instance with values loaded from the supplied <literal>'sourceMap'</literal> --&gt;</lineannotation><![CDATA[
<bean id="emails" class="org.springframework.beans.factory.config.MapFactoryBean">
  <property name="sourceMap">
      <map>
        <entry key="pechorin" value="pechorin@hero.org"/>
        <entry key="raskolnikov" value="raskolnikov@slums.org"/>
        <entry key="stavrogin" value="stavrogin@gov.org"/>
        <entry key="porfiry" value="porfiry@gov.org"/>
      </list>
  </property>
</bean>]]></programlisting>
                <para>The above configuration uses a Spring <interfacename>FactoryBean</interfacename>
                implementation, the <classname>MapFactoryBean</classname>, to
                create a <classname>java.util.Map</classname> instance initialized
                with key-value pairs taken from the supplied <literal>'sourceMap'</literal>.
                </para>
                <para>After...</para>
                <programlisting><lineannotation>&lt;!-- creates a <classname>java.util.Map</classname> instance with values loaded from the supplied <literal>'sourceMap'</literal> --&gt;</lineannotation><![CDATA[
<util:map id="emails">
    <entry key="pechorin" value="pechorin@hero.org"/>
    <entry key="raskolnikov" value="raskolnikov@slums.org"/>
    <entry key="stavrogin" value="stavrogin@gov.org"/>
    <entry key="porfiry" value="porfiry@gov.org"/>
</util:map>]]></programlisting>
            </section>
            <section>
                <title><literal>&lt;util:set/&gt;</literal></title>
                <para>Before...</para>    
                <programlisting><lineannotation>&lt;!-- creates a <classname>java.util.Set</classname> instance with values loaded from the supplied <literal>'sourceSet'</literal> --&gt;</lineannotation><![CDATA[
<bean id="emails" class="org.springframework.beans.factory.config.SetFactoryBean">
  <property name="sourceSet">
      <set>
        <value>pechorin@hero.org</value>
        <value>raskolnikov@slums.org</value>
        <value>stavrogin@gov.org</value>
        <value>porfiry@gov.org</value>
      </set>
  </property>
</bean>]]></programlisting>
                <para>The above configuration uses a Spring <interfacename>FactoryBean</interfacename>
                implementation, the <classname>SetFactoryBean</classname>, to
                create a <classname>java.util.Set</classname> instance initialized
                with values taken from the supplied <literal>'sourceSet'</literal>.
                </para>
                <para>After...</para>
                <programlisting><lineannotation>&lt;!-- creates a <classname>java.util.Set</classname> instance with values loaded from the supplied <literal>'sourceSet'</literal> --&gt;</lineannotation><![CDATA[
<util:set id="emails">
    <value>pechorin@hero.org</value>
    <value>raskolnikov@slums.org</value>
    <value>stavrogin@gov.org</value>
    <value>porfiry@gov.org</value>
</util:set>]]></programlisting>
            </section>
        </section>
        <section id="xsd-config-body-schemas-jee">
            <title>The <literal>jee</literal> schema</title>
            <para>The <literal>jee</literal> tags deal with JEE (Java Enterprise Edition)-related
            configuration issues, such as looking up a JNDI object and defining EJB references.</para>
            <para>To use the tags in the <literal>jee</literal> schema, you need to have
            the following preamble at the top of your Spring XML configuration file;
            the emboldened text in the following snippet references the correct schema so that
            the tags in the <literal>jee</literal> namespace are available to you.</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       ]]><emphasis role="bold">xmlns:jee="http://www.springframework.org/schema/jee"</emphasis><![CDATA[
       xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
]]><emphasis role="bold">http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd"</emphasis><![CDATA[>

]]><lineannotation>&lt;!-- <literal>&lt;bean/&gt;</literal> definitions here --&gt;</lineannotation><![CDATA[

</beans>]]></programlisting>
            <section>
                <title><literal>&lt;jee:jndi-lookup/&gt;</literal> (simple)</title>
                <para>Before...</para>
                <programlisting><![CDATA[<bean id="simple" class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName" value="jdbc/MyDataSource"/>
</bean>]]></programlisting>
                <para>After...</para>
                <programlisting><![CDATA[<jee:jndi-lookup id="simple" jndi-name="jdbc/MyDataSource"/>]]></programlisting>
            </section>
            <section>
                <title><literal>&lt;jee:jndi-lookup/&gt;</literal> (with JNDI environment setting)</title>
                <para>Before...</para>
                <programlisting><![CDATA[<bean id="simple" class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName" value="jdbc/MyDataSource"/>
    <property name="jndiEnvironment">
        <props>
            <prop key="foo">bar</prop>
        </props>
    </property>
</bean>]]></programlisting>
                <para>After...</para>
                <programlisting><![CDATA[<jee:jndi-lookup id="simple" jndi-name="jdbc/MyDataSource">
    <jee:environment>foo=bar</jee:environment>
</jee:jndi-lookup>]]></programlisting>
            </section>
            <section>
                <title><literal>&lt;jee:jndi-lookup/&gt;</literal> (with JNDI environment settings)</title>
                <para>Before...</para>
                <programlisting><![CDATA[<bean id="simple" class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName" value="jdbc/MyDataSource"/>
    <property name="jndiEnvironment">
        <props>
            <prop key="foo">bar</prop>
            <prop key="ping">pong</prop>
        </props>
    </property>
</bean>]]></programlisting>
                <para>After...</para>
                <programlisting><![CDATA[<jee:jndi-lookup id="simple" jndi-name="jdbc/MyDataSource">
    <jee:environment>foo=bar</jee:environment>
    <jee:environment>ping=pong</jee:environment>
</jee:jndi-lookup>]]></programlisting>
            </section>
            <section>
                <title><literal>&lt;jee:jndi-lookup/&gt;</literal> (complex)</title>
                <para>Before...</para>
                <programlisting><![CDATA[<bean id="simple" class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName" value="jdbc/MyDataSource"/>
    <property name="cache" value="true"/>
    <property name="resourceRef" value="true"/>
    <property name="lookupOnStartup" value="false"/>
    <property name="expectedType" value="com.myapp.DefaultFoo"/>
    <property name="proxyInterface" value="com.myapp.Foo"/>
</bean>]]></programlisting>
                <para>After...</para>
                <programlisting><![CDATA[<jee:jndi-lookup id="simple"
             jndi-name="jdbc/MyDataSource"
             cache="true"
             resource-ref="true"
             lookup-on-startup="false"
             expected-type="com.myapp.DefaultFoo"
             proxy-interface="com.myapp.Foo"/>]]></programlisting>
            </section>
            <section>
                <title><literal>&lt;jee:local-slsb/&gt;</literal> (simple)</title>
                <para>The <literal>&lt;jee:local-slsb/&gt;</literal> tag configures a
                reference to an EJB Stateless SessionBean.</para>
                <para>Before...</para>
                <programlisting><![CDATA[<bean id="simple"
      class="org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean">
  <property name="jndiName" value="ejb/RentalServiceBean"/>
  <property name="businessInterface" value="com.foo.service.RentalService"/>
</bean>]]></programlisting>
                <para>After...</para>
                <programlisting><![CDATA[<jee:local-slsb id="simpleSlsb" jndi-name="ejb/RentalServiceBean"
    business-interface="com.foo.service.RentalService"/>]]></programlisting>
            </section>
            <section>
                <title><literal>&lt;jee:local-slsb/&gt;</literal> (complex)</title>
                <programlisting><![CDATA[<bean id="complexLocalEjb"
      class="org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean">
  <property name="jndiName" value="ejb/RentalServiceBean"/>
  <property name="businessInterface" value="com.foo.service.RentalService"/>
  <property name="cacheHome" value="true"/>
  <property name="lookupHomeOnStartup" value="true"/>
  <property name="resourceRef" value="true"/>
</bean>]]></programlisting>
                <para>After...</para>
                <programlisting><![CDATA[<jee:local-slsb id="complexLocalEjb"
    jndi-name="ejb/RentalServiceBean"
    business-interface="com.foo.service.RentalService"
    cache-home="true"
    lookup-home-on-startup="true"
    resource-ref="true">]]></programlisting>
            </section>
            <section>
                <title><literal>&lt;jee:remote-slsb/&gt;</literal> (simple)</title>
                <para>The <literal>&lt;jee:remote-slsb/&gt;</literal> tag configures a
                reference to a <literal>remote</literal> EJB Stateless SessionBean.</para>
                <para>Before...</para>
                <programlisting><![CDATA[<bean id="complexRemoteEjb"
      class="org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean">
  <property name="jndiName" value="ejb/MyRemoteBean"/>
  <property name="businessInterface" value="com.foo.service.RentalService"/>
  <property name="cacheHome" value="true"/>
  <property name="lookupHomeOnStartup" value="true"/>
  <property name="resourceRef" value="true"/>
  <property name="homeInterface" value="com.foo.service.RentalService"/>
  <property name="refreshHomeOnConnectFailure" value="true"/>
</bean>]]></programlisting>
                <para>After...</para>
                <programlisting><![CDATA[<jee:remote-slsb id="complexRemoteEjb"
    jndi-name="ejb/MyRemoteBean"
    business-interface="com.foo.service.RentalService"
    cache-home="true"
    lookup-home-on-startup="true"
    resource-ref="true"
    home-interface="com.foo.service.RentalService"
    refresh-home-on-connect-failure="true">]]></programlisting>
            </section>
        </section>
        <section id="xsd-config-body-schemas-lang">
            <title>The <literal>lang</literal> schema</title>
            <para>The <literal>lang</literal> tags deal with exposing objects that have been
            written in a dynamic language such as JRuby or Groovy as beans in the Spring
            container.</para>
            <para>These tags (and the dynamic language support) are comprehensively covered
            in the chapter entitled <xref linkend="dynamic-language"/>. Please do consult that
            chapter for full details on this support and the <literal>lang</literal> tags
            themselves.</para>
            <para>In the interest of completeness, to use the tags in the <literal>lang</literal>
            schema, you need to have the following preamble at the top of your Spring XML
            configuration file; the emboldened text in the following snippet references the
            correct schema so that the tags in the <literal>lang</literal> namespace are
            available to you.</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       ]]><emphasis role="bold">xmlns:lang="http://www.springframework.org/schema/lang"</emphasis><![CDATA[
       ]]><emphasis role="bold">xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd"</emphasis><![CDATA[>

]]><lineannotation>&lt;!-- <literal>&lt;bean/&gt;</literal> definitions here --&gt;</lineannotation><![CDATA[

</beans>]]></programlisting>
        </section>
        <section id="xsd-config-body-schemas-tx">
            <title>The <literal>tx</literal> (transaction) schema</title>
            <para>The <literal>tx</literal> tags deal with configuring all of those
            beans in Spring's comprehensive support for transactions. These tags are
            comprehensively covered in the chapter entitled <xref linkend="transaction"/>.</para>
            <para>In the interest of completeness, to use the tags in the <literal>tx</literal>
            schema, you need to have the following preamble at the top of your Spring XML
            configuration file; the emboldened text in the following snippet references the
            correct schema so that the tags in the <literal>tx</literal> namespace are
            available to you.</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   ]]><emphasis role="bold">xmlns:tx="http://www.springframework.org/schema/tx"</emphasis><![CDATA[
	   xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
]]><emphasis role="bold">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</emphasis><![CDATA[
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

]]><lineannotation>&lt;!-- <literal>&lt;bean/&gt;</literal> definitions here --&gt;</lineannotation><![CDATA[

</beans>]]></programlisting>
            <note>
                <para>Often when using the tags in the <literal>tx</literal> namespace you will also be using
                the tags from the <literal>aop</literal> namespace (since the declarative transaction support in Spring is implemented using
                AOP). The above XML snippet contains the relevant lines needed to reference the <literal>aop</literal> schema
                so that the tags in the <literal>aop</literal> namespace are available to you.</para>
            </note>
        </section>
        <section id="xsd-config-body-schemas-aop">
            <title>The <literal>aop</literal> schema</title>
            <para>The <literal>aop</literal> tags deal with configuring all things
            AOP in Spring: this includes Spring's own proxy-based AOP framework and Spring's
            integration with the AspectJ AOP framework. These tags are
            comprehensively covered in the chapter entitled <xref linkend="aop"/>.</para>
            <para>In the interest of completeness, to use the tags in the <literal>aop</literal>
            schema, you need to have the following preamble at the top of your Spring XML
            configuration file; the emboldened text in the following snippet references the
            correct schema so that the tags in the <literal>aop</literal> namespace are
            available to you.</para>
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   ]]><emphasis role="bold">xmlns:aop="http://www.springframework.org/schema/aop"</emphasis><![CDATA[
	   xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
]]><emphasis role="bold">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</emphasis><![CDATA[>

]]><lineannotation>&lt;!-- <literal>&lt;bean/&gt;</literal> definitions here --&gt;</lineannotation><![CDATA[

</beans>]]></programlisting>
        </section>
        <section id="xsd-config-body-schemas-tool">
            <title>The <literal>tool</literal> schema</title>
            <para>The <literal>tool</literal> tags are for use when you want to add
            tooling-specific metadata to your custom configuration elements. This metadata
            can then be consumed by tools that are aware of this metadata, and the tools can
            then do pretty much whatever they want with it (validation, etc.).</para>
            <para>The <literal>tool</literal> tags are not documented in this release of
            Spring as they are currently undergoing review. If you are a third party tool
            vendor and you would like to contribute to this review process, then do mail
            the Spring mailing list. The currently supported <literal>tool</literal>
            tags can be found in the file <literal>'spring-tool.xsd'</literal> in the
            <literal>'src/org/springframework/beans/factory/xml'</literal> directory of the
            Spring source distribution.</para>
        </section>
    </section>
    <section id="xsd-config-setup">
        <title>Setting up your IDE</title>
        <para>This final section documents the steps involved in setting up a number of
        popular Java IDEs to effect the easier editing of Spring's XML Schema-based
        configuration files.</para>
        <para>If your favourite Java IDE or editor is not included in the list of
        documented IDEs, then please do raise an issue on the Spring Framework
        <ulink url="http://opensource.atlassian.com/projects/spring/secure/Dashboard.jspa">JIRA Issue Tracker</ulink>
        and an example with the IDE <emphasis>may</emphasis> may be featured in the next release.</para>
        <section id="xsd-config-setup-eclipse">
            <title>Setting up Eclipse</title>
            <para>The following steps illustrate setting up
            <ulink url="http://www.eclipse.org/">Eclipse</ulink> to be XSD-aware. 
            The assumption in the following steps is that you already have an Eclipse
            project open (either a brand new project or an already existing one).</para>
            <note>
                <para>The following steps were created using Eclipse <emphasis role="bold">3.2</emphasis>.
                The setup will probably be the same (or similar) on an earlier or later
                version of Eclipse.</para>
            </note>
            <step>
                <title>Step One</title>
                <para>Create a new XML file. You can name this file whatever you want. In the
                example below, the file is named <literal>'context.xml'</literal>.
                Copy and paste the following text into the file so that it matches
                the attendant screenshot.</para>
                <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

</beans>]]></programlisting>
		        <para>
			        <mediaobject>
				        <imageobject role="fo">
					        <imagedata fileref="images/eclipse-setup-1.png" format="PNG" align="center" />
				        </imageobject>
				        <imageobject role="html">
					        <imagedata fileref="images/eclipse-setup-1.png" format="PNG" align="center" />
				        </imageobject>
			        </mediaobject>
		        </para>
            </step>
            <step>
                <title>Step Two</title>
                <para>As can be seen in the above screenshot (unless you have a customised
                version of Eclipse with the correct plugins) the XML file will be treated
                as plain text. There is no XML editing support out of the box in Eclipse,
                and as such there is not even any syntax highlighting of elements and attributes.
                To address this, you will have to install an XML editor plugin for Eclipse...</para>
		        <table>
			        <title>Eclipse XML editors</title>
			        <tgroup cols="2">
				        <colspec align="left" />
				        <thead>
					        <row>
						        <entry align="center">XML Editor</entry>
						        <entry align="center">Link</entry>
					        </row>
				        </thead>
				        <tbody>
					        <row>
						        <entry>
							        <para>The Eclipse Web Tools Platform (WTP)</para>
						        </entry>
						        <entry>
							        <ulink url="http://www.eclipse.org/webtools/"/>
						        </entry>
					        </row>
					        <row>
						        <entry>
							        <para>A list of Eclipse XML plugins</para>
						        </entry>
						        <entry>
							        <ulink url="http://eclipse-plugins.2y.net/eclipse/plugins.jsp?category=XML"/>
						        </entry>
					        </row>
				        </tbody>
			        </tgroup>
		        </table>
                <sidebar>
                    <title>Contributing documentation...</title>
                    <para>Patches showing how to configure an Eclipse XML editor are
                    welcomed. Any such contributions are best submitted as patches via
                    the Spring Framework
                    <ulink url="http://opensource.atlassian.com/projects/spring/secure/Dashboard.jspa">JIRA Issue Tracker</ulink>
                    and <emphasis>may</emphasis> may be featured in the next release.</para>
                </sidebar>
                <para>Unfortunately, precisely because there is no standard XML editor for Eclipse,
                there are no further steps showing you how to configure XML Schema support in Eclipse...
                each XML editor plugin would require its very own dedicated section, and this
                is <emphasis>Spring</emphasis> reference documentation, not Eclipse XML editor
                documentation. You will have to read the documentation that comes with your XML
                editor plugin (good luck there) and figure it out for yourself. (The author
                is not trying to be cavalier, it's just that writing step-by-step setups for
                loads of Eclipse XML editor plugins would probably not be worth the effort
                precisely because there is no standard and there are so many different editors.)</para>
                <para>Having said that...</para>
            </step>
            <step>
                <title>Step Three</title>
                <para>If you are using the Web Tools Platform (WTP) for Eclipse, you don't need to
                do anything other than open a Spring XML configuration file using the WTP platform's
                XML editor. As can be seen in the screenshot below, you immediately get some slick
                IDE-level support for autocompleting tags and suchlike. The moral of this story
                is... download and install the <ulink url="http://www.eclipse.org/webtools/">WTP</ulink>,
                because (quite simply, and to paraphrase one of the Spring-WebFlow developers)...
                <quote><emphasis>[WTP] rocks!</emphasis></quote></para>
		        <para>
			        <mediaobject>
				        <imageobject role="fo">
					        <imagedata fileref="images/eclipse-setup-2.png" format="PNG" align="center" />
				        </imageobject>
				        <imageobject role="html">
					        <imagedata fileref="images/eclipse-setup-2.png" format="PNG" align="center" />
				        </imageobject>
			        </mediaobject>
		        </para>
            </step>
        </section>
        <section id="xsd-config-setup-idea">
            <title>Setting up IntelliJ IDEA</title>
            <para>The following steps illustrate how setting up
            <ulink url="http://www.jetbrains.com/idea/">IntelliJ IDEA</ulink> to be XSD-aware. It
            is very simple to do so.</para>
            <para>The assumption in the following steps is that you already have an IDEA project
            open (either a brand new project or an already existing one).</para>
            <step>
                <title>Step One</title>
                <para>Create a new XML file. You can name this file whatever you want. In the
                example below, the file is named <literal>'context.xml'</literal>.
                Copy and paste the following text into the file so that it matches
                the attendant screenshot.</para>
                <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

</beans>]]></programlisting>
		        <para>
			        <mediaobject>
				        <imageobject role="fo">
					        <imagedata fileref="images/idea-setup-1.png" format="PNG" align="center" />
				        </imageobject>
				        <imageobject role="html">
					        <imagedata fileref="images/idea-setup-1.png" format="PNG" align="center" />
				        </imageobject>
			        </mediaobject>
		        </para>
            </step>
            <step>
                <title>Step Two</title>
                <para>As can be seen in the above screenshot, the XML file has a number
                of nasty red contextual error markers. To rectify this, IDEA has to be
                made aware of the location of the referenced XSD namespace(s).</para>
                <para>To do this, simply position the cursor over the squiggly red
                area (see the screenshot below); then press the <keycombo action='open'>
                    <keycap>Alt</keycap>
                    <keycap>Enter</keycap>
                 </keycombo> keystroke combination, and press the <keycombo action='open'>
                    <keycap>Enter</keycap>
                 </keycombo> key again when the popup becomes active to fetch the external
                 resource.</para>
		        <para>
			        <mediaobject>
				        <imageobject role="fo">
					        <imagedata fileref="images/idea-setup-6.png" format="PNG" align="center" />
				        </imageobject>
				        <imageobject role="html">
					        <imagedata fileref="images/idea-setup-6.png" format="PNG" align="center" />
				        </imageobject>
			        </mediaobject>
		        </para>
            </step>
            <step>
                <title>Step Three</title>
                <para>If the external resource could not be fetched (maybe no active Internet
                connection is available), you can manually configure the resource to
                reference a local copy of the attendant XSD file. Simply open up
                the <literal>'Settings'</literal> dialog
                (using the <keycombo action='open'>
                    <keycap>Ctrl</keycap>
                    <keycap>A</keycap>
                    <keycap>S</keycap>
                 </keycombo> keystroke combination or via the <literal>'File|Settings'</literal> menu),
                 and click on the <literal>'Resources'</literal> button.</para>
		        <para>
			        <mediaobject>
				        <imageobject role="fo">
					        <imagedata fileref="images/idea-setup-2.png" format="PNG" align="center" />
				        </imageobject>
				        <imageobject role="html">
					        <imagedata fileref="images/idea-setup-2.png" format="PNG" align="center" />
				        </imageobject>
			        </mediaobject>
		        </para>
            </step>
            <step>
                <title>Step Four</title>
                <para>As can be seen in the following screenshot, this will bring up a dialog
                that allows you to add an explicit reference to a local copy of the
                <literal>util</literal> schema file. (You can find all of the various Spring
                XSD files in the <literal>'src'</literal> directory of the Spring distribution.)</para>
		        <para>
			        <mediaobject>
				        <imageobject role="fo">
					        <imagedata fileref="images/idea-setup-3.png" format="PNG" align="center" />
				        </imageobject>
				        <imageobject role="html">
					        <imagedata fileref="images/idea-setup-3.png" format="PNG" align="center" />
				        </imageobject>
			        </mediaobject>
		        </para>
            </step>
            <step>
                <title>Step Five</title>
                <para>Clicking the <literal>'Add'</literal> button will bring up another dialog
                that allows you to explicitly to associate a namespace URI with the path to the
                relevant XSD file. As can be seen in the following screenshot, the
                <literal>'http://www.springframework.org/schema/util'</literal> namespace
                is being associated with the file resource
                <literal>'C:\bench\spring\src\org\springframework\beans\factory\xml\spring-util.xsd'</literal>.</para>
		        <para>
			        <mediaobject>
				        <imageobject role="fo">
					        <imagedata fileref="images/idea-setup-4.png" format="PNG" align="center" />
				        </imageobject>
				        <imageobject role="html">
					        <imagedata fileref="images/idea-setup-4.png" format="PNG" align="center" />
				        </imageobject>
			        </mediaobject>
		        </para>
            </step>
            <step>
                <title>Step Six</title>
                <para>Exiting out of the nested dialogs by clicking the <literal>'OK'</literal> button
                will then bring back the main editing window, and as can be seen in the
                following screenshot, the contextual error markers have disappeared; typing
                the <literal>'&lt;'</literal> character into the editing window now also
                brings up a handy dropdown box that contains all of the imported tags from
                the <literal>util</literal> namespace.</para>
		        <para>
			        <mediaobject>
				        <imageobject role="fo">
					        <imagedata fileref="images/idea-setup-5.png" format="PNG" align="center" />
				        </imageobject>
				        <imageobject role="html">
					        <imagedata fileref="images/idea-setup-5.png" format="PNG" align="center" />
				        </imageobject>
			        </mediaobject>
		        </para>
            </step>
            <para>
                Repeat as required for setting up IDEA to reference the other Spring XSD files.
            </para>
        </section>
        
        <section id="xsd-config-integration">
            <title>Integration issues</title>
            <para>This final section details integration issues that may arise when you switch over
            to using the above XSD-style for Spring 2.0 configuration.</para>
            <para>This section is quite small at the moment (and hopefully it will stay that way).
            It has been included in the Spring documentation as a convenience to Spring users
            so that if you encounter an issue when switching over to the XSD-style in some
            specific environment you can refer to this section for the authoritative answer.</para>
            
            <section>
                <title>XML parsing errors in the Resin v.3 application server</title>
                <para>If you are using the XSD-style for Spring 2.0 XML configuration
                and deploying to v.3 of Caucho's Resin application server, you will need
                to set some configuration options prior to startup so that an XSD-aware
                parser is available to Spring.</para>
                <para>Please do consult the following resource on the Caucho Resin website for
                more information.</para>
                <para><ulink url="http://www.caucho.com/resin-3.0/xml/jaxp.xtp#xerces">http://www.caucho.com/resin-3.0/xml/jaxp.xtp#xerces</ulink></para>
            </section>
        </section>
    </section>
</appendix>