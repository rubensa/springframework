<?xml version="1.0"?>

<!--
	Similar to main build file, but using Commons Attributes to deliver
	autoproxying: no need to use TransactionProxyFactoryBean.
-->
<project name="jpetstore" basedir=".." default="usage">

	<property name="name" value="jpetstore"/>

	<property name="war.dir" value="war"/>
	<property name="src.dir" value="src"/>
	<property name="build.dir" value=".classes"/>
	<property name="weblib.dir" value="${war.dir}/WEB-INF/lib"/>
	<property name="dist.dir" value="dist"/>

	<!--
		Set the directory where Java source files generated by Commons Attributes
		will be written.
	-->
	<property name="commons.attributes.tempdir" value=".atts" />

	<property name="spring.root" value="../.."/>


	<path id="master-classpath">
		<fileset dir="${spring.root}/lib/ibatis">
			<include name="ibatis-db.jar"/>
		</fileset>
		<fileset dir="${spring.root}/lib/jakarta-commons">
			<include name="commons-logging.jar"/>
			<include name="commons-attributes-api*.jar"/>
		</fileset>
		<fileset dir="${spring.root}/lib/j2ee">
			<include name="servlet.jar"/>
			<include name="jdbc2_0-stdext.jar"/>
		</fileset>
		<fileset dir="${spring.root}/lib/struts">
			<include name="struts-1.1.jar"/>
		</fileset>
		<fileset dir="${spring.root}/dist">
			<include name="spring.jar"/>
		</fileset>
	</path>


	<target name="usage">

		<echo message=""/>
		<echo message="Spring JPetStore build file"/>
		<echo message="------------------------------------------------------"/>
		<echo message=""/>
		<echo message="Available targets are:"/>
		<echo message=""/>
		<echo message="clean    --> Clean output dirs"/>
		<echo message="build    --> Compile main Java sources and copy libraries"/>
		<echo message="warfile  --> Build the web application archive"/>
		<echo message="all      --> Clean, build, warfile"/>
		<echo message=""/>

	</target>
	
	<target name="noop" >
		<echo message="rootbuild file" />
	</target>


	<target name="clean" description="Clean output dirs (build, weblib, dist)">

		<delete dir="${build.dir}"/>
		<delete dir="${weblib.dir}"/>
		<delete dir="${dist.dir}"/>

	</target>

	<!--
		Compile attributes with Jakarta Commons Attributes.
		It will generate source files in the $commons.attributes.tempdir
		directory. These must then be compiled along with the application
		Java sources in the build target below.
	-->
	<target name="compileAttributes" >
	
		<echo>
			Compiling Attributes with Jakarta Commons Attributes.
			If this target fails, remember to copy the Jakarta Commons Attributes
			compiler Jar, xjavadoc.jar (from XDoclet) and Jakarta commons-collections.jar
			into $ANT_HOME/lib.
		</echo>
 	
	 	<!-- Bring in Jakarta Commons attribute compilation -->
	  	<taskdef resource="org/apache/commons/attributes/anttasks.properties"/>
	  
	 	<!-- Compile to a temp directory: Commons Attributes will place Java Source here. -->
	 	 <attribute-compiler 
	 	 	destdir="${commons.attributes.tempdir}" 
	 	 >
	         <fileset dir="${src.dir}" includes="**/*.java"/>
	     </attribute-compiler>
 	</target>
 	
	<target name="build" depends="compileAttributes"
		description="Compile main source tree java files into class files, generate jar files">

		<mkdir dir="${build.dir}"/>

		<javac destdir="${build.dir}" target="1.3" debug="true"
			deprecation="false" optimize="false" failonerror="true">
			<src path="${src.dir}"/>
			<src path="${commons.attributes.tempdir}"/>
			<classpath refid="master-classpath"/>
		</javac>

		<copy todir="${build.dir}" preservelastmodified="true">
			<fileset dir="${src.dir}">
				<include name="**/*.xml"/>
			</fileset>
		</copy>

		<mkdir dir="${weblib.dir}"/>

		<jar jarfile="${weblib.dir}/petstore.jar" compress="true" basedir="${build.dir}"/>

		<copy todir="${weblib.dir}" preservelastmodified="true">
			<fileset dir="${spring.root}/lib/aop-alliance">
				<include name="aopalliance.jar"/>
			</fileset>
			<fileset dir="${spring.root}/lib/cglib">
				<include name="cglib-asm.jar"/>
			</fileset>
			<fileset dir="${spring.root}/lib/hsqldb">
				<include name="hsqldb.jar"/>
			</fileset>
			<fileset dir="${spring.root}/lib/ibatis">
				<include name="ibatis-db.jar"/>
			</fileset>
			<fileset dir="${spring.root}/lib/jakarta-commons">
				<include name="commons-beanutils.jar"/>
				<include name="commons-collections.jar"/>
				<include name="commons-digester.jar"/>
				<include name="commons-lang.jar"/>
				<include name="commons-logging.jar"/>
				<include name="commons-validator.jar"/>
				<include name="commons-attributes-api*.jar"/>
				
				<!-- For Apache Commons DBCP datasource -->
				<include name="commons-pool.jar"/>
				<include name="commons-dbcp.jar"/>
			</fileset>
			<fileset dir="${spring.root}/lib/jdom">
				<include name="jdom.jar"/>
			</fileset>
			<fileset dir="${spring.root}/lib/jstl">
				<include name="jstl.jar"/>
				<include name="standard.jar"/>
			</fileset>
			<fileset dir="${spring.root}/lib/struts">
				<include name="struts-1.1.jar"/>
			</fileset>
			<fileset dir="${spring.root}/dist">
				<include name="spring.jar"/>
			</fileset>
		</copy>

	</target>


	<target name="dist" depends="warfile">
		<!-- 
			delegate to warfile target by depending on it.  dist is just to offer
			a generic target name across all Spring sample apps that may be used
			for autobuilds testing
		-->
	</target>
	
	<target name="warfile" depends="build" description="Build the web application archive">

		<mkdir dir="${dist.dir}"/>

		<war warfile="${dist.dir}/${name}.war" basedir="${war.dir}" webxml="attributes/WEB-INF/web.xml">
			<include name="*"/>
			<include name="images/**"/>
			
			<!-- Take application context files from this directory tree -->
			<fileset dir="attributes">
				<include name="WEB-INF/declarativeServices.xml"/> 
				<include name="WEB-INF/applicationContext.xml"/>
			</fileset>
			<include name="WEB-INF/petstore-servlet.xml"/>
			<include name="WEB-INF/struts-config.xml"/>
			<include name="WEB-INF/classes/*.properties"/>
			<include name="WEB-INF/classes/*.xml"/>
			<include name="WEB-INF/lib/**"/>
			<include name="WEB-INF/jsp/**"/>
			<exclude name="**/.*"/>
		</war>

	</target>


	<target name="all" depends="clean,build,warfile" description="Clean,build,warfile"/>

</project>
