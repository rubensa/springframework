<?xml version="1.0" encoding="UTF-8"?>
<!--
	- Application context definition for PetClinic on JDBC.
-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">

	<!--  
		Activates various annotations to be detected in bean classes: Spring's 
		@Required and @Autowired, as well as JSR 250's @PostConstruct, 
		@PreDestroy and @Resource (if available) and JPA's @PersistenceContext 
		and @PersistenceUnit (if available). 
	-->
	<context:annotation-config />

	<!-- ========================= RESOURCE DEFINITIONS ========================= -->

	<!-- Configurer that replaces ${...} placeholders with values from a properties file -->
	<!-- (in this case, JDBC-related settings for the dataSource definition below) -->
	<context:property-placeholder location="/WEB-INF/jdbc.properties" />

	<!-- 
		Simple local DataSource that works in any environment.
		This uses the JDBC DriverManager to obtain connections, and does NOT perform connection
		pooling. Connection pooling is essential to all real-world applications.
		This definition is good for getting started, as it introduces no dependencies beyond
		the JDK, but DriverManagerDataSource is not intended for production usage.
	-->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"
		p:driverClassName="${jdbc.driverClassName}" p:url="${jdbc.url}" p:username="${jdbc.username}"
		p:password="${jdbc.password}" />

	<!-- 
		Alternative local DataSource that works in any environment, and offers much better performance.
		Uses Apache Commons DBCP for connection pooling. See Commons DBCP documentation
		for the required JAR files. See the PetStore sample application also shipped with
		Spring, for an example of Commons DBCP usage and the necessary build script.
		Alternatively you can use another connection pool such as C3P0, similarly configured
		using Spring.
		A standalone connection pool such as Commons DBCP is a good choice for use outside an
		application server environment, including web applications running in a web container without
		JTA, or integration testing using the org.springframework.test package.
	-->
	<!--
		<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
		p:driverClassName="${jdbc.driverClassName}" p:url="${jdbc.url}" p:username="${jdbc.username}"
		p:password="${jdbc.password}" />
	-->

	<!-- JNDI DataSource for JEE environments -->
	<!--
		<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/petclinic" />
	-->

	<!-- Transaction manager for a single JDBC DataSource (alternative to JTA) -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />

	<!-- Transaction manager that delegates to JTA (for a transactional JNDI DataSource) -->
	<!--
		<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager"/>
	-->


	<!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->

	<!-- PetClinic's central data access object: HSQL JDBC implementation -->
	<!-- (only initialized when referenced by the "clinic" proxy) -->
	<bean id="hsqlClinic" class="org.springframework.samples.petclinic.jdbc.HsqlJdbcClinic" lazy-init="true"
		p:dataSource-ref="dataSource" />

	<!-- PetClinic's central data access object: MySQL JDBC implementation -->
	<!-- (only initialized when referenced by the "clinic" proxy) -->
	<bean id="mysqlClinic" class="org.springframework.samples.petclinic.jdbc.MySQLJdbcClinic" lazy-init="true"
		p:dataSource-ref="dataSource" />

	<!--
		- Transactional proxy for PetClinic's central data access facade.
		- Implements the CachingClinic management interface.
		-
		- Note that in a real-life app with multiple transaction proxies,
		- you will probably want to use parent and child bean definitions
		- as described in the manual, to reduce duplication.
	-->
	<bean id="clinic" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
		<property name="target" ref="${petclinic.jdbcImplBeanName}" />
		<property name="transactionAttributes">
			<props>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="store*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
		<property name="preInterceptors" ref="callMonitor" />
	</bean>

	<!-- Call monitoring interceptor that monitors call count and call invocation time -->
	<!-- Implements the CallMonitor management interface -->
	<bean id="callMonitor" class="org.springframework.samples.petclinic.jmx.CallMonitoringInterceptor" />


	<!-- ========================= JMX EXPORTER DEFINITION ========================= -->

	<!--
		- Exporter that exposes both the CachingClinic and the CallMonitor via JMX.
		-
		- By default, the standard MBeanServerFactory.findMBeanServer method will be used
		- to determine the MBeanServer. Unfortunately, this does not work on WebLogic <= 8.1:
		- you need to comment in the WebLogicMBeanServerFactoryBean definition on WebLogic,
		- specifying appropriate configuration values there.
		-
		- Note that you need to comment in the "defaultCurrencyTimeLimit" value on JBoss 3.x.
	-->
	<bean id="jmxExporter" class="org.springframework.jmx.export.MBeanExporter">
		<property name="beans">
			<map>
				<entry key="petclinic:type=Clinic" value-ref="clinic" />
				<entry key="petclinic:type=CallMonitor" value-ref="callMonitor" />
			</map>
		</property>
		<property name="assembler">
			<bean class="org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler">
				<property name="interfaceMappings">
					<props>
						<prop key="petclinic:type=Clinic">
							org.springframework.samples.petclinic.jdbc.CachingClinic
						</prop>
						<prop key="petclinic:type=CallMonitor">
							org.springframework.samples.petclinic.jmx.CallMonitor
						</prop>
					</props>
				</property>
				<!-- Comment the following in on JBoss 3.x, which doesn't follow -->
				<!-- the JMX 1.2 recommendation for currencyTimeLimit behavior. -->
				<!--
					<property name="defaultCurrencyTimeLimit" value="0"/>
				-->
			</bean>
		</property>
		<!-- Comment the following in on WebLogic <= 8.1, which doesn't support -->
		<!-- the standard MBeanServerFactory.findMBeanServer lookup mechanism. -->
		<!--
			<property name="server">
			<bean class="org.springframework.jmx.support.WebLogicJndiMBeanServerFactoryBean"/>
			</property>
		-->
	</bean>

</beans>
