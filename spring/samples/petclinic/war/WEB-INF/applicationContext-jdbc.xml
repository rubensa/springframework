<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<!--
  - Application context definition for Petclinic on JDBC.
	-->
<beans>

	<!-- ========================= RESOURCE DEFINITIONS ========================= -->
  
	<!-- Configurer that replaces ${...} placeholders with values from a properties file -->
	<!-- (in this case, JDBC-related settings for the dataSource definition below) -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location"><value>/WEB-INF/jdbc.properties</value></property>
	</bean>

	<!-- Local DataSource that works in any environment -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"><value>${jdbc.driverClassName}</value></property>
		<property name="url"><value>${jdbc.url}</value></property>
		<property name="username"><value>${jdbc.username}</value></property>
		<property name="password"><value>${jdbc.password}</value></property>
	</bean>

	<!-- JNDI DataSource for J2EE environments -->
	<!--
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName"><value>java:comp/env/jdbc/petclinic</value></property>
	</bean>
	-->

	<!-- Transaction manager for a single JDBC DataSource (alternative to JTA) -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource"><ref local="dataSource"/></property>
	</bean>

	<!-- Transaction manager that delegates to JTA (for a transactional JNDI DataSource) -->
	<!--
	<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager"/>
	-->


	<!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->

	<!-- Petclinic's central data access object: HSQL JDBC implementation -->
	<!-- (only initialized when referenced by the "clinic" proxy) -->
	<bean id="hsqlClinic" class="org.springframework.samples.petclinic.jdbc.HsqlJdbcClinic" lazy-init="true">
		<property name="dataSource"><ref local="dataSource"/></property>
	</bean>

	<!-- Petclinic's central data access object: MySQL JDBC implementation -->
	<!-- (only initialized when referenced by the "clinic" proxy) -->
	<bean id="mysqlClinic" class="org.springframework.samples.petclinic.jdbc.MySQLJdbcClinic" lazy-init="true">
		<property name="dataSource"><ref local="dataSource"/></property>
	</bean>

	<!--
		- Transactional proxy for Petclinic's central data access facade.
		-
		- Note that in a real-life app with multiple transaction proxies,
		- you will probably want to use parent and child bean definitions
		- as described in the manual, to reduce duplication.
    -->
	<bean id="clinic" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager"><ref local="transactionManager"/></property>
		<property name="target"><ref bean="${petclinic.jdbcImplBeanName}"/></property>
		<property name="transactionAttributes">
			<props>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>

</beans>
