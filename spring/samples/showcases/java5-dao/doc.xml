<section id="showcases-java5-dao">
	<title>Implementing DAOs using SimpleJdbcTemplate and @Repository</title>
	<para>This small project showcases using some of the Java5 features in Spring
	to implement DAOs with Hibernate and JDBC.</para>

	<para>The web project is <emphasis>very</emphasis> simplistic, because the intent is
	to convey the basics of using the SimpleJdbcTemplate and the @Repository annotation and
	several other DAO-related features, but nothing else.</para>
	
	<section>
		<title>The domain</title>
		<para>The domain in this sample application concerns itself with car parts.
		There are two domain classes: <literal>Part</literal> and <literal>CarModel</literal>.
		Using a <literal>CarPartsInventory</literal> car plants for example will
		be able to query for parts, update the stock of certain parts and add new parts.</para>
	</section>
	<section>
		<title>The data access objects</title>
		<para>Based on a <literal>CarPartsInventory</literal> interface there are
		3 DAO implementations, each using a different style. Two are using Hibernate and
		the other is using JDBC.</para>
		
		<para>The <literal>JdbcCarPartsInventoryImpl</literal> uses JDBC and the SimpleJdbcTemplate.
		If you look closely at this DAO you will see that the Java5 features the 
		SimpleJdbcTemplate uses significantly clean up your data access code.</para>
		
		<para>The <literal>TemplateHibernateCarPartsInventoryImpl</literal> uses the
		HibernateTemplate to query for Parts and update part stock. This is nothing out of the
		ordinary if you're used to programming using Spring and Hibernate.</para>
		
		<para>The <literal>PlainHibernateCarPartsInventoryImpl</literal> however doesn't
		use the HibernateTemplate anymore. It uses the plain Hibernate3 API to query the
		session and the database for parts. Of course, the Hibernate3 API does not throw
		Spring <literal>DataAccessException</literal>s while this was originally one of the
		reasons to start using the HibernateTemplate. Spring 2.0 however adds an annotation
		that still allows you to get the same behavior. The @Repository annotation (if you look
		carefully at the PlainHibernateCarPartsInventoryImpl, you'll see it's marked as such)
		in combination with the PersistenceExceptionTranslatorPostProcessor automatically take
		care of translation Hibernate exception into Spring DataAccessExceptions</para>
	
	</section>

	<section>
		<title>Build</title>
		<para>The <emphasis>samples/showcases/java5-dao</emphasis> directory contains the project's source.
		The project only contains unit tests that you can look at apart from the source code. To build and
		run the unit tests, you need to build with Apache Ant (or run the sample in your favorite IDE).
		Run <literal>ant tests</literal> using a Java5 VM (the project uses annotations and generics)</para>
	</section>
</section>
