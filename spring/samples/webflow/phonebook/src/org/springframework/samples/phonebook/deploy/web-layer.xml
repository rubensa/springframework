<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>

	<!-- search flow beans -->
	
	<!-- Xml FlowBuilder definition for the search flow -->
	<bean id="person.Search" class="org.springframework.web.flow.config.XmlFlowFactoryBean">
		<property name="location" value="classpath:org/springframework/samples/phonebook/web/flow/search-flow.xml"/>
	</bean>
	
	<!-- Java FlowBuilder definition for the search flow.
	     Uncomment if you wish to plugin this FlowBuilder instead of the xml implementation!
	     (be sure to comment out the xml variant)
	     Notice the consistency: you may plug in any other FlowBuilder implementation in
	     exactly the same fashion -->
	<!--
	<bean id="person.Search" class="org.springframework.web.flow.config.FlowFactoryBean">
		<property name="flowBuilder">
			<bean class="org.springframework.samples.phonebook.web.flow.SearchPersonFlowBuilder" autowire="byType"/>
		</property>
	</bean>
	-->
	
	<bean id="person.Search.criteria.formAction" class="org.springframework.web.flow.action.FormAction">
		<property name="formObjectName" value="query"/>
		<property name="formObjectClass" value="org.springframework.samples.phonebook.domain.PhoneBookQuery"/>
		<property name="formObjectScopeAsString" value="flow"/>
		<property name="validator">
			<bean class="org.springframework.samples.phonebook.domain.PhoneBookQueryValidator"/>
		</property>
	</bean>

	<bean id="person.Search.executeQuery" class="org.springframework.samples.phonebook.web.flow.action.ExecuteQueryAction" autowire="byType"/>

	<!-- The event parameter mapper action sets request parameters as attributes in the flow model.
	     The exact mapping(s) policies are fully configurable; in this case, the
	     "id" request parameter is mapped to the "id" attribute and converted
	     to a java.lang.Long in the target flow model!  -->
	<bean id="person.Search.id.set" class="org.springframework.web.flow.action.EventParameterMapperAction">
		<property name="mapping" value="id,java.lang.Long"/>
		<property name="targetScopeAsString" value="flow"/>
	</bean>

	<!-- detail flow beans -->

	<!-- xml FlowBuilder definition for the detail flow -->
	<bean id="person.Detail" class="org.springframework.web.flow.config.XmlFlowFactoryBean">
		<property name="location" value="classpath:org/springframework/samples/phonebook/web/flow/detail-flow.xml"/>
	</bean>
	
	<!-- Java flow builder definition for the detail flow.
	     Uncomment if you wish to plugin this flow builder instead of the xml implementation!
	     (be sure to comment out the xml variant)
	     Notice the consistency: you may plug in any other FlowBuilder implementation in
	     exactly the same fashion -->
	<!--
	<bean id="person.Detail" class="org.springframework.web.flow.config.FlowFactoryBean">
		<property name="flowBuilder">
			<bean class="org.springframework.samples.phonebook.web.flow.PersonDetailFlowBuilder" autowire="byType"/>
		</property>
	</bean>
	-->
	
	<!-- The event parameter mapper action sets request parameters as attributes in flow scope.
	     The exact mapping(s) policies are fully configurable; in this case, the
	     "id" request parameter is mapped to the "colleagueId" attribute and converted
	     to a java.lang.Long in the target flow scope!  -->
	<bean id="person.Detail.colleagueId.set" class="org.springframework.web.flow.action.EventParameterMapperAction">
		<property name="mapping" value="id->colleagueId,java.lang.Long"/>
		<property name="targetScopeAsString" value="flow"/>
	</bean>
		
	<!-- A type conversion service, a more flexible/threadsafe/lightweight alternative to the PropertyEditor! -->
	<bean id="conversion.service" class="org.springframework.binding.convert.support.DefaultConversionService" autowire="byType"/>

	<!-- A formatter registry, a thread-safe cache for Formatters: a thread-safe, lighter weight alt. to PropertyEditors! -->
	<bean id="formatter.locator" class="org.springframework.binding.format.support.ThreadLocalFormatterLocator" autowire="byType"/>

	<!-- A broadcaster that will notify the formatter registry to cleanup all thread locals on app shutdown -->
	<bean id="thread.cleanupBroadcaster" class="org.springframework.binding.thread.support.DefaultThreadCleanupBroadcaster"/>

</beans>