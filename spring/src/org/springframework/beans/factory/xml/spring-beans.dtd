<!--
	Spring XML BeanFactory DTD.
	Author: Rod Johnson
	
	This defines a simple and consistent way of creating a namespace
	of JavaBeans configured by a Spring XmlBeanFactory.
	
	This document type is used by most Spring functionality, including
	web application contexts, which are based on BeanFactories.
	
	Each <bean> element in this document defines a JavaBean.
	Typically the bean class is specified, along with JavaBean
	properties.
	
	References among beans are supported (setting a JavaBean
	property to refer to another bean in the same factory).
	
	Bean instances can be "singletons" (shared instances)
	or "prototypes" (independent instances).
	
	There is also support for lists, maps, and 
	java.util.Properties types.
	
	As the format is simple, a DTD is sufficient, and there's
	no need for a schema at this point.
	
	$Id$
-->

<!-- 
	The document root.
	At least one bean definition is required.
-->

<!ELEMENT beans (
        bean+
)>

<!--
  Default values for all bean definitions. Can be overridden at
  the "bean" level. See those attribute definitions for details.
-->
<!ATTLIST beans default-dependency-check (none | objects | simple | all) "none">
<!ATTLIST beans default-autowire (no | byName | byType) "no">

<!--
	Defines a single named bean.
-->
<!ELEMENT bean (
        (constructor-arg | property)*
)>

<!--
	All beans are identified by an id, to enable reference checking.
	There are constraints on a valid XML id: if you want to reference
	your bean in Java code using a name that's illegal as an XML id,
	use the optional "name" attribute.
-->
<!ATTLIST bean id ID #IMPLIED>

<!--
	Optional. Can be used to create an alias illegal in an id.
-->
<!ATTLIST bean name CDATA #IMPLIED>

<!--
	Each bean definition must specify the FQN of the class,
	or the name of the parent bean from which the class can be worked out.

	Note that a child bean definition that references a parent will just
	add respectively override property values and be able to change the
	singleton status. It will inherit all of the parent's other parameters
	like lazy initialization or autowire settings.
-->
<!ATTLIST bean class CDATA #IMPLIED>
<!ATTLIST bean parent CDATA #IMPLIED>

<!--
	Is this bean a "singleton" (one shared instance, which will
	be returned by all calls to getBean() with the id),
	or a "prototype" (independent instance resulting from each call to
	getBean(). Default is singleton.

	Singletons are most commonly used, and are ideal for multi-threaded
	service objects.
-->
<!ATTLIST bean singleton (true | false) "true">

<!--
  If this bean should be lazily initialized.
	If false, it will get instantiated on startup by bean factories
	that perform eager initialization of singletons.
-->
<!ATTLIST bean lazy-init (true | false) "false">

<!--
	Optional attribute controlling whether to check whether all this
	beans dependencies, expressed in its properties, are satisfied.
	Default is no dependency checking.
	"simple" type dependency checking includes primitives and String
	"object" includes collaborators (other beans in the factory)
	"all" includes both types of dependency checking
-->
<!ATTLIST bean dependency-check (none | objects | simple | all | default) "default">

<!--
	Optional attribute controlling whether to "autowire"
	bean properties. This is an automagical process in which bean references
	don't need to be coded explicitly in the XML bean definition file,
	but Spring works out dependencies.

	There are three modes:

	1. no
	The traditional Spring default. No automagical wiring. Bean references
	must be defined in the XML file via the <ref> element. We recommend this
	in most cases as it makes documentation more explicit.

	2. byName
	Autowiring by property name. If a bean of class Cat exposes a dog property,
	Spring will try to set this to the value of the bean "dog" in the current
	factory.

	3. byType
	This is like the PicoContainer default, in which there must be exactly
	one bean of the property type in the bean factory. If there are 0 or
	more than one, a fatal error is raised, and you can't use byType autowiring
	for that bean.
	This makes bean factories simple to configure for small namespaces,
	but doesn't work as well as standard Spring behaviour for
	bigger applications.

	Autowire behaviour can be combined with dependency checking, which will
	be performed after all auto wiring has been completed.
-->
<!ATTLIST bean autowire (no | byName | byType | constructor | default) "default">

<!-- 
	Optional attribute for the name of the custom initialization method
	to invoke after setting bean properties. The method must have no arguments,
	but may throw any exception. 
-->
<!ATTLIST bean init-method CDATA #IMPLIED>

<!--
	Optional attribute for the name of the custom destroy method to invoke
	on bean factory shutdown. The method must have no arguments,
	but may throw any exception. Note: Only invoked on singleton beans!
-->
<!ATTLIST bean destroy-method CDATA #IMPLIED>

<!--
	Bean definitions can specify zero or more constructor arguments.
	They correspond to either a specific index of the constructor argument list
	or are supposed to be matched generically by type.
	This is an alternative to "autowire constructor".
-->
<!ELEMENT constructor-arg (
        (value | ref | list | map | props)
)>

<!--
	Bean definitions can have zero or more properties. 
	Property elements correspond to JavaBean setter methods exposed
	by the bean classes. Spring supports primitives, references to other
	beans in the same or related factories, lists, maps and properties.
-->
<!ELEMENT property (
        (value | ref | list | map | props)
)>

<!ATTLIST constructor-arg index CDATA #IMPLIED>

<!--
	The property name attribute is the name of the JavaBean property.
	This follows JavaBean conventions: a name of "age" would correspond
	to setAge()/optional getAge() methods.
-->
<!ATTLIST property name CDATA #REQUIRED>

<!--
	Defines a reference to another bean in this factory or an external
	factory (parent or included factory). 
-->
<!ELEMENT ref EMPTY>

<!--
	Contains a string representation of a property value.
	The property may be a string, or may be converted to the
	required type using the JavaBeans PropertyEditor
	machinery. This makes it possible for application developers
	to write custom PropertyEditor implementations that can
	convert strings to objects. 
	
	Note that this is recommended for simple objects only.
	Configure more complex objects by setting JavaBean
	properties to references to other beans.
-->
<!ELEMENT value (#PCDATA)>

<!--
	References must specify a name of the target bean.
	The "bean" attribute can reference any name from any bean in the context,
	to be checked at runtime.
	Local references, using the "local" attribute, have to use bean ids;
	they can be checked by this DTD, thus should be preferred for references
	within the same bean factory XML file.
	The "external" attribute can be used to explictly indicate a reference to
	a bean outside the current XML file; they can be checked only at runtime,
	just like the generic "bean" attribute.
-->
<!ATTLIST ref bean CDATA #IMPLIED>
<!ATTLIST ref local IDREF #IMPLIED>
<!ATTLIST ref external CDATA #IMPLIED>

<!--
	A list can contain multiple value and/or ref elements.
	Java lists are untyped, pending generics support in Java 1.5. 
	although references will be strongly typed. 
	A list can also map to an array type. The necessary conversion
	is automatically performed by the Spring AbstractBeanFactory. 
-->
<!ELEMENT list (
        (value | ref)*
)>

<!--
	A Spring map is a mapping from a string key to object.
	Maps may be empty.
-->
<!ELEMENT map (
        (entry)*
)>

<!--
	A map entry can be a value, ref or list
	The name of the property is given by the "key" attribute.
-->
<!ELEMENT entry (
        (value | ref | list | map)*
)>

<!ATTLIST entry key CDATA #REQUIRED>

<!--
	Props elements differ from map elements in that values must be strings.
	Props may be empty.
-->
<!ELEMENT props (
        (prop)*
)>

<!--
	Element content is the string value of the property. The "key"
	attribute is the name of the property.
-->
<!ELEMENT prop
        (#PCDATA)
>

<!--
	Each property element must specify the key. The value
	is the element content.
-->
<!ATTLIST prop key CDATA #REQUIRED>
