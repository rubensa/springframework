/* * Copyright 2002-2004 the original author or authors. * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.springframework.jms.support.destination;import java.util.Collections;import java.util.HashMap;import java.util.Map;import javax.jms.Destination;import javax.jms.JMSException;import javax.jms.Session;import javax.naming.NamingException;import org.springframework.jndi.JndiLocatorSupport;/** * Implementation of the DestinationResolver interface which interprets * destination names as JNDI locations, falling back to dynamic destinations else. * * <p>Allows for customizing the JNDI environment if necessary, * for example specifying appropriate JNDI environment properties. * * <b>Automatic creation of dynamic destinations is turned off by default. * Specify "fallbackToDynamicDestination" as "true" to enable this functionality. * * <p>Dynamic queues and topics get cached by destination name. * Thus, use unique destination names across both queues and topics. * * @author Mark Pollack * @author Juergen Hoeller * @see #setJndiTemplate * @see #setJndiEnvironment * @see #setFallbackToDynamicDestination */public class JndiDestinationResolver extends JndiLocatorSupport implements DestinationResolver {	private boolean fallbackToDynamicDestination = false;	private final Map destinationCache = Collections.synchronizedMap(new HashMap());	/**	 * Set the ability of JmsTemplate to create dynamic destinations	 * if the destination name is not found in JNDI.	 */	public void setFallbackToDynamicDestination(boolean fallbackToDynamicDestination) {		this.fallbackToDynamicDestination = fallbackToDynamicDestination;	}	/**	 * If a destination name is not found in JNDI, then it will	 * be created dynamically.	 */	public boolean isFallbackToDynamicDestination() {		return fallbackToDynamicDestination;	}	public Destination resolveDestinationName(Session session, String destinationName, boolean isPubSubDomain)			throws JMSException {		Destination dest = (Destination) this.destinationCache.get(destinationName);		if (dest == null) {			try {				dest = (Destination) lookup(destinationName);			}			catch (NamingException ex) {				if (isFallbackToDynamicDestination()) {					if (isPubSubDomain) {						dest = session.createTopic(destinationName);					}					else {						dest = session.createQueue(destinationName);					}				}				else {					throw new DestinationResolutionException("Could not get destination name [" + destinationName +																									 "] from JNDI", ex);				}			}			this.destinationCache.put(destinationName, dest);		}		return dest;	}}